(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["main"],{

/***/ 80484:
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AppRoutingModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const routes = [
/*
{
  path: '404',  loadChildren: () => import('./pages/common-home/common-home.module').then(m => m.CommonHomePageModule),
},
    */
{
  path: 'FiStandortelistePage',
  loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/fi-standorteliste/fi-standorteliste.module */ 96012))).then(m => m.FiStandortelistePageModule)
}, {
  path: 'FiMitarbeiterlistePage',
  loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/fi-mitarbeiterliste/fi-mitarbeiterliste.module */ 99988))).then(m => m.FIMitarbeiterlistePageModule)
}, {
  path: '',
  loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-home/common-home.module */ 27735))).then(m => m.CommonHomePageModule)
}, {
  path: 'HomePage',
  loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-home/common-home.module */ 27735))).then(m => m.CommonHomePageModule)
}, {
  path: 'WartungPage',
  loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-wartung/common-wartung.module */ 87848))).then(m => m.CommonWartungPageModule)
}, {
  path: 'EinstellungenPage',
  loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-einstellungen/common-einstellungen.module */ 66068))).then(m => m.CommonEinstellungenPageModule)
}, {
  path: 'UrlaubPlanungPage',
  loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-urlaub-planung/common-urlaub-planung.module */ 74484))).then(m => m.CommonUrlaubsplanungPageModule)
}, {
  path: 'UrlaubUebersichtPage',
  loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-urlaub-uebersicht/common-urlaub-uebersicht.module */ 19204))).then(m => m.CommonUrlaubsuebersichtPageModule)
}, {
  path: 'UrlaubsgesamtuebersichtPage',
  loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-urlaub-gesamtuebersicht/common-urlaub-gesamtuebersicht.module */ 98348))).then(m => m.CommonUrlaubsgesamtuebersichtPageModule)
}, {
  path: 'UrlaubFreigabenPage',
  loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-urlaub-freigaben/common-urlaub-freigaben.module */ 5884))).then(m => m.CommonUrlaubFreigabenPageModule)
}, {
  path: 'UrlaubEinstellungenPage',
  loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-urlaub-einstellungen/common-urlaub-einstellungen.module */ 53964))).then(m => m.CommonUrlaubEinstellungenPageModule)
}];
let AppRoutingModule = class AppRoutingModule {};
exports.AppRoutingModule = AppRoutingModule;
exports.AppRoutingModule = AppRoutingModule = tslib_1.__decorate([(0, core_1.NgModule)({
  imports: [router_1.RouterModule.forRoot(routes, {
    preloadingStrategy: router_1.PreloadAllModules,
    useHash: false
  })],
  exports: [router_1.RouterModule]
})], AppRoutingModule);

/***/ }),

/***/ 86108:
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AppComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const debug_1 = __webpack_require__(/*! ./services/debug/debug */ 34388);
const database_pool_service_1 = __webpack_require__(/*! ./services/database-pool/database-pool.service */ 7992);
const menue_service_1 = __webpack_require__(/*! ./services/menue/menue.service */ 59460);
const basics_1 = __webpack_require__(/*! ./services/basics/basics */ 14652);
const database_authentication_service_1 = __webpack_require__(/*! ./services/database-authentication/database-authentication.service */ 97092);
const tools_1 = __webpack_require__(/*! ./services/tools/tools */ 19668);
const rxjs_1 = __webpack_require__(/*! rxjs */ 90856);
const msal_angular_1 = __webpack_require__(/*! @azure/msal-angular */ 38460);
const msal_browser_1 = __webpack_require__(/*! @azure/msal-browser */ 10892);
const const_1 = __webpack_require__(/*! ./services/const/const */ 29743);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ./services/database-mitarbeiter/database-mitarbeiter.service */ 22848);
const database_standorte_service_1 = __webpack_require__(/*! ./services/database-standorte/database-standorte.service */ 58864);
const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ./services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 15024);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const graph_1 = __webpack_require__(/*! ./services/graph/graph */ 8608);
const database_urlaub_service_1 = __webpack_require__(/*! ./services/database-urlaub/database-urlaub.service */ 9544);
const database_appeinstellungen_service_1 = __webpack_require__(/*! ./services/database-appeinstellungen/database-appeinstellungen.service */ 96140);
let AppComponent = class AppComponent {
  platform;
  Pool;
  Menuservice;
  AuthService;
  changeDetector;
  Basics;
  Tools;
  Const;
  authService;
  msalBroadcastService;
  MitarbeiterDB;
  MitarbeitersettingsDB;
  StandortDB;
  UrlaubDB;
  GraphService;
  AppeinstellungenDB;
  Debug;
  Destroying = new rxjs_1.Subject();
  Zoomfaktor;
  Settingssubscription;
  constructor(platform, Pool, Menuservice, AuthService, changeDetector, Basics, Tools, Const, authService, msalBroadcastService, MitarbeiterDB, MitarbeitersettingsDB, StandortDB, UrlaubDB, GraphService, AppeinstellungenDB, Debug) {
    this.platform = platform;
    this.Pool = Pool;
    this.Menuservice = Menuservice;
    this.AuthService = AuthService;
    this.changeDetector = changeDetector;
    this.Basics = Basics;
    this.Tools = Tools;
    this.Const = Const;
    this.authService = authService;
    this.msalBroadcastService = msalBroadcastService;
    this.MitarbeiterDB = MitarbeiterDB;
    this.MitarbeitersettingsDB = MitarbeitersettingsDB;
    this.StandortDB = StandortDB;
    this.UrlaubDB = UrlaubDB;
    this.GraphService = GraphService;
    this.AppeinstellungenDB = AppeinstellungenDB;
    this.Debug = Debug;
    try {
      this.Zoomfaktor = 100;
      this.Settingssubscription = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'App Component', 'constructor', this.Debug.Typen.Component);
    }
  }
  ngOnDestroy() {
    try {
      this.Destroying.next(undefined);
      this.Destroying.complete();
      this.StandortDB.FinishService();
      this.MitarbeiterDB.FinishService();
      this.Settingssubscription.unsubscribe();
      this.Settingssubscription = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'App Component', 'OnDestroy', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {
      this.Settingssubscription = this.Pool.MitarbeitersettingsChanged.subscribe(() => {
        this.Zoomfaktor = this.Pool.Mitarbeitersettings.Zoomfaktor;
      });
      if (this.AuthService.SecurityEnabled) {
        this.authService.initialize().subscribe(() => {
          this.msalBroadcastService.inProgress$.pipe((0, rxjs_1.filter)(status_a => {
            this.Debug.ShowMessage('Interaction Status: ' + status_a, 'App Component', 'StartApp', this.Debug.Typen.Component);
            return status_a === msal_browser_1.InteractionStatus.None;
          }), (0, rxjs_1.takeUntil)(this.Destroying)).subscribe(status_b => {
            this.Debug.ShowMessage('Interaction Status: ' + status_b, 'App Component', 'StartApp', this.Debug.Typen.Component);
            this.AuthService.SetShowLoginStatus();
          });
          this.AuthService.LoginSuccessEvent.subscribe(() => {
            this.Debug.ShowMessage('LoginSuccessEvent -> Start App', 'App Component', 'StartApp', this.Debug.Typen.Component);
            this.StartApp();
          });
          this.StartApp();
        });
      } else {
        this.StartApp();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'App Component', 'OnInit', this.Debug.Typen.Component);
    }
  }
  StartApp() {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        let Mitarbeiter;
        let Page;
        _this.Debug.ShowMessage('Start App', 'App Component', 'StartApp', _this.Debug.Typen.Component);
        yield _this.platform.ready();
        yield _this.AuthService.SetActiveUser();
        _this.Basics.Contentbreite = _this.platform.width();
        _this.Basics.Contenthoehe = _this.platform.height();
        if (_this.AuthService.ActiveUser !== null) {
          // Benutzer ist angemeldet
          _this.AuthService.SetShowLoginStatus();
          _this.Debug.ShowMessage('Benutzer ist angemeldet: ' + _this.AuthService.ActiveUser.username, 'App Component', 'StartApp', _this.Debug.Typen.Component);
          _this.Pool.ShowProgress = true;
          _this.Pool.MaxProgressValue = 8;
          _this.Pool.CurrentProgressValue = 0;
          try {
            if (_this.AuthService.SecurityEnabled === true) {
              _this.Pool.ProgressMessage = 'Lade eigene Daten';
              yield _this.GraphService.GetOwnUserinfo();
              _this.Pool.CurrentProgressValue++;
            }
            if (_this.AuthService.SecurityEnabled === true) {
              _this.Pool.ProgressMessage = 'Lade eigens Bild';
              yield _this.GraphService.GetOwnUserimage();
              _this.Pool.CurrentProgressValue++;
            }
            _this.Pool.ProgressMessage = 'Lade Change Log';
            yield _this.Pool.ReadChangelogliste(); // 1
            _this.Pool.CurrentProgressValue++;
            _this.Pool.ProgressMessage = 'Lade Standortliste';
            yield _this.Pool.ReadStandorteliste(); // 2
            _this.Pool.CurrentProgressValue++;
            _this.Pool.ProgressMessage = 'Lade aktuelle Mitarbeiterliste';
            yield _this.Pool.ReadMitarbeiterliste(); // 3
            _this.Pool.CurrentProgressValue++;
            _this.Pool.ProgressMessage = 'Lade Positionenliste';
            yield _this.Pool.ReadMitarbeiterpositionenliste(); // 4
            _this.Pool.CurrentProgressValue++;
            _this.Pool.ProgressMessage = 'Aktuallisiere Mitarbeiterliste';
            let Liste = yield _this.GraphService.GetAllUsers(); // 5
            _this.Pool.CurrentProgressValue++;
            _this.Pool.ProgressMessage = 'Lade Bundesländer';
            yield _this.UrlaubDB.ReadRegionen('DE'); // 6
            _this.Pool.CurrentProgressValue++;
            _this.Pool.ProgressMessage = 'Lade Ferien Deutschland';
            yield _this.UrlaubDB.ReadFerien('DE'); // 7
            _this.Pool.CurrentProgressValue++;
            _this.Pool.ProgressMessage = 'Lade Ferien Bulgarien';
            yield _this.UrlaubDB.ReadFerien('BG'); // 8
            _this.Pool.CurrentProgressValue++;
            _this.Pool.ProgressMessage = 'Lade Appp Einstellungen';
            yield _this.AppeinstellungenDB.ReadAppeinstellungen(); // 9
            for (let User of Liste) {
              Mitarbeiter = lodash.find(_this.Pool.Mitarbeiterliste, currentmitarbeiter => {
                return currentmitarbeiter.UserID === User.id;
              });
              if (lodash.isUndefined(Mitarbeiter)) {
                console.log('Mitarbeiter wurde nicht gefunden:');
                console.log(User);
                if (User.mail.toLowerCase().indexOf('admin') === -1) {
                  Mitarbeiter = _this.MitarbeiterDB.ConvertGraphuserToMitarbeiter(User);
                  console.log('Neuer Mitrabeiter:');
                  console.log(Mitarbeiter);
                  yield _this.MitarbeiterDB.AddMitarbeiter(Mitarbeiter);
                }
              }
            }
          } catch (error) {
            console.log('Error happend heer...');
          }
          if (_this.MitarbeiterDB.CheckMitarbeiterExists(_this.GraphService.Graphuser.mail) === false) {
            // Mitarbeiter neu Anlegen
            _this.Debug.ShowMessage('Mitarbeiter neu eingetragen.', 'App Component', 'StartApp', _this.Debug.Typen.Component);
            Mitarbeiter = _this.MitarbeiterDB.ConvertGraphuserToMitarbeiter(_this.GraphService.Graphuser);
            if (Mitarbeiter.Email !== null) Mitarbeiter = yield _this.MitarbeiterDB.AddMitarbeiter(Mitarbeiter);
          } else {
            _this.Debug.ShowMessage('Mitarbeiter ist bereits eingetragen.', 'App Component', 'StartApp', _this.Debug.Typen.Component);
            Mitarbeiter = lodash.find(_this.Pool.Mitarbeiterliste, {
              UserID: _this.GraphService.Graphuser.id
            });
          }
          // Mitarbeiter ist bereits registriert
          _this.Pool.Mitarbeiterdaten = _this.Pool.InitMitarbeiter(Mitarbeiter); // fehlende Mitarbeiterdaten initialisieren
          _this.Pool.CheckMitarbeiterdaten();
          _this.UrlaubDB.SetMitarbeiter(_this.Pool.Mitarbeiterdaten);
          _this.Pool.ProgressMessage = 'Lade Feiertage Deutschland';
          yield _this.UrlaubDB.ReadFeiertage('DE');
          _this.Pool.CurrentProgressValue++;
          _this.Pool.ProgressMessage = 'Lade Feiertage Bulgarien';
          yield _this.UrlaubDB.ReadFeiertage('BG');
          _this.Pool.CurrentProgressValue++;
          _this.Pool.ProgressMessage = 'Lade Einstellungen';
          yield _this.Pool.ReadSettingsliste();
          _this.Pool.CurrentProgressValue++;
          _this.Pool.ProgressMessage = 'Syncronisiere Gesamtprojektliste';
          _this.Pool.Mitarbeitersettings = _this.Pool.InitMitarbeitersettings(); // fehlende Settingseintraege initialisieren
          _this.Pool.ProgressMessage = 'Aktualisiere Mitarbeitereinstellungen';
          yield _this.MitarbeitersettingsDB.SaveMitarbeitersettings();
          _this.Pool.CurrentProgressValue++;
          _this.Zoomfaktor = _this.Pool.Mitarbeitersettings.Zoomfaktor;
          _this.Pool.MitarbeitersettingsChanged.emit();
          if (_this.Pool.Mitarbeiterdaten.SettingsID === null) {
            _this.Pool.Mitarbeiterdaten.SettingsID = _this.Pool.Mitarbeitersettings._id;
            yield _this.MitarbeiterDB.UpdateMitarbeiter(_this.Pool.Mitarbeiterdaten);
          }
          _this.MitarbeiterDB.InitService();
          _this.StandortDB.InitService();
          _this.Pool.ShowProgress = false;
          if (_this.Pool.Mitarbeiterdaten.Planeradministrator === true) {
            Page = _this.Pool.Appeinstellungen.AdminStartseite;
          } else {
            if (_this.Pool.Appeinstellungen.Wartungsmodus === true) Page = _this.Const.Pages.WartungPage;else Page = _this.Const.Pages.UrlaubPlanungPage;
          }
          _this.Pool.ProjektdatenLoaded = true;
          _this.SetProjekteMenuebereich(Page);
          _this.Tools.SetRootPage(Page).then(() => {
            _this.Pool.LoadingAllDataFinished.emit();
          });
        } else {
          // Benutzer ist nicht angemeldet -> der Login wird angezeigt
          _this.AuthService.SetShowLoginStatus();
          _this.Debug.ShowMessage('Benutzer ist nicht angemeldet', 'App Component', 'StartApp', _this.Debug.Typen.Component);
        }
      } catch (error) {
        _this.Debug.ShowErrorMessage(error.message, 'App Component', 'StartApp', _this.Debug.Typen.Component);
      }
    })();
  }
  SetProjekteMenuebereich(Page) {
    try {
      switch (Page) {
        case this.Const.Pages.HomePage:
          this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Home;
          this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Aufgabenliste;
          break;
        case this.Const.Pages.EmaillistePage:
          this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Email;
          break;
        case this.Const.Pages.UrlaubPlanungPage:
          this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Urlaubsplanung;
          this.Menuservice.UrlaubMenuebereich = this.Menuservice.UrlaubMenuebereiche.Planung;
          break;
        case this.Const.Pages.UrlaubUebersichtPage:
          this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Urlaubsplanung;
          this.Menuservice.UrlaubMenuebereich = this.Menuservice.UrlaubMenuebereiche.Uebersicht;
          break;
        case this.Const.Pages.UrlaubsgesamtuebersichtPage:
          this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Urlaubsplanung;
          this.Menuservice.UrlaubMenuebereich = this.Menuservice.UrlaubMenuebereiche.Gesamtplanung;
          break;
        case this.Const.Pages.UrlaubFreigabenPage:
          this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Urlaubsplanung;
          this.Menuservice.UrlaubMenuebereich = this.Menuservice.UrlaubMenuebereiche.Freigaben;
          break;
        case this.Const.Pages.UrlaubEinstellungenPage:
          this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Urlaubsplanung;
          this.Menuservice.UrlaubMenuebereich = this.Menuservice.UrlaubMenuebereiche.Einstellungen;
          break;
        default:
          this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Projekte;
          break;
      }
      switch (Page) {
        case this.Const.Pages.PjAufgabenlistePage:
          this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Aufgabenliste;
          break;
        case this.Const.Pages.PjProtokolleListePage:
          this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Protokolle;
          break;
        case this.Const.Pages.PjBaustelleLoplistePage:
          this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.LOPListe;
          break;
        case this.Const.Pages.PjBaustelleTagebuchlistePage:
          this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Bautagebuch;
          break;
        case this.Const.Pages.PjFestlegungslistePage:
          this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Festlegungen;
          break;
        case this.Const.Pages.PjPlanungsmatrixPage:
          this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Planungsmatrix;
          break;
        case this.Const.Pages.PjSimontabellelistePage:
          this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Simontabelle;
          break;
        case this.Const.Pages.PjNotizenListePage:
          this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Notizen;
          break;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'App Component', 'function', this.Debug.Typen.Component);
    }
  }
  ngAfterContentChecked() {
    this.changeDetector.detectChanges();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'App Component', 'ngAfterContentChecked', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: angular_1.Platform
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: menue_service_1.MenueService
  }, {
    type: database_authentication_service_1.DatabaseAuthenticationService
  }, {
    type: core_1.ChangeDetectorRef
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: msal_angular_1.MsalService
  }, {
    type: msal_angular_1.MsalBroadcastService
  }, {
    type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
  }, {
    type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: graph_1.Graphservice
  }, {
    type: database_appeinstellungen_service_1.DatabaseAppeinstellungenService
  }, {
    type: debug_1.DebugProvider
  }];
};
exports.AppComponent = AppComponent;
exports.AppComponent = AppComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'app-root',
  template: __webpack_require__(/*! ./app.component.html?ngResource */ 10440),
  styles: [__webpack_require__(/*! ./app.component.scss?ngResource */ 25004)]
})], AppComponent);

/***/ }),

/***/ 5204:
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AppModule = exports.MSALInstanceFactory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const platform_browser_1 = __webpack_require__(/*! @angular/platform-browser */ 50168);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const app_component_1 = __webpack_require__(/*! ./app.component */ 86108);
const app_routing_module_1 = __webpack_require__(/*! ./app-routing.module */ 80484);
const tools_1 = __webpack_require__(/*! ./services/tools/tools */ 19668);
const debug_1 = __webpack_require__(/*! ./services/debug/debug */ 34388);
const const_1 = __webpack_require__(/*! ./services/const/const */ 29743);
const basics_1 = __webpack_require__(/*! ./services/basics/basics */ 14652);
const loadinganimation_1 = __webpack_require__(/*! ./services/loadinganimation/loadinganimation */ 33940);
const menue_service_1 = __webpack_require__(/*! ./services/menue/menue.service */ 59460);
const display_service_1 = __webpack_require__(/*! ./services/diplay/display.service */ 21052);
const animations_1 = __webpack_require__(/*! @angular/platform-browser/animations */ 381);
const http_1 = __webpack_require__(/*! @angular/common/http */ 33712);
const msal_angular_1 = __webpack_require__(/*! @azure/msal-angular */ 38460);
const msal_browser_1 = __webpack_require__(/*! @azure/msal-browser */ 10892);
const environment_1 = __webpack_require__(/*! ../environments/environment */ 36716);
const angular_fontawesome_1 = __webpack_require__(/*! @fortawesome/angular-fontawesome */ 34292);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const appurl = environment_1.environment.production === false ? 'http://localhost:4200' : 'https://polite-cliff-084832d03.4.azurestaticapps.net';
// !! Server URL auch in Pool service anpassen
const serverurl = environment_1.environment.production === false && environment_1.environment.useonlinedb === false ? 'http://localhost:8080' : 'bae-urlaubsplaner-server.azurewebsites.net';
const dockerurl = environment_1.environment.production === false && environment_1.environment.useonlinedb === false ? 'http://localhost:80' : 'bae-urlaubsplaner-docker.azurewebsites.net';
const MandantenID = '8870822d-b5ee-4a63-b4ea-7147f0ee753d';
const clientappregistration = 'e85e5489-e9fd-4d10-b6aa-37be3ce084b6'; // Login funktioniert mit peter.hornburger
const clientserverregistration = 'ca7568f7-4672-4348-843b-b80b210d692f';
const clientdockerregistration = '0caad6ac-8087-46ce-99ca-690c083121a8';
// GITHUB Account
// Benutzername: peter.hornburger@b-a-e.eu
// Passwort:     Spekyland4##
// Azure Account
// Benutzername: urlaubsplaner@b-a-e.eu
// Passwort:     Q@699025237410ut
// AZURE MOngo DB
// Collection  Indexes
// projekte    Projektname
// mitarbeiter Name
/*

 Speichern der aktuellen Aufgabe bei der Ansicht alle ist falsch. Current Projekt muss geändert werden.

Benutzer ist nicht angemeldet -> Meldung suchen. Im BAE muss ich mich jeden Tag neu anmedlen bzw. LOGIN wird nicht gezeigt.

Bautagebuch Editor ist zu groß. Automatische Höhe anwenden.

Terminauswahl Kalenderfarben anpassen.


 */
const isIE = window.navigator.userAgent.indexOf("MSIE ") > -1 || window.navigator.userAgent.indexOf("Trident/") > -1;
const loggerCallback = (logLevel, message) => {
  console.log(message);
};
const MSALInstanceFactory = () => {
  return new msal_browser_1.PublicClientApplication({
    auth: {
      clientId: clientappregistration,
      authority: 'https://login.microsoftonline.com/' + MandantenID,
      redirectUri: appurl
    },
    cache: {
      cacheLocation: msal_browser_1.BrowserCacheLocation.LocalStorage,
      storeAuthStateInCookie: isIE // set to true for IE 11
    },
    system: {
      loggerOptions: {
        loggerCallback,
        logLevel: msal_browser_1.LogLevel.Error,
        piiLoggingEnabled: false
      }
    }
  });
};
exports.MSALInstanceFactory = MSALInstanceFactory;
const MSALInterceptorConfigFactory = () => {
  const protectedResourceMap = new Map();
  protectedResourceMap.set('https://graph.microsoft.com/v1.0/me', ['user.read']);
  protectedResourceMap.set(dockerurl, ['api://' + clientdockerregistration + '/database_access']);
  return {
    interactionType: msal_browser_1.InteractionType.Redirect,
    protectedResourceMap
  };
};
/*
        'Calendars.Read',
        'Calendars.Read.Shared',
        'Calendars.ReadBasic',
        'Calendars.ReadWrite',
        'Calendars.ReadWrite.Shared',
        'Contacts.ReadWrite',
        'Mail.Read',
        'Files.Read',
        'Sites.ReadWrite.All',
        'Mail.ReadBasic',
        'Mail.ReadWrite',
        'Mail.Send',
        'MailboxSettings.Read',
        'MailboxSettings.ReadWrite',
        'User.ReadBasic.All',
 */
const MSALGuardConfigFactory = () => {
  return {
    interactionType: msal_browser_1.InteractionType.Redirect,
    authRequest: {
      scopes: ['User.Read', 'offline_access', 'openid', 'profile', 'email', 'Mail.Send', 'User.ReadBasic.All'] // Alle scopes für Tokenabrufe (Auth Service Funktion: RequestToken) müssen hier eingetragen werden
    }
  };
};
// originalKeywordKind -> identifierToKeywordKind(identifier)
let AppModule = class AppModule {};
exports.AppModule = AppModule;
exports.AppModule = AppModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [app_component_1.AppComponent],
  imports: [platform_browser_1.BrowserModule, angular_1.IonicModule.forRoot({
    innerHTMLTemplatesEnabled: true
  }), app_routing_module_1.AppRoutingModule, animations_1.BrowserAnimationsModule, http_1.HttpClientModule, msal_angular_1.MsalModule, angular_fontawesome_1.FontAwesomeModule],
  providers: [{
    provide: http_1.HTTP_INTERCEPTORS,
    useClass: msal_angular_1.MsalInterceptor,
    multi: true
  }, {
    provide: msal_angular_1.MSAL_INSTANCE,
    useFactory: exports.MSALInstanceFactory
  }, {
    provide: msal_angular_1.MSAL_GUARD_CONFIG,
    useFactory: MSALGuardConfigFactory
  }, {
    provide: msal_angular_1.MSAL_INTERCEPTOR_CONFIG,
    useFactory: MSALInterceptorConfigFactory
  }, {
    provide: common_1.LocationStrategy,
    useClass: common_1.HashLocationStrategy
  }, msal_angular_1.MsalService, msal_angular_1.MsalGuard, msal_angular_1.MsalBroadcastService, tools_1.ToolsProvider, debug_1.DebugProvider, const_1.ConstProvider, basics_1.BasicsProvider, menue_service_1.MenueService, loadinganimation_1.LoadingAnimationService, display_service_1.DisplayService],
  bootstrap: [app_component_1.AppComponent, msal_angular_1.MsalRedirectComponent],
  exports: []
})], AppModule);

/***/ }),

/***/ 64168:
/*!**************************************************************************************!*\
  !*** ./src/app/components-page/fi-changelog-editor/fi-changelog-editor.component.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FiChangelogEditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 21052);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 89984));
const database_changelog_service_1 = __webpack_require__(/*! ../../services/database-changelog/database-changelog.service */ 51708);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
let FiChangelogEditorComponent = class FiChangelogEditorComponent {
  Debug;
  Displayservice;
  Const;
  Tools;
  DB;
  Valid;
  CanDelete;
  JoiShema;
  ValidChange = new core_1.EventEmitter();
  CancelClickedEvent = new core_1.EventEmitter();
  OkClickedEvent = new core_1.EventEmitter();
  DeleteClickedEvent = new core_1.EventEmitter();
  Titel;
  Iconname;
  Dialogbreite;
  Dialoghoehe;
  PositionY;
  ZIndex;
  constructor(Debug, Displayservice, Const, Tools, DB) {
    this.Debug = Debug;
    this.Displayservice = Displayservice;
    this.Const = Const;
    this.Tools = Tools;
    this.DB = DB;
    try {
      this.Valid = true;
      this.Valid = true;
      this.Titel = 'Change Log bearbeiten';
      this.Iconname = 'location-outline';
      this.Dialogbreite = 400;
      this.Dialoghoehe = 300;
      this.PositionY = 100;
      this.ZIndex = 2000;
      this.CanDelete = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'constructor', this.Debug.Typen.Component);
    }
  }
  ngOnDestroy() {
    try {
      this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Changelogeditor);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'OnDestroy', this.Debug.Typen.Component);
    }
  }
  SetupValidation() {
    try {
      this.JoiShema = Joi.object({
        Beschreibung: Joi.string().required().max(100)
      }).options({
        stripUnknown: true
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'SetupValidation', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {
      this.SetupValidation();
      this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Changelogeditor, this.ZIndex);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'OnInit', this.Debug.Typen.Component);
    }
  }
  ValidateInput() {
    try {
      let Result = this.JoiShema.validate(this.DB.CurrentChangelog);
      if (Result.error) this.Valid = false;else this.Valid = true;
      this.ValidChange.emit(this.Valid);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'ValidateInput', this.Debug.Typen.Component);
    }
  }
  TextChanged(event) {
    try {
      this.ValidateInput();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'TextChanged', this.Debug.Typen.Component);
    }
  }
  ngAfterViewInit() {
    try {
      this.ValidateInput();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'AfterViewInit', this.Debug.Typen.Component);
    }
  }
  CancelButtonClicked() {
    // this.ResetEditor();
    this.CancelClickedEvent.emit();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
    }
  }
  DeleteButtonClicked() {
    try {
      if (this.CanDelete) {
        this.DB.DeleteChangelog().then(() => {
          this.DeleteClickedEvent.emit();
        }).catch(exception => {
          this.Tools.ShowHinweisDialog(exception.error.message);
        });
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'DeleteButtonClicked', this.Debug.Typen.Component);
    }
  }
  OkButtonClicked() {
    try {
      debugger;
      if (this.DB.CurrentChangelog._id === null) {
        this.DB.AddChangelog().then(result => {
          this.OkClickedEvent.emit();
        }).catch(error => {
          this.Tools.ShowHinweisDialog(error.error);
        });
      } else {
        this.DB.UpdateChangelog().then(() => {
          this.OkClickedEvent.emit();
        }).catch(exception => {
          this.Tools.ShowHinweisDialog(exception.error.message);
        });
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'OkButtonClicked', this.Debug.Typen.Component);
    }
  }
  ContentClicked(event) {
    event.preventDefault();
    event.stopPropagation();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'ContentClicked', this.Debug.Typen.Component);
    }
  }
  CanDeleteCheckedChanged(event) {
    try {
      this.CanDelete = event.status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Changelog Editor', 'CanDeleteCheckedChanged', this.Debug.Typen.Component);
    }
  }
  GetDatum() {
    try {
      let Datum = (0, moment_1.default)(this.DB.CurrentChangelog.Zeitstempel);
      return Datum.format('DD.MM.YYYY');
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Changelog Editor', 'GetDatum', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: display_service_1.DisplayService
  }, {
    type: const_1.ConstProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: database_changelog_service_1.DatabaseChangelogService
  }];
  static propDecorators = {
    ValidChange: [{
      type: core_1.Output
    }],
    CancelClickedEvent: [{
      type: core_1.Output
    }],
    OkClickedEvent: [{
      type: core_1.Output
    }],
    DeleteClickedEvent: [{
      type: core_1.Output
    }],
    Titel: [{
      type: core_1.Input
    }],
    Iconname: [{
      type: core_1.Input
    }],
    Dialogbreite: [{
      type: core_1.Input
    }],
    Dialoghoehe: [{
      type: core_1.Input
    }],
    PositionY: [{
      type: core_1.Input
    }],
    ZIndex: [{
      type: core_1.Input
    }]
  };
};
exports.FiChangelogEditorComponent = FiChangelogEditorComponent;
exports.FiChangelogEditorComponent = FiChangelogEditorComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'fi-changelog-editor',
  template: __webpack_require__(/*! ./fi-changelog-editor.component.html?ngResource */ 18144),
  styles: [__webpack_require__(/*! ./fi-changelog-editor.component.scss?ngResource */ 16789)]
})], FiChangelogEditorComponent);

/***/ }),

/***/ 12095:
/*!***********************************************************************************!*\
  !*** ./src/app/components-page/fi-changelog-editor/fi-changelog-editor.module.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FiChangelogEditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const fi_changelog_editor_component_1 = __webpack_require__(/*! ./fi-changelog-editor.component */ 64168);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 33780);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 61540);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 6512);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
let FiChangelogEditorModule = class FiChangelogEditorModule {};
exports.FiChangelogEditorModule = FiChangelogEditorModule;
exports.FiChangelogEditorModule = FiChangelogEditorModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [fi_changelog_editor_component_1.FiChangelogEditorComponent],
  exports: [fi_changelog_editor_component_1.FiChangelogEditorComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule, input_clone_module_1.InputCloneModule, input_clone_keeper_module_1.InputCloneKeeperModule, abstand_element_fixed_module_1.AbstandElementFixedModule, page_header_module_1.PageHeaderModule, checkbox_clon_module_1.CheckboxClonModule, page_footer_module_1.PageFooterModule],
  providers: []
})], FiChangelogEditorModule);

/***/ }),

/***/ 80887:
/*!********************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.component.ts ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FiMitarbeiterAuswahlComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 21052);
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
let FiMitarbeiterAuswahlComponent = class FiMitarbeiterAuswahlComponent {
  Basics;
  Debug;
  Tools;
  DBStandort;
  Const;
  DBUrlaub;
  Displayservice;
  Pool;
  Alphabetcomponent;
  Titel;
  Iconname;
  AuswahlIDliste;
  Multiselect;
  Dialogbreite;
  ZIndex;
  OnlyProjektmitarbeiter;
  BlockCurrentMitarbeiter;
  OkClickedEvent = new core_1.EventEmitter();
  CancelClickedEvent = new core_1.EventEmitter();
  StandortfilterClickedEvent = new core_1.EventEmitter();
  Anzeigeliste;
  Mitarbeiterbuchstabenliste;
  Standardalphabet;
  Mitarbeiteralphabet;
  Mitarbeiteralphabetauswahl;
  Alphapetbreite;
  Lastletter;
  Mitarbeiterfiltertext;
  Mitarbeiterliste;
  FilterSubscription;
  PositionY;
  AuswahlIDListeSicherung;
  constructor(Basics, Debug, Tools, DBStandort, Const, DBUrlaub, Displayservice, Pool) {
    this.Basics = Basics;
    this.Debug = Debug;
    this.Tools = Tools;
    this.DBStandort = DBStandort;
    this.Const = Const;
    this.DBUrlaub = DBUrlaub;
    this.Displayservice = Displayservice;
    this.Pool = Pool;
    try {
      this.AuswahlIDliste = [];
      this.Mitarbeiterbuchstabenliste = [];
      this.Standardalphabet = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
      this.Mitarbeiteralphabetauswahl = 'Alle';
      this.Mitarbeiteralphabet = this.Standardalphabet;
      this.Alphapetbreite = 44;
      this.Mitarbeiterfiltertext = '';
      this.Multiselect = false;
      this.Titel = this.Const.NONE;
      this.Iconname = 'people-outline';
      this.Dialogbreite = 400;
      this.PositionY = 100;
      this.ZIndex = 3000;
      this.Mitarbeiterliste = [];
      this.FilterSubscription = null;
      this.OnlyProjektmitarbeiter = true;
      this.BlockCurrentMitarbeiter = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'constructor', this.Debug.Typen.Component);
    }
  }
  ngOnDestroy() {
    try {
      this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Mitarbeiterauswahl);
      this.FilterSubscription.unsubscribe();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'OnDestroy', this.Debug.Typen.Component);
    }
  }
  InitTitel() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error, 'file', 'function', this.Debug.Typen.Page);
    }
  }
  ngOnInit() {
    try {
      this.AuswahlIDListeSicherung = lodash.cloneDeep(this.AuswahlIDliste);
      if (this.Alphabetcomponent) this.Alphabetcomponent.InitScreen();
      this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Mitarbeiterauswahl, this.ZIndex);
      this.FilterSubscription = this.DBStandort.StandortfilterChanged.subscribe(() => {
        this.PrepareDaten();
      });
      this.PrepareDaten();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'function', this.Debug.Typen.Component);
    }
  }
  PrepareDaten() {
    try {
      let Liste;
      let Merker;
      let Buchstabe;
      let Laenge;
      let TeilA;
      let TeilB;
      let TeilC;
      let Teillaenge;
      let PosA;
      let Solltext;
      let Suchtext;
      let Mitarbeiter;
      if (this.Pool.Mitarbeiterliste !== null) {
        this.Lastletter = '';
        this.Mitarbeiterliste = [];
        // Nach Namen sortieren
        if (this.OnlyProjektmitarbeiter) {
          /*
                     if(this.DB.CurrentProjekt !== null) {
                       for(let id of this.DB.CurrentProjekt.MitarbeiterIDListe) {
                         Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {_id: id});
                         if(!lodash.isUndefined(Mitarbeiter)) this.Mitarbeiterliste.push(Mitarbeiter);
            }
          }
                      */
        } else {
          this.Mitarbeiterliste = lodash.cloneDeep(this.Pool.Mitarbeiterliste);
        }
        Liste = lodash.cloneDeep(this.Mitarbeiterliste);
        Liste = lodash.filter(Liste, currentmit => {
          return currentmit.Archiviert === false;
        });
        Liste.sort((a, b) => {
          if (a.Name < b.Name) return -1;
          if (a.Name > b.Name) return 1;
          return 0;
        });
        if (this.BlockCurrentMitarbeiter && this.DBUrlaub.CurrentMitarbeiter !== null) {
          Liste = lodash.filter(Liste, currentmit => {
            return currentmit._id !== this.DBUrlaub.CurrentMitarbeiter._id;
          });
        }
        // Standort Filter anwenden
        if (this.DBStandort.CurrentStandortfilter !== null) {
          Merker = lodash.cloneDeep(Liste);
          Liste = [];
          for (let Eintrag of Merker) {
            if (Eintrag.StandortID === this.DBStandort.CurrentStandortfilter._id) Liste.push(Eintrag);
          }
        }
        // Mitarbeiteralphabetauswahl Buchstaben festlegen
        if (Liste.length > 6) {
          this.Mitarbeiteralphabet = ['Alle'];
          for (let Eintrag of Liste) {
            Buchstabe = Eintrag.Name.substring(0, 1).toUpperCase();
            if (this.Mitarbeiteralphabet.indexOf(Buchstabe) === -1) this.Mitarbeiteralphabet.push(Buchstabe);
          }
        } else {
          this.Mitarbeiteralphabet = this.Standardalphabet;
        }
        // Alphabetfilter anwenden
        if (this.Mitarbeiteralphabetauswahl !== 'Alle') {
          Merker = lodash.cloneDeep(Liste);
          Liste = [];
          for (let Eintrag of Merker) {
            Buchstabe = Eintrag.Name.substring(0, 1).toUpperCase();
            Buchstabe = Buchstabe === 'Ä' ? 'A' : Buchstabe;
            Buchstabe = Buchstabe === 'Ö' ? 'O' : Buchstabe;
            Buchstabe = Buchstabe === 'Ü' ? 'U' : Buchstabe;
            if (this.Mitarbeiteralphabetauswahl === Buchstabe) Liste.push(Eintrag);
          }
        }
        // Suche Mitarbeiterfilter anwenden
        if (this.Mitarbeiterfiltertext !== '') {
          Merker = lodash.cloneDeep(Liste);
          Liste = [];
          for (let Eintrag of Merker) {
            Solltext = this.Mitarbeiterfiltertext.toLowerCase();
            Suchtext = Eintrag.Name.toLowerCase();
            PosA = Suchtext.indexOf(Solltext);
            if (PosA !== -1) {
              Laenge = Eintrag.Name.length;
              Teillaenge = Solltext.length;
              TeilA = Eintrag.Name.substr(0, PosA);
              TeilB = Eintrag.Name.substr(PosA, Teillaenge);
              Teillaenge = Laenge - Teillaenge - PosA;
              TeilC = Eintrag.Name.substr(Laenge - Teillaenge, Teillaenge);
              Eintrag.Filtered = true;
              Eintrag.Text_A = TeilA;
              Eintrag.Text_B = TeilB;
              Eintrag.Text_C = TeilC;
              Liste.push(Eintrag);
            }
          }
        }
        // Buchstabenliste festlegen
        this.Mitarbeiterbuchstabenliste = [];
        for (let Eintrag of Liste) {
          this.Mitarbeiterbuchstabenliste.push(this.GetMitarbeiterAlphabetbuchstabe(Eintrag));
        }
        // Alle Auswahlen entfernen
        for (Mitarbeiter of Liste) {
          Mitarbeiter.Selected = false;
        }
        // Auswahl festlegen
        for (let MitarbeiterID of this.AuswahlIDliste) {
          Mitarbeiter = lodash.find(Liste, {
            _id: MitarbeiterID
          });
          if (!lodash.isUndefined(Mitarbeiter)) Mitarbeiter.Selected = true;
        }
        this.Anzeigeliste = lodash.cloneDeep(Liste);
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'PrepareDaten', this.Debug.Typen.Component);
    }
  }
  GetMitarbeiterAlphabetbuchstabe(value) {
    try {
      let Buchstabe = value.Name.substring(0, 1).toUpperCase();
      if (Buchstabe !== this.Lastletter) {
        this.Lastletter = Buchstabe;
        return Buchstabe;
      } else {
        return '';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'GetMitarbeiterAlphabetbuchstabe', this.Debug.Typen.Component);
    }
  }
  MitrabeiterButtonClicked(Mitarbeiter) {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'MitrabeiterButtonClicked', this.Debug.Typen.Component);
    }
  }
  AlphabetClicked(buchstabe) {
    try {
      this.Mitarbeiterfiltertext = '';
      this.Mitarbeiteralphabetauswahl = buchstabe;
      this.PrepareDaten();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'AlphabetClicked', this.Debug.Typen.Component);
    }
  }
  CheckedChanged(result) {
    try {
      let Mitarbeiter;
      if (this.Multiselect === false) {
        for (Mitarbeiter of this.Mitarbeiterliste) {
          Mitarbeiter.Selected = false;
        }
        for (Mitarbeiter of this.Anzeigeliste) {
          Mitarbeiter.Selected = false;
        }
      }
      // Anpassung in der Gesamtliste
      Mitarbeiter = lodash.find(this.Mitarbeiterliste, {
        _id: this.Anzeigeliste[result.index]._id
      });
      if (!lodash.isUndefined(Mitarbeiter)) {
        Mitarbeiter.Selected = result.status;
        if (result.status === true) {
          this.AuswahlIDliste.push(Mitarbeiter._id);
        } else {
          this.AuswahlIDliste = lodash.filter(this.AuswahlIDliste, id => {
            return id !== Mitarbeiter._id;
          });
        }
      }
      // Anpassung in der Anzeigeliste
      this.Anzeigeliste[result.index].Selected = result.status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'CheckedChanged', this.Debug.Typen.Component);
    }
  }
  CancelButtonClicked() {
    this.CancelClickedEvent.emit();
    try {
      this.AuswahlIDliste = lodash.cloneDeep(this.AuswahlIDListeSicherung);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'CancelButtonClicked', this.Debug.Typen.Component);
    }
  }
  OkButtonClicked() {
    /*
    let IDListe: string[] = [];
         for(let Mitarbeiter of this.Anzeigeliste) {
           if(!lodash.isUndefined(Mitarbeiter.Selected) && Mitarbeiter.Selected === true) {
             this.A.push(Mitarbeiter._id);
      }
    }
          */
    this.OkClickedEvent.emit(this.AuswahlIDliste);
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'OkButtonClicked', this.Debug.Typen.Component);
    }
  }
  ContentClicked(event) {
    event.preventDefault();
    event.stopPropagation();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'ContentClicked', this.Debug.Typen.Component);
    }
  }
  StandortfilterButtonClicked() {
    try {
      this.StandortfilterClickedEvent.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'StandortfilterButtonClicked', this.Debug.Typen.Component);
    }
  }
  GetStandortfiller() {
    try {
      if (this.DBStandort.CurrentStandortfilter === null) return 'kein Standortfilter';else return this.DBStandort.CurrentStandortfilter.Kuerzel + ' / ' + this.DBStandort.CurrentStandortfilter.Standort;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Auswahl', 'GetStandortfiller', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: basics_1.BasicsProvider
  }, {
    type: debug_1.DebugProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: display_service_1.DisplayService
  }, {
    type: database_pool_service_1.DatabasePoolService
  }];
  static propDecorators = {
    Alphabetcomponent: [{
      type: core_1.ViewChild,
      args: ['SmallAlphabet', {
        static: true
      }]
    }],
    Titel: [{
      type: core_1.Input
    }],
    Iconname: [{
      type: core_1.Input
    }],
    AuswahlIDliste: [{
      type: core_1.Input
    }],
    Multiselect: [{
      type: core_1.Input
    }],
    Dialogbreite: [{
      type: core_1.Input
    }],
    ZIndex: [{
      type: core_1.Input
    }],
    OnlyProjektmitarbeiter: [{
      type: core_1.Input
    }],
    BlockCurrentMitarbeiter: [{
      type: core_1.Input
    }],
    OkClickedEvent: [{
      type: core_1.Output
    }],
    CancelClickedEvent: [{
      type: core_1.Output
    }],
    StandortfilterClickedEvent: [{
      type: core_1.Output
    }]
  };
};
exports.FiMitarbeiterAuswahlComponent = FiMitarbeiterAuswahlComponent;
exports.FiMitarbeiterAuswahlComponent = FiMitarbeiterAuswahlComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'fi-mitarbeiter-auswahl',
  template: __webpack_require__(/*! ./fi-mitarbeiter-auswahl.component.html?ngResource */ 38691),
  styles: [__webpack_require__(/*! ./fi-mitarbeiter-auswahl.component.scss?ngResource */ 34776)]
})], FiMitarbeiterAuswahlComponent);

/***/ }),

/***/ 26668:
/*!*****************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.module.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FiMitarbeiterAuswahlModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 33780);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 61540);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 6512);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const fi_mitarbeiter_auswahl_component_1 = __webpack_require__(/*! ./fi-mitarbeiter-auswahl.component */ 80887);
const alphabet_module_1 = __webpack_require__(/*! ../../components/alphabet/alphabet.module */ 87143);
const alphabet_relative_module_1 = __webpack_require__(/*! ../../components/alphabet-relative/alphabet-relative.module */ 72160);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
let FiMitarbeiterAuswahlModule = class FiMitarbeiterAuswahlModule {};
exports.FiMitarbeiterAuswahlModule = FiMitarbeiterAuswahlModule;
exports.FiMitarbeiterAuswahlModule = FiMitarbeiterAuswahlModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [fi_mitarbeiter_auswahl_component_1.FiMitarbeiterAuswahlComponent],
  exports: [fi_mitarbeiter_auswahl_component_1.FiMitarbeiterAuswahlComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule, input_clone_module_1.InputCloneModule, input_clone_keeper_module_1.InputCloneKeeperModule, abstand_element_fixed_module_1.AbstandElementFixedModule, checkbox_clon_module_1.CheckboxClonModule, alphabet_module_1.AlphabetModule, alphabet_relative_module_1.AlphabetRelativeModule, page_header_module_1.PageHeaderModule, page_footer_module_1.PageFooterModule],
  providers: []
})], FiMitarbeiterAuswahlModule);

/***/ }),

/***/ 82384:
/*!******************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.component.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FiMitarbeiterEditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 22848);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 21052);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 89984));
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
let FiMitarbeiterEditorComponent = class FiMitarbeiterEditorComponent {
  Debug;
  Tools;
  Pool;
  Const;
  Basics;
  Displayservice;
  StandortDB;
  UrlaubDB;
  DB;
  Valid;
  ValidChanged = new core_1.EventEmitter();
  StandortClickedEvent = new core_1.EventEmitter();
  AnredeClickedEvent = new core_1.EventEmitter();
  UrlaubClickedEvent = new core_1.EventEmitter();
  PositionClickedEvent = new core_1.EventEmitter();
  CancelClickedEvent = new core_1.EventEmitter();
  OkClickedEvent = new core_1.EventEmitter();
  ErrorEvent = new core_1.EventEmitter();
  ResturlaubEvent = new core_1.EventEmitter();
  Titel;
  Iconname;
  Dialogbreite;
  ZIndex;
  SkipOkButtonAction;
  EmailinputEnabled;
  DeleteEnabled;
  Teamsliste;
  JoiShema;
  ErrorMessage;
  PositionY;
  Bereich;
  AddNewPosition;
  EditPosition;
  Bereiche = {
    Allgemein: 'Allgemein',
    Positionen: 'Positionen'
  };
  constructor(Debug, Tools, Pool, Const, Basics, Displayservice, StandortDB, UrlaubDB, DB) {
    this.Debug = Debug;
    this.Tools = Tools;
    this.Pool = Pool;
    this.Const = Const;
    this.Basics = Basics;
    this.Displayservice = Displayservice;
    this.StandortDB = StandortDB;
    this.UrlaubDB = UrlaubDB;
    this.DB = DB;
    try {
      this.Valid = true;
      this.DeleteEnabled = false;
      this.Titel = this.Const.NONE;
      this.Iconname = 'help-circle-outline';
      this.Dialogbreite = 400;
      this.PositionY = 100;
      this.ZIndex = 2000;
      this.SkipOkButtonAction = false;
      this.EmailinputEnabled = true;
      this.Teamsliste = [];
      this.ErrorMessage = null;
      this.AddNewPosition = false;
      this.EditPosition = false;
      this.Bereich = this.Bereiche.Allgemein;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'constructor', this.Debug.Typen.Component);
    }
  }
  ngOnDestroy() {
    try {
      this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Mitarbeitereditor);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'OnDestroy', this.Debug.Typen.Component);
    }
  }
  ResetEditor() {
    try {
      this.DeleteEnabled = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'ResetEditor', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {
      this.SetupValidation();
      this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Mitarbeitereditor, this.ZIndex);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'OnInit', this.Debug.Typen.Component);
    }
  }
  SetupValidation() {
    try {
      this.JoiShema = Joi.object({
        Name: Joi.string().required().max(100),
        Vorname: Joi.string().required().max(100),
        Kuerzel: Joi.string().required().min(3).max(10),
        Email: Joi.string().required().max(255).email({
          tlds: {
            allow: false
          }
        }).required()
      }).options({
        stripUnknown: true
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'SetupValidation', this.Debug.Typen.Component);
    }
  }
  ValidateInput() {
    try {
      let Result = this.JoiShema.validate(this.DB.CurrentMitarbeiter);
      if (Result.error) this.Valid = false;else this.Valid = true;
      if (this.DB.CurrentMitarbeiter.StandortID === '') this.Valid = false;
      // if(this.Pool.Mitarbeiterdaten === null || this.Pool.Mitarbeiterdaten.Planeradministrator === false) this.Valid = false;
      this.ValidChanged.emit(this.Valid);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'ValidateInput', this.Debug.Typen.Component);
    }
  }
  TextChanged(event) {
    try {
      this.ValidateInput();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'TextChanged', this.Debug.Typen.Component);
    }
  }
  ngAfterViewInit() {
    try {
      this.ValidateInput();
      /*
             this.GraphService.GetOtherUserteams(this.DB.CurrentMitarbeiter.Email).then((teamsliste: Teamsstruktur[]) => {
               this.Teamsliste = teamsliste;
             }).catch((error: any) => {
               this.ErrorMessage = error.error;
      });
              */
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'AfterViewInit', this.Debug.Typen.Component);
    }
  }
  StandortClicked() {
    try {
      this.StandortClickedEvent.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'StandortClicked', this.Debug.Typen.Component);
    }
  }
  /*
     FachbereichClicked() {
       try {
         this.FachbereichClickedEvent.emit();
       } catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'FachbereichClicked', this.Debug.Typen.Component);
    }
  }
      */
  LoeschenCheckboxChanged(event) {
    try {
      this.DeleteEnabled = event.status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'LoeschenCheckboxChanged', this.Debug.Typen.Component);
    }
  }
  CancelButtonClicked() {
    this.ResetEditor();
    this.CancelClickedEvent.emit();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
    }
  }
  OkButtonClicked() {
    if (this.SkipOkButtonAction) {
      this.OkClickedEvent.emit();
    } else {
      if (this.DB.CurrentMitarbeiter._id === null) {
        this.DB.AddMitarbeiter(this.DB.CurrentMitarbeiter).then(() => {
          this.ResetEditor();
          this.OkClickedEvent.emit();
        }).catch(errora => {
          this.Debug.ShowErrorMessage(errora, 'Mitarbeiter Editor', 'OkButtonClicked / AddMitarbeiter', this.Debug.Typen.Component);
        });
      } else {
        this.DB.UpdateMitarbeiterUrlaub(this.DB.CurrentMitarbeiter).then(() => {
          this.ResetEditor();
          this.OkClickedEvent.emit();
        }).catch(errorb => {
          this.Debug.ShowErrorMessage(errorb, 'Mitarbeiter Editor', 'OkButtonClicked / UpdateMitarbeiter', this.Debug.Typen.Component);
        });
      }
    }
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'OkButtonClicked', this.Debug.Typen.Component);
    }
  }
  ContentClicked(event) {
    event.preventDefault();
    event.stopPropagation();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'ContentClicked', this.Debug.Typen.Component);
    }
  }
  ArchivierenCheckboxChanged(event) {
    try {
      this.DB.CurrentMitarbeiter.Archiviert = event.status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'ArchivierenCheckboxChanged', this.Debug.Typen.Component);
    }
  }
  HomeofficefreigabenCheckboxChanged(event) {
    try {
      this.DB.CurrentMitarbeiter.Homeofficefreigaben = event.status;
      if (event.status === false) this.DB.CurrentMitarbeiter.Homeofficefreigabestandorte = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'HomeofficefreigabenCheckboxChanged', this.Debug.Typen.Component);
    }
  }
  PlaneradministratorCheckboxChanged(event) {
    try {
      this.DB.CurrentMitarbeiter.Planeradministrator = event.status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'PlaneradministratorCheckboxChanged', this.Debug.Typen.Component);
    }
  }
  UrlaubsfreigabenCheckboxChanged(event) {
    try {
      this.DB.CurrentMitarbeiter.Urlaubsfreigaben = event.status;
      if (event.status === false) this.DB.CurrentMitarbeiter.Urlaubsfreigabeorte = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'UrlaubsfreigabenCheckboxChanged', this.Debug.Typen.Component);
    }
  }
  GetAnrede() {
    try {
      if (this.DB.CurrentMitarbeiter !== null) {
        if (this.DB.CurrentMitarbeiter.Anrede === this.Const.NONE) return 'unbekannt';else return this.DB.CurrentMitarbeiter.Anrede;
      } else return 'null';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'function', this.Debug.Typen.Component);
    }
  }
  UrlaubsfreigabeChecked(id) {
    try {
      return lodash.indexOf(this.DB.CurrentMitarbeiter.Urlaubsfreigabeorte, id) !== -1;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'UrlaubsfreigabeChecked', this.Debug.Typen.Page);
    }
  }
  UrlaubsfreigabeChanged(event) {
    try {
      if (event.status === true) {
        this.DB.CurrentMitarbeiter.Urlaubsfreigabeorte.push(event.value);
      } else {
        this.DB.CurrentMitarbeiter.Urlaubsfreigabeorte = lodash.filter(this.DB.CurrentMitarbeiter.Urlaubsfreigabeorte, id => {
          return id !== event.value;
        });
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'UrlaubsfreigabeChanged', this.Debug.Typen.Component);
    }
  }
  HomeofficefreigabeChanged(event) {
    try {
      if (event.status === true) {
        this.DB.CurrentMitarbeiter.Homeofficefreigabestandorte.push(event.value);
      } else {
        this.DB.CurrentMitarbeiter.Homeofficefreigabestandorte = lodash.filter(this.DB.CurrentMitarbeiter.Homeofficefreigabestandorte, id => {
          return id !== event.value;
        });
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'HomeofficefreigabeChanged', this.Debug.Typen.Component);
    }
  }
  HomeofficefreigabeChecked(id) {
    try {
      return lodash.indexOf(this.DB.CurrentMitarbeiter.Homeofficefreigabestandorte, id) !== -1;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'HomeofficefreigabeChecked', this.Debug.Typen.Component);
    }
  }
  AllgemeinMenuButtonClicked() {
    try {
      this.Bereich = this.Bereiche.Allgemein;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'AllgemeinMenuButtonClicked', this.Debug.Typen.Component);
    }
  }
  PositionenMenuButtonClicked() {
    try {
      this.Bereich = this.Bereiche.Positionen;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'PositionenMenuButtonClicked', this.Debug.Typen.Component);
    }
  }
  NeuePositionButtonClicked() {
    try {
      this.AddNewPosition = true;
      this.DB.CurrentPosition = this.DB.GetEmptyMitarbeiterposition();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'NeuePositionButtonClicked', this.Debug.Typen.Component);
    }
  }
  NewPositionTextChanged(event) {
    try {
      this.DB.CurrentPosition.Bezeichnung = event.Text;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'NewPositionTextChanged', this.Debug.Typen.Component);
    }
  }
  PositionOkButtonClicked() {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        if (_this.AddNewPosition) {
          yield _this.DB.AddMitarbeiterposition(_this.DB.CurrentPosition);
          _this.AddNewPosition = false;
          _this.DB.CurrentPosition = null;
        }
        if (_this.EditPosition) {
          yield _this.DB.UpdateMitarbeiterposition(_this.DB.CurrentPosition);
          _this.EditPosition = false;
          _this.DB.CurrentPosition = null;
        }
      } catch (error) {
        _this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'PositionOkButtonClicked', _this.Debug.Typen.Component);
      }
    })();
  }
  PositionCancelButtonClicked() {
    try {
      if (this.AddNewPosition) {
        this.AddNewPosition = false;
        this.DB.CurrentPosition = null;
      }
      if (this.EditPosition) {
        this.EditPosition = false;
        this.DB.CurrentPosition = null;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'PositionCancelButtonClicked', this.Debug.Typen.Component);
    }
  }
  PositionButtonClicked(Position) {
    try {
      if (!this.EditPosition && !this.AddNewPosition) {
        this.DB.CurrentPosition = lodash.cloneDeep(Position);
        this.EditPosition = true;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'PositionButtonClicked', this.Debug.Typen.Component);
    }
  }
  PositionClicked() {
    try {
      this.PositionClickedEvent.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'PositionClicked', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: const_1.ConstProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: display_service_1.DisplayService
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
  }];
  static propDecorators = {
    ValidChanged: [{
      type: core_1.Output
    }],
    StandortClickedEvent: [{
      type: core_1.Output
    }],
    AnredeClickedEvent: [{
      type: core_1.Output
    }],
    UrlaubClickedEvent: [{
      type: core_1.Output
    }],
    PositionClickedEvent: [{
      type: core_1.Output
    }],
    CancelClickedEvent: [{
      type: core_1.Output
    }],
    OkClickedEvent: [{
      type: core_1.Output
    }],
    ErrorEvent: [{
      type: core_1.Output
    }],
    ResturlaubEvent: [{
      type: core_1.Output
    }],
    Titel: [{
      type: core_1.Input
    }],
    Iconname: [{
      type: core_1.Input
    }],
    Dialogbreite: [{
      type: core_1.Input
    }],
    ZIndex: [{
      type: core_1.Input
    }],
    SkipOkButtonAction: [{
      type: core_1.Input
    }],
    EmailinputEnabled: [{
      type: core_1.Input
    }]
  };
};
exports.FiMitarbeiterEditorComponent = FiMitarbeiterEditorComponent;
exports.FiMitarbeiterEditorComponent = FiMitarbeiterEditorComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'fi-mitarbeiter-editor',
  template: __webpack_require__(/*! ./fi-mitarbeiter-editor.component.html?ngResource */ 64576),
  styles: [__webpack_require__(/*! ./fi-mitarbeiter-editor.component.scss?ngResource */ 16228)]
})], FiMitarbeiterEditorComponent);

/***/ }),

/***/ 27328:
/*!***************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.module.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FiMitarbeiterEditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const fi_mitarbeiter_editor_component_1 = __webpack_require__(/*! ./fi-mitarbeiter-editor.component */ 82384);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 33780);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 61540);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 6512);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 72284);
let FiMitarbeiterEditorModule = class FiMitarbeiterEditorModule {};
exports.FiMitarbeiterEditorModule = FiMitarbeiterEditorModule;
exports.FiMitarbeiterEditorModule = FiMitarbeiterEditorModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [fi_mitarbeiter_editor_component_1.FiMitarbeiterEditorComponent],
  exports: [fi_mitarbeiter_editor_component_1.FiMitarbeiterEditorComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule, input_clone_module_1.InputCloneModule, input_clone_keeper_module_1.InputCloneKeeperModule, abstand_element_fixed_module_1.AbstandElementFixedModule, checkbox_clon_module_1.CheckboxClonModule, page_header_module_1.PageHeaderModule, page_footer_module_1.PageFooterModule, button_value_module_1.ButtonValueModule],
  providers: []
})], FiMitarbeiterEditorModule);

/***/ }),

/***/ 41656:
/*!************************************************************************************!*\
  !*** ./src/app/components-page/fi-standort-editor/fi-standort-editor.component.ts ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FiStandortEditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 21052);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 89984));
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 22848);
let FiStandortEditorComponent = class FiStandortEditorComponent {
  Debug;
  Displayservice;
  Const;
  Tools;
  Pool;
  DBUrlaub;
  DBMitarbeiter;
  DB;
  Valid;
  CanDelete;
  JoiShema;
  ValidChange = new core_1.EventEmitter();
  CancelClickedEvent = new core_1.EventEmitter();
  OkClickedEvent = new core_1.EventEmitter();
  DeleteClickedEvent = new core_1.EventEmitter();
  LandClickedEvent = new core_1.EventEmitter();
  BundeslandClickedEvent = new core_1.EventEmitter();
  KonfessionClickedEvent = new core_1.EventEmitter();
  Titel;
  Iconname;
  Dialogbreite;
  Dialoghoehe;
  PositionY;
  ZIndex;
  constructor(Debug, Displayservice, Const, Tools, Pool, DBUrlaub, DBMitarbeiter, DB) {
    this.Debug = Debug;
    this.Displayservice = Displayservice;
    this.Const = Const;
    this.Tools = Tools;
    this.Pool = Pool;
    this.DBUrlaub = DBUrlaub;
    this.DBMitarbeiter = DBMitarbeiter;
    this.DB = DB;
    try {
      this.Valid = true;
      this.Valid = true;
      this.Titel = this.Const.NONE;
      this.Iconname = 'location-outline';
      this.Dialogbreite = 400;
      this.Dialoghoehe = 300;
      this.PositionY = 100;
      this.ZIndex = 2000;
      this.CanDelete = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'constructor', this.Debug.Typen.Component);
    }
  }
  ngOnDestroy() {
    try {
      this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Standorteditor);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'OnDestroy', this.Debug.Typen.Component);
    }
  }
  SetupValidation() {
    try {
      this.JoiShema = Joi.object({
        Standort: Joi.string().required().max(100),
        Kuerzel: Joi.string().required().min(3).max(10),
        Strasse: Joi.string().required().max(100),
        Ort: Joi.string().required().max(100),
        PLZ: Joi.string().required().min(4).max(5),
        Email: Joi.string().required().max(255).email({
          tlds: {
            allow: false
          }
        }).required()
      }).options({
        stripUnknown: true
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'SetupValidation', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {
      this.SetupValidation();
      this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Standorteditor, this.ZIndex);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'OnInit', this.Debug.Typen.Component);
    }
  }
  ValidateInput() {
    try {
      let Result = this.JoiShema.validate(this.DB.CurrentStandort);
      if (Result.error) this.Valid = false;else this.Valid = true;
      if (this.Pool.Mitarbeiterdaten === null || this.Pool.Mitarbeiterdaten.Planeradministrator === false) this.Valid = false;
      this.ValidChange.emit(this.Valid);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'ValidateInput', this.Debug.Typen.Component);
    }
  }
  TextChanged(event) {
    try {
      this.ValidateInput();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'TextChanged', this.Debug.Typen.Component);
    }
  }
  ngAfterViewInit() {
    try {
      this.ValidateInput();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'AfterViewInit', this.Debug.Typen.Component);
    }
  }
  CancelButtonClicked() {
    // this.ResetEditor();
    this.CancelClickedEvent.emit();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
    }
  }
  DeleteButtonClicked() {
    try {
      if (this.CanDelete) {
        this.DB.DeleteStandort().then(() => {
          this.DeleteClickedEvent.emit();
        }).catch(exception => {
          this.Tools.ShowHinweisDialog(exception.error.message);
        });
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'DeleteButtonClicked', this.Debug.Typen.Component);
    }
  }
  OkButtonClicked() {
    try {
      debugger;
      if (this.DB.CurrentStandort._id === null) {
        this.DB.AddStandort().then(result => {
          this.OkClickedEvent.emit();
        }).catch(error => {
          this.Tools.ShowHinweisDialog(error.error);
        });
      } else {
        this.DB.UpdateStandort().then(() => {
          this.OkClickedEvent.emit();
        }).catch(exception => {
          this.Tools.ShowHinweisDialog(exception.error.message);
        });
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'OkButtonClicked', this.Debug.Typen.Component);
    }
  }
  ContentClicked(event) {
    event.preventDefault();
    event.stopPropagation();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'ContentClicked', this.Debug.Typen.Component);
    }
  }
  CanDeleteCheckedChanged(event) {
    try {
      this.CanDelete = event.status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standort Editor', 'CanDeleteCheckedChanged', this.Debug.Typen.Component);
    }
  }
  GetLand() {
    try {
      if (this.DB.CurrentStandort !== null) {
        switch (this.DB.CurrentStandort.Land) {
          case 'DE':
            return 'Deutschland';
            break;
          case 'BG':
            return 'Bulgarien';
            break;
        }
      } else return 'Unbekannt';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standort Editor', 'GetLand', this.Debug.Typen.Component);
    }
  }
  GetBundesland() {
    try {
      let Region;
      if (this.DB.CurrentStandort !== null) {
        Region = lodash.find(this.DBUrlaub.Regionenliste, {
          isoCode: this.DB.CurrentStandort.Bundesland
        });
        if (!lodash.isUndefined(Region)) return Region.Name;else return 'Unbekannt';
      } else {
        return 'Unbekannt';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standort Editor', 'funGetBundeslandction', this.Debug.Typen.Component);
    }
  }
  GetKonfession() {
    try {
      if (this.DB.CurrentStandort !== null) {
        switch (this.DB.CurrentStandort.Konfession) {
          case 'RK':
            return 'Katholisch';
            break;
          case 'EV':
            return 'Evangelisch';
            break;
        }
      } else return 'Unbekannt';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standort Editor', 'GetKonfession', this.Debug.Typen.Component);
    }
  }
  UrlaubsfreigabeChecked(id) {
    try {
      let Index = this.DB.CurrentStandort.Urlaubfreigabepersonen.indexOf(id);
      return Index !== -1;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standort Editor', 'UrlaubsfreigabeChecked', this.Debug.Typen.Component);
    }
  }
  HomeofficefreigabeChecked(id) {
    try {
      let Index = this.DB.CurrentStandort.Homeofficefreigabepersonen.indexOf(id);
      return Index !== -1;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standort Editor', 'HomeofficefreigabeChecked', this.Debug.Typen.Component);
    }
  }
  UrlaubsfreigabeCheckChanged(event, id) {
    try {
      if (event.status === true) this.DB.CurrentStandort.Urlaubfreigabepersonen.push(id);else {
        this.DB.CurrentStandort.Urlaubfreigabepersonen = lodash.filter(this.DB.CurrentStandort.Urlaubfreigabepersonen, currentid => {
          return id !== currentid;
        });
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standort Editor', 'UrlaubsfreigabeCheckChanged', this.Debug.Typen.Component);
    }
  }
  HomeofficefreigabeCheckChanged(event, id) {
    try {
      if (event.status === true) this.DB.CurrentStandort.Homeofficefreigabepersonen.push(id);else {
        this.DB.CurrentStandort.Homeofficefreigabepersonen = lodash.filter(this.DB.CurrentStandort.Homeofficefreigabepersonen, currentid => {
          return id !== currentid;
        });
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standort Editor', 'HomeofficefreigabeCheckChanged', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: display_service_1.DisplayService
  }, {
    type: const_1.ConstProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }];
  static propDecorators = {
    ValidChange: [{
      type: core_1.Output
    }],
    CancelClickedEvent: [{
      type: core_1.Output
    }],
    OkClickedEvent: [{
      type: core_1.Output
    }],
    DeleteClickedEvent: [{
      type: core_1.Output
    }],
    LandClickedEvent: [{
      type: core_1.Output
    }],
    BundeslandClickedEvent: [{
      type: core_1.Output
    }],
    KonfessionClickedEvent: [{
      type: core_1.Output
    }],
    Titel: [{
      type: core_1.Input
    }],
    Iconname: [{
      type: core_1.Input
    }],
    Dialogbreite: [{
      type: core_1.Input
    }],
    Dialoghoehe: [{
      type: core_1.Input
    }],
    PositionY: [{
      type: core_1.Input
    }],
    ZIndex: [{
      type: core_1.Input
    }]
  };
};
exports.FiStandortEditorComponent = FiStandortEditorComponent;
exports.FiStandortEditorComponent = FiStandortEditorComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'fi-standort-editor',
  template: __webpack_require__(/*! ./fi-standort-editor.component.html?ngResource */ 45230),
  styles: [__webpack_require__(/*! ./fi-standort-editor.component.scss?ngResource */ 31880)]
})], FiStandortEditorComponent);

/***/ }),

/***/ 79664:
/*!*********************************************************************************!*\
  !*** ./src/app/components-page/fi-standort-editor/fi-standort-editor.module.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FiStandortEditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const fi_standort_editor_component_1 = __webpack_require__(/*! ./fi-standort-editor.component */ 41656);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 33780);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 61540);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 6512);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 72284);
let FiStandortEditorModule = class FiStandortEditorModule {};
exports.FiStandortEditorModule = FiStandortEditorModule;
exports.FiStandortEditorModule = FiStandortEditorModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [fi_standort_editor_component_1.FiStandortEditorComponent],
  exports: [fi_standort_editor_component_1.FiStandortEditorComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule, input_clone_module_1.InputCloneModule, input_clone_keeper_module_1.InputCloneKeeperModule, abstand_element_fixed_module_1.AbstandElementFixedModule, page_header_module_1.PageHeaderModule, checkbox_clon_module_1.CheckboxClonModule, page_footer_module_1.PageFooterModule, button_value_module_1.ButtonValueModule],
  providers: []
})], FiStandortEditorModule);

/***/ }),

/***/ 73088:
/*!*************************************************************************************!*\
  !*** ./src/app/components/abstand-element-fixed/abstand-element-fixed.component.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AbstandElementFixedComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
let AbstandElementFixedComponent = class AbstandElementFixedComponent {
  constructor() {}
  ngOnInit() {}
  static ctorParameters = () => [];
};
exports.AbstandElementFixedComponent = AbstandElementFixedComponent;
exports.AbstandElementFixedComponent = AbstandElementFixedComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'abstand-element-fixed',
  template: __webpack_require__(/*! ./abstand-element-fixed.component.html?ngResource */ 98436),
  styles: [__webpack_require__(/*! ./abstand-element-fixed.component.scss?ngResource */ 61204)]
})], AbstandElementFixedComponent);

/***/ }),

/***/ 6512:
/*!**********************************************************************************!*\
  !*** ./src/app/components/abstand-element-fixed/abstand-element-fixed.module.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AbstandElementFixedModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const abstand_element_fixed_component_1 = __webpack_require__(/*! ./abstand-element-fixed.component */ 73088);
let AbstandElementFixedModule = class AbstandElementFixedModule {};
exports.AbstandElementFixedModule = AbstandElementFixedModule;
exports.AbstandElementFixedModule = AbstandElementFixedModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [abstand_element_fixed_component_1.AbstandElementFixedComponent],
  exports: [abstand_element_fixed_component_1.AbstandElementFixedComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule],
  providers: []
})], AbstandElementFixedModule);

/***/ }),

/***/ 72160:
/*!**************************************************************************!*\
  !*** ./src/app/components/alphabet-relative/alphabet-relative.module.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AlphabetRelativeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const alphabet_relative_1 = __webpack_require__(/*! ./alphabet-relative */ 1215);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
let AlphabetRelativeModule = class AlphabetRelativeModule {};
exports.AlphabetRelativeModule = AlphabetRelativeModule;
exports.AlphabetRelativeModule = AlphabetRelativeModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [alphabet_relative_1.AlphabetRelativeComponent],
  exports: [alphabet_relative_1.AlphabetRelativeComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule],
  providers: []
})], AlphabetRelativeModule);

/***/ }),

/***/ 1215:
/*!*******************************************************************!*\
  !*** ./src/app/components/alphabet-relative/alphabet-relative.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AlphabetRelativeComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
let AlphabetRelativeComponent = class AlphabetRelativeComponent {
  Debug;
  Basics;
  Const;
  Tools;
  Breite;
  Auswahl = '';
  Buchstabenliste = [];
  AlphabetClicked = new core_1.EventEmitter();
  ZusatzbuttonClicked = new core_1.EventEmitter();
  ImageKeeperDiv;
  Style;
  Filterliste;
  constructor(Debug, Basics, Const, Tools) {
    this.Debug = Debug;
    this.Basics = Basics;
    this.Const = Const;
    this.Tools = Tools;
    try {
      this.Auswahl = '';
      this.Breite = 0;
      this.Buchstabenliste = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
      this.Filterliste = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'Constructor', this.Debug.Typen.Component);
    }
  }
  InitScreen() {
    try {
      let TopPossition = 0;
      let BottomPossition = 0;
      this.Style = {
        width: this.Breite + 'px',
        top: TopPossition + 'px',
        bottom: BottomPossition + 'px',
        background: this.Basics.Farben.BAEHellgrau,
        display: 'flex',
        'flex-direction': 'column',
        'justify-content': 'center' // horizontal
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'InitScreen', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {
      this.InitScreen();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'ngOnInit', this.Debug.Typen.Component);
    }
  }
  AlphabetClickedHandler(buchstabe) {
    try {
      this.AlphabetClicked.emit(buchstabe);
      this.Auswahl = buchstabe;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'AlphabetClickedHandler', this.Debug.Typen.Component);
    }
  }
  SetFilterliste() {
    try {
      this.Filterliste = this.Buchstabenliste;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'SetFilterliste', this.Debug.Typen.Component);
    }
  }
  ngOnChanges(changes) {
    try {
      let Value;
      Value = changes.Buchstabenliste;
      if (typeof Value !== 'undefined') {
        this.SetFilterliste();
      }
      Value = changes.Breite;
      if (typeof Value !== 'undefined') {
        this.InitScreen();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'ngOnChanges', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: tools_1.ToolsProvider
  }];
  static propDecorators = {
    Breite: [{
      type: core_1.Input
    }],
    Auswahl: [{
      type: core_1.Input
    }],
    Buchstabenliste: [{
      type: core_1.Input
    }],
    AlphabetClicked: [{
      type: core_1.Output
    }],
    ZusatzbuttonClicked: [{
      type: core_1.Output
    }],
    ImageKeeperDiv: [{
      type: core_1.ViewChild,
      args: ['ImageKeeperDiv', {
        static: true
      }]
    }]
  };
};
exports.AlphabetRelativeComponent = AlphabetRelativeComponent;
exports.AlphabetRelativeComponent = AlphabetRelativeComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'alphabet-relative',
  template: __webpack_require__(/*! ./alphabet-relative.html?ngResource */ 87104),
  styles: [__webpack_require__(/*! ./alphabet-relative.scss?ngResource */ 85209)]
})], AlphabetRelativeComponent);

/***/ }),

/***/ 87143:
/*!********************************************************!*\
  !*** ./src/app/components/alphabet/alphabet.module.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AlphabetModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const alphabet_1 = __webpack_require__(/*! ./alphabet */ 99031);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
let AlphabetModule = class AlphabetModule {};
exports.AlphabetModule = AlphabetModule;
exports.AlphabetModule = AlphabetModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [alphabet_1.AlphabetComponent],
  exports: [alphabet_1.AlphabetComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule],
  providers: []
})], AlphabetModule);

/***/ }),

/***/ 99031:
/*!*************************************************!*\
  !*** ./src/app/components/alphabet/alphabet.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AlphabetComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
let AlphabetComponent = class AlphabetComponent {
  Debug;
  Basics;
  Const;
  Tools;
  Breite;
  Auswahl = '';
  Buchstabenliste = [];
  PageHeader = null;
  PageFooter = null;
  AlphabetClicked = new core_1.EventEmitter();
  ZusatzbuttonClicked = new core_1.EventEmitter();
  ImageKeeperDiv;
  Style;
  Filterliste;
  constructor(Debug, Basics, Const, Tools) {
    this.Debug = Debug;
    this.Basics = Basics;
    this.Const = Const;
    this.Tools = Tools;
    try {
      this.Auswahl = '';
      this.Breite = 0;
      this.Buchstabenliste = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
      this.Filterliste = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'Constructor', this.Debug.Typen.Component);
    }
  }
  InitScreen() {
    try {
      let TopPossition = 0;
      let BottomPossition = 0;
      if (typeof this.PageHeader !== 'undefined' && this.PageHeader !== null) TopPossition = this.PageHeader.PageHeaderDiv.nativeElement.clientHeight;
      if (typeof this.PageFooter !== 'undefined' && this.PageFooter !== null) BottomPossition = this.PageFooter.PageFooterFrameDiv.nativeElement.clientHeight;
      this.Style = {
        width: this.Breite + 'px',
        top: TopPossition + 'px',
        bottom: BottomPossition + 'px',
        background: this.Basics.Farben.BAEHellgrau
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'InitScreen', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {
      this.InitScreen();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'ngOnInit', this.Debug.Typen.Component);
    }
  }
  AlphabetClickedHandler(buchstabe) {
    try {
      this.AlphabetClicked.emit(buchstabe);
      this.Auswahl = buchstabe;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'AlphabetClickedHandler', this.Debug.Typen.Component);
    }
  }
  SetFilterliste() {
    try {
      this.Filterliste = this.Buchstabenliste;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'SetFilterliste', this.Debug.Typen.Component);
    }
  }
  ngOnChanges(changes) {
    try {
      let Value;
      Value = changes.Buchstabenliste;
      if (typeof Value !== 'undefined') {
        this.SetFilterliste();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'ngOnChanges', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: tools_1.ToolsProvider
  }];
  static propDecorators = {
    Breite: [{
      type: core_1.Input
    }],
    Auswahl: [{
      type: core_1.Input
    }],
    Buchstabenliste: [{
      type: core_1.Input
    }],
    PageHeader: [{
      type: core_1.Input
    }],
    PageFooter: [{
      type: core_1.Input
    }],
    AlphabetClicked: [{
      type: core_1.Output
    }],
    ZusatzbuttonClicked: [{
      type: core_1.Output
    }],
    ImageKeeperDiv: [{
      type: core_1.ViewChild,
      args: ['ImageKeeperDiv', {
        static: true
      }]
    }]
  };
};
exports.AlphabetComponent = AlphabetComponent;
exports.AlphabetComponent = AlphabetComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'alphabet',
  template: __webpack_require__(/*! ./alphabet.html?ngResource */ 27272),
  styles: [__webpack_require__(/*! ./alphabet.scss?ngResource */ 21784)]
})], AlphabetComponent);

/***/ }),

/***/ 10272:
/*!********************************************************************!*\
  !*** ./src/app/components/auswahl-dialog/auswahl-dialog.module.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AuswahlDialogModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const auswahl_dialog_1 = __webpack_require__(/*! ./auswahl-dialog */ 78964);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const page_header_module_1 = __webpack_require__(/*! ../page-header/page-header.module */ 70216);
const page_footer_module_1 = __webpack_require__(/*! ../page-footer/page-footer.module */ 90520);
const safe_pipe_module_1 = __webpack_require__(/*! ../../pipes/safe.pipe.module */ 84104);
let AuswahlDialogModule = class AuswahlDialogModule {};
exports.AuswahlDialogModule = AuswahlDialogModule;
exports.AuswahlDialogModule = AuswahlDialogModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [auswahl_dialog_1.AuswahlDialogComponent],
  exports: [auswahl_dialog_1.AuswahlDialogComponent],
  imports: [angular_1.IonicModule, common_1.CommonModule, forms_1.FormsModule, page_header_module_1.PageHeaderModule, page_footer_module_1.PageFooterModule, safe_pipe_module_1.SafePipeModule],
  providers: []
})], AuswahlDialogModule);

/***/ }),

/***/ 78964:
/*!*************************************************************!*\
  !*** ./src/app/components/auswahl-dialog/auswahl-dialog.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AuswahlDialogComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 21052);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
let AuswahlDialogComponent = class AuswahlDialogComponent {
  Tools;
  Basics;
  Debug;
  Displayservice;
  Const;
  MySelection;
  Titel = 'Testtitel';
  Auswahlliste;
  Auswahlindex;
  Iconname;
  Dialogbreite;
  PositionY;
  ZIndex;
  IndexChanged = new core_1.EventEmitter();
  OkClickedEvent = new core_1.EventEmitter();
  CancelClickedEvent = new core_1.EventEmitter();
  constructor(Tools, Basics, Debug, Displayservice, Const) {
    this.Tools = Tools;
    this.Basics = Basics;
    this.Debug = Debug;
    this.Displayservice = Displayservice;
    this.Const = Const;
    try {
      this.Auswahlliste = [{
        Index: 0,
        FirstColumn: '',
        SecoundColumn: '',
        Data: null
      }];
      this.Auswahlindex = 0;
      this.ZIndex = 4000;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Auswahl Dialog', 'constructor', this.Debug.Typen.Component);
    }
  }
  ngOnDestroy() {
    try {
      this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Auswahldialog);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Auswahl Dialog', 'OnDestroy', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {
      this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Auswahldialog, this.ZIndex);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Auswahl Dialog', 'OnInit', this.Debug.Typen.Component);
    }
  }
  Setup(titel, auswahlliste, auswahlindex) {
    try {
      this.Titel = titel;
      this.Auswahlliste = auswahlliste;
      this.Auswahlindex = auswahlindex;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Auswahl Dialog', 'Setup', this.Debug.Typen.Page);
    }
  }
  Open(reset, index) {
    try {
      if (typeof reset !== 'undefined' && reset === true) {
        this.Auswahlindex = typeof index !== 'undefined' ? index : -1;
      } else {}
      this.MySelection.open();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Auswahl Dialog', 'Open', this.Debug.Typen.Component);
    }
  }
  ngOnChanges(changes) {
    try {
      let Value = changes.Auswahlindex;
      if (typeof Value !== 'undefined') {
        if (!Value.firstChange) {}
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Auswahl Dialog', 'ngOnChanges', this.Debug.Typen.Component);
    }
  }
  IndexChangedHandler(event) {
    try {
      let Index;
      if (event.detail.value === '') Index = -1;else {
        if (isNaN(event.detail.value)) Index = -1;else Index = event.detail.value;
      }
      this.Auswahlindex = Index;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Auswahl Dialog', 'IndexChanged', this.Debug.Typen.Component);
    }
  }
  CancelButtonClicked() {
    this.CancelClickedEvent.emit();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Auswahl Dialog', 'CancelButtonClicked', this.Debug.Typen.Component);
    }
  }
  OkButtonClicked() {
    if (!lodash.isUndefined(this.Auswahlliste[this.Auswahlindex])) {
      this.OkClickedEvent.emit(this.Auswahlliste[this.Auswahlindex].Data);
    } else {
      this.OkClickedEvent.emit(null);
    }
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Auswahl Dialog', 'OkButtonClicked', this.Debug.Typen.Component);
    }
  }
  ContentClicked(event) {
    event.preventDefault();
    event.stopPropagation();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Auswahl Dialog', 'ContentClicked', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: tools_1.ToolsProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: debug_1.DebugProvider
  }, {
    type: display_service_1.DisplayService
  }, {
    type: const_1.ConstProvider
  }];
  static propDecorators = {
    MySelection: [{
      type: core_1.ViewChild,
      args: ['MySelection', {
        static: true
      }]
    }],
    Titel: [{
      type: core_1.Input
    }],
    Auswahlliste: [{
      type: core_1.Input
    }],
    Auswahlindex: [{
      type: core_1.Input
    }],
    Iconname: [{
      type: core_1.Input
    }],
    Dialogbreite: [{
      type: core_1.Input
    }],
    PositionY: [{
      type: core_1.Input
    }],
    ZIndex: [{
      type: core_1.Input
    }],
    IndexChanged: [{
      type: core_1.Output
    }],
    OkClickedEvent: [{
      type: core_1.Output
    }],
    CancelClickedEvent: [{
      type: core_1.Output
    }]
  };
};
exports.AuswahlDialogComponent = AuswahlDialogComponent;
exports.AuswahlDialogComponent = AuswahlDialogComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'auswahl-dialog',
  template: __webpack_require__(/*! ./auswahl-dialog.html?ngResource */ 10824),
  styles: [__webpack_require__(/*! ./auswahl-dialog.scss?ngResource */ 32844)]
})], AuswahlDialogComponent);

/***/ }),

/***/ 22844:
/*!**************************************************************************!*\
  !*** ./src/app/components/button-value-date/button-value-date.module.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ButtonValueDateModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const button_value_date_1 = __webpack_require__(/*! ./button-value-date */ 76732);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
let ButtonValueDateModule = class ButtonValueDateModule {};
exports.ButtonValueDateModule = ButtonValueDateModule;
exports.ButtonValueDateModule = ButtonValueDateModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [button_value_date_1.ButtonValueDateComponent],
  exports: [button_value_date_1.ButtonValueDateComponent],
  imports: [angular_1.IonicModule, common_1.CommonModule],
  providers: []
})], ButtonValueDateModule);

/***/ }),

/***/ 76732:
/*!*******************************************************************!*\
  !*** ./src/app/components/button-value-date/button-value-date.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ButtonValueDateComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
let ButtonValueDateComponent = class ButtonValueDateComponent {
  Basics;
  Debug;
  Tools;
  Const;
  Buttontext;
  Minimum;
  Maximum;
  Datum;
  Buttoncolor;
  InnerBackgroundcolor;
  Enabled;
  ElementID;
  Buttonsize;
  ShowKW;
  ValueBreite;
  TimeChanged = new core_1.EventEmitter();
  DiabledButtonClicked = new core_1.EventEmitter();
  DatePicker;
  Minimumstring;
  Maximumstring;
  constructor(Basics, Debug, Tools, Const) {
    this.Basics = Basics;
    this.Debug = Debug;
    this.Tools = Tools;
    this.Const = Const;
    try {
      let Tag = 1;
      let Monat = 7;
      let Heute = (0, moment_1.default)();
      let Jahr = Heute.year();
      let Stunde = 12;
      let Minute = 0;
      this.ValueBreite = 260;
      this.Minimum = (0, moment_1.default)().set({
        year: 2000,
        month: 0,
        date: 1
      }).locale('de');
      this.Maximum = (0, moment_1.default)().set({
        year: Jahr,
        month: 11,
        date: 31
      }).locale('de');
      this.Minimumstring = '2000-01-01';
      this.Maximumstring = Jahr.toString() + '-12-31';
      this.Buttontext = 'Datum';
      this.Datum = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
      this.Enabled = true;
      this.Buttoncolor = this.Basics.Farben.Burnicklbraun;
      this.ElementID = 'open-modal-date';
      this.Buttonsize = 'normal';
      this.ShowKW = false;
      this.InnerBackgroundcolor = this.Basics.Farben.Burnicklgrau;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Button Value Date', 'Constructor', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Button Value Date', 'ngOnInit', this.Debug.Typen.Component);
    }
  }
  ngOnChanges(changes) {
    try {
      let Minimum = changes.Minimum;
      let Maximum = changes.Maximum;
      if (typeof Minimum !== 'undefined') {
        this.Minimum = Minimum.currentValue;
        this.Minimumstring = this.Minimum.format('YYYY-MM-DD');
      }
      if (typeof Maximum !== 'undefined') {
        this.Maximum = Maximum.currentValue;
        this.Maximumstring = this.Maximum.format('YYYY-MM-DD');
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Button Value Date', 'ngOnChanges', this.Debug.Typen.Component);
    }
  }
  /*
     ButtonClickedHandler() {
       try {
         if(this.Enabled === true) {
           this.Tools.PlayClicksound().then(() => {
             // this.DatePicker.open();
        });
      }
      else {
           this.DiabledButtonClicked.emit();
      }
    }
    catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Button Value Date', 'ButtonClickedHandler', this.Debug.Typen.Component);
    }
  }
      */
  FetigButtonClicked() {
    try {
      this.DatePicker.confirm(true);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Button Value Date', 'FetigButtonClicked', this.Debug.Typen.Component);
    }
  }
  DateChangedHandler(value) {
    try {
      let Resultstring = value.detail.value;
      let Parts = Resultstring.split('T');
      let Datestring = Parts[0];
      let Werte = Datestring.split('-');
      let Tag = parseInt(Werte[2]);
      let Monat = parseInt(Werte[1]);
      let Jahr = parseInt(Werte[0]);
      let Stunde = this.Datum.hours();
      let Minute = this.Datum.minutes();
      this.Datum = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
      this.TimeChanged.emit(this.Datum);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Button Value Date', 'DateChangedHandler', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: basics_1.BasicsProvider
  }, {
    type: debug_1.DebugProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: const_1.ConstProvider
  }];
  static propDecorators = {
    Buttontext: [{
      type: core_1.Input
    }],
    Minimum: [{
      type: core_1.Input
    }],
    Maximum: [{
      type: core_1.Input
    }],
    Datum: [{
      type: core_1.Input
    }],
    Buttoncolor: [{
      type: core_1.Input
    }],
    InnerBackgroundcolor: [{
      type: core_1.Input
    }],
    Enabled: [{
      type: core_1.Input
    }],
    ElementID: [{
      type: core_1.Input
    }],
    Buttonsize: [{
      type: core_1.Input
    }],
    ShowKW: [{
      type: core_1.Input
    }],
    ValueBreite: [{
      type: core_1.Input
    }],
    TimeChanged: [{
      type: core_1.Output
    }],
    DiabledButtonClicked: [{
      type: core_1.Output
    }],
    DatePicker: [{
      type: core_1.ViewChild,
      args: ['DatePicker', {
        static: false
      }]
    }]
  };
};
exports.ButtonValueDateComponent = ButtonValueDateComponent;
exports.ButtonValueDateComponent = ButtonValueDateComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'button-value-date',
  template: __webpack_require__(/*! ./button-value-date.html?ngResource */ 63104),
  styles: [__webpack_require__(/*! ./button-value-date.scss?ngResource */ 94928)]
})], ButtonValueDateComponent);

/***/ }),

/***/ 72284:
/*!****************************************************************!*\
  !*** ./src/app/components/button-value/button-value.module.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ButtonValueModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const button_value_1 = __webpack_require__(/*! ./button-value */ 13228);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
let ButtonValueModule = class ButtonValueModule {};
exports.ButtonValueModule = ButtonValueModule;
exports.ButtonValueModule = ButtonValueModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [button_value_1.ButtonValueComponent],
  exports: [button_value_1.ButtonValueComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule],
  providers: []
})], ButtonValueModule);

/***/ }),

/***/ 13228:
/*!*********************************************************!*\
  !*** ./src/app/components/button-value/button-value.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ButtonValueComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
let ButtonValueComponent = class ButtonValueComponent {
  Basics;
  Debug;
  Tools;
  Const;
  Buttoncolor;
  Buttontext;
  Wert_A;
  Wert_B;
  Iconfile;
  Iconcolor;
  Enabled;
  SmallWidth;
  BigHeight;
  ShowMargin;
  Width;
  ProContent = false;
  ProMessage = '';
  Buttonvaluecolor = '';
  Rechtebreite;
  Linkebreite;
  ButtonClicked = new core_1.EventEmitter();
  DisabledButtonClicked = new core_1.EventEmitter();
  RGB;
  Wert_A_String;
  constructor(Basics, Debug, Tools, Const) {
    this.Basics = Basics;
    this.Debug = Debug;
    this.Tools = Tools;
    this.Const = Const;
    try {
      this.Width = 0;
      this.ShowMargin = true;
      this.BigHeight = false;
      this.SmallWidth = false;
      this.Buttontext = '';
      this.Wert_A = '';
      this.Wert_B = '';
      this.Iconcolor = 'red';
      this.Iconfile = '';
      this.Buttoncolor = this.Basics.Farben.Burnicklbraun;
      this.Enabled = true;
      this.Buttonvaluecolor = this.Basics.Farben.Burnicklgrau;
      this.Linkebreite = 40;
      this.Rechtebreite = 60;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Button Value', 'Constructor', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Button Value', 'ngOnInit', this.Debug.Typen.Component);
    }
  }
  ngOnChanges(changes) {
    try {
      let Buttonvalue = changes.Buttoncolor;
      let Wert_A_Value = changes.Wert_A;
      // let Werte: Tastaturdatenstruktur;
      let Index;
      let Text;
      if (typeof Buttonvalue !== 'undefined') {
        if (!Buttonvalue.firstChange) {
          this.RGB = this.Tools.HexToRGB(Buttonvalue.currentValue);
        }
      }
      if (typeof Wert_A_Value !== 'undefined' && typeof Wert_A_Value.currentValue !== 'undefined') {
        if (typeof Wert_A_Value.currentValue === 'string') {
          // Stringausgabe
          this.Wert_A_String = Wert_A_Value.currentValue;
        } else {
          /*
                     // Tastaturstruktur aks String ausgeben
                     Werte = Wert_A_Value.currentValue;
          Index = Exponentenzahlen.indexOf(Werte.Exponent);
                     if(Werte.Currency) {
                       if(typeof Werte.Wert !== 'undefined') {
                         Text = Werte.Wert.toFixed(2).replace('.', ',') + ' ' + Exponentensymbole[Index] + Werte.Einheit;
                       } else {
                         Text = Werte.Wertname + ' n.d.';
            }
                     } else {
                       if(typeof Werte.Wert !== 'undefined') {
                         Text = Werte.Wert.toString().replace('.', ',') + ' ' + Exponentensymbole[Index] + Werte.Einheit;
                       } else {
                           Text = Werte.Wertname + ' n.d.';
            }
          }
                     if(Werte.Hochzahl === 2) Text += '&sup2';
          if(Werte.Hochzahl === 3) Text += '&sup3';
                     this.Wert_A_String = Text;
           
           */
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Button Value', 'ngOnChanges', this.Debug.Typen.Component);
    }
  }
  ButtonClickedHandler() {
    try {
      if (this.Enabled === true) {
        this.ButtonClicked.emit();
      } else {
        this.DisabledButtonClicked.emit();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Button Value', 'ButtonClickedHandler', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: basics_1.BasicsProvider
  }, {
    type: debug_1.DebugProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: const_1.ConstProvider
  }];
  static propDecorators = {
    Buttoncolor: [{
      type: core_1.Input
    }],
    Buttontext: [{
      type: core_1.Input
    }],
    Wert_A: [{
      type: core_1.Input
    }],
    Wert_B: [{
      type: core_1.Input
    }],
    Iconfile: [{
      type: core_1.Input
    }],
    Iconcolor: [{
      type: core_1.Input
    }],
    Enabled: [{
      type: core_1.Input
    }],
    SmallWidth: [{
      type: core_1.Input
    }],
    BigHeight: [{
      type: core_1.Input
    }],
    ShowMargin: [{
      type: core_1.Input
    }],
    Width: [{
      type: core_1.Input
    }],
    ProContent: [{
      type: core_1.Input
    }],
    ProMessage: [{
      type: core_1.Input
    }],
    Buttonvaluecolor: [{
      type: core_1.Input
    }],
    Rechtebreite: [{
      type: core_1.Input
    }],
    Linkebreite: [{
      type: core_1.Input
    }],
    ButtonClicked: [{
      type: core_1.Output
    }],
    DisabledButtonClicked: [{
      type: core_1.Output
    }]
  };
};
exports.ButtonValueComponent = ButtonValueComponent;
exports.ButtonValueComponent = ButtonValueComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'button-value',
  template: __webpack_require__(/*! ./button-value.html?ngResource */ 79008),
  styles: [__webpack_require__(/*! ./button-value.scss?ngResource */ 26788)]
})], ButtonValueComponent);

/***/ }),

/***/ 25856:
/*!*********************************************************************!*\
  !*** ./src/app/components/checkbox-clon/checkbox-clon.component.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CheckboxClonComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
let CheckboxClonComponent = class CheckboxClonComponent {
  Basics;
  Tools;
  Debug;
  Checked = false;
  Enabled = true;
  CanUnselect = true;
  Index = -1;
  Background = 'white';
  Value = null;
  CheckChanged = new core_1.EventEmitter();
  ImgSource;
  constructor(Basics, Tools, Debug) {
    this.Basics = Basics;
    this.Tools = Tools;
    this.Debug = Debug;
    try {
      this.ImgSource = this.Basics.Svgpath + 'hacken.svg';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Checkbox', 'constructor', this.Debug.Typen.Component);
    }
  }
  PrepareData() {
    try {
      if (this.Enabled === false) {
        this.Background = '#B2BABB';
      } else {
        this.Background = 'white';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Checkbox', 'PrepareData', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Checkbox', 'ngOnInit', this.Debug.Typen.Component);
    }
  }
  DivClickedHnadler(event) {
    try {
      event.stopPropagation();
      event.preventDefault();
      if (this.Enabled && this.CanUnselect === true || this.Enabled && this.CanUnselect === false && this.Checked === false) {
        this.CheckChanged.emit({
          status: !this.Checked,
          index: this.Index,
          event: event,
          value: this.Value
        });
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Checkbox', 'DivClickedHnadler', this.Debug.Typen.Component);
    }
  }
  ngOnChanges(changes) {
    try {
      let Value;
      Value = changes.Enabled;
      if (typeof Value !== 'undefined') {
        this.PrepareData();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Alphabet', 'ngOnChanges', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: basics_1.BasicsProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: debug_1.DebugProvider
  }];
  static propDecorators = {
    Checked: [{
      type: core_1.Input
    }],
    Enabled: [{
      type: core_1.Input
    }],
    CanUnselect: [{
      type: core_1.Input
    }],
    Index: [{
      type: core_1.Input
    }],
    Background: [{
      type: core_1.Input
    }],
    Value: [{
      type: core_1.Input
    }],
    CheckChanged: [{
      type: core_1.Output
    }]
  };
};
exports.CheckboxClonComponent = CheckboxClonComponent;
exports.CheckboxClonComponent = CheckboxClonComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'checkbox-clon',
  template: __webpack_require__(/*! ./checkbox-clon.component.html?ngResource */ 32062),
  styles: [__webpack_require__(/*! ./checkbox-clon.component.scss?ngResource */ 94016)]
})], CheckboxClonComponent);

/***/ }),

/***/ 7388:
/*!******************************************************************!*\
  !*** ./src/app/components/checkbox-clon/checkbox-clon.module.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CheckboxClonModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const checkbox_clon_component_1 = __webpack_require__(/*! ./checkbox-clon.component */ 25856);
let CheckboxClonModule = class CheckboxClonModule {};
exports.CheckboxClonModule = CheckboxClonModule;
exports.CheckboxClonModule = CheckboxClonModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [checkbox_clon_component_1.CheckboxClonComponent],
  exports: [checkbox_clon_component_1.CheckboxClonComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule],
  providers: []
})], CheckboxClonModule);

/***/ }),

/***/ 16920:
/*!*******************************************************************************!*\
  !*** ./src/app/components/input-clone-keeper/input-clone-keeper.component.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.InputCloneKeeperComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const input_clone_component_1 = __webpack_require__(/*! ../input-clone/input-clone.component */ 38056);
let InputCloneKeeperComponent = class InputCloneKeeperComponent {
  Debug;
  Basics;
  elRef;
  Tools;
  Valid;
  ValidChange = new core_1.EventEmitter();
  List;
  Inputliste;
  constructor(Debug, Basics, elRef, Tools) {
    this.Debug = Debug;
    this.Basics = Basics;
    this.elRef = elRef;
    this.Tools = Tools;
    try {
      this.Valid = true;
      this.Inputliste = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Input Clone Keeper', 'constructor', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Input Clone Keeper', 'ngOnInit', this.Debug.Typen.Component);
    }
  }
  CheckValid() {
    try {
      let Valid = true;
      for (let Inputelement of this.Inputliste) {
        if (!Inputelement.Valid) {
          Valid = false;
          break;
        }
      }
      return Valid;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Input Clone Keeper', 'CheckValid', this.Debug.Typen.Component);
    }
  }
  ngAfterViewInit() {
    try {
      this.Inputliste = this.elRef.nativeElement.getElementsByTagName('input-clone');
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Input Clone Keeper', 'AfterViewInit', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: core_1.ElementRef
  }, {
    type: tools_1.ToolsProvider
  }];
  static propDecorators = {
    Valid: [{
      type: core_1.Input
    }],
    ValidChange: [{
      type: core_1.Output
    }],
    List: [{
      type: core_1.ViewChildren,
      args: [input_clone_component_1.InputCloneComponent]
    }]
  };
};
exports.InputCloneKeeperComponent = InputCloneKeeperComponent;
exports.InputCloneKeeperComponent = InputCloneKeeperComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'input-clone-keeper',
  template: __webpack_require__(/*! ./input-clone-keeper.component.html?ngResource */ 45236),
  styles: [__webpack_require__(/*! ./input-clone-keeper.component.scss?ngResource */ 24660)]
})], InputCloneKeeperComponent);

/***/ }),

/***/ 61540:
/*!****************************************************************************!*\
  !*** ./src/app/components/input-clone-keeper/input-clone-keeper.module.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.InputCloneKeeperModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const input_clone_keeper_component_1 = __webpack_require__(/*! ./input-clone-keeper.component */ 16920);
let InputCloneKeeperModule = class InputCloneKeeperModule {};
exports.InputCloneKeeperModule = InputCloneKeeperModule;
exports.InputCloneKeeperModule = InputCloneKeeperModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [input_clone_keeper_component_1.InputCloneKeeperComponent],
  exports: [input_clone_keeper_component_1.InputCloneKeeperComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule],
  providers: []
})], InputCloneKeeperModule);

/***/ }),

/***/ 38056:
/*!*****************************************************************!*\
  !*** ./src/app/components/input-clone/input-clone.component.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.InputCloneComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 89984));
let InputCloneComponent = class InputCloneComponent {
  Debug;
  Basics;
  Tools;
  Titel;
  Titelcolor;
  Value;
  Debouncetime;
  ValueChange = new core_1.EventEmitter();
  MinLength;
  MaxLength;
  Enabled;
  Clickable;
  MinHeight;
  Inputtype;
  Required;
  Lines;
  DisabledColor;
  OkBorderColor;
  ParseToFloat;
  Textcolor;
  Textsize;
  Einheit;
  TextChanged = new core_1.EventEmitter();
  RequiredBorder;
  DisabledBorder;
  Valid;
  JoiShema;
  OkBorder;
  constructor(Debug, Basics, Tools) {
    this.Debug = Debug;
    this.Basics = Basics;
    this.Tools = Tools;
    try {
      let Border = 1;
      this.OkBorderColor = this.Basics.Farben.Burnicklgrau;
      this.DisabledColor = this.Basics.Farben.Blau;
      this.OkBorder = Border + 'px solid ' + this.OkBorderColor;
      this.RequiredBorder = Border + 'px solid ' + this.Basics.Farben.Orange;
      this.DisabledBorder = Border + 'px solid ' + this.DisabledColor;
      this.Valid = true;
      this.MinLength = 0;
      this.MaxLength = 0;
      this.Enabled = true;
      this.Titel = '';
      this.Value = '';
      this.MinHeight = 30;
      this.Inputtype = 'text';
      this.Lines = 1;
      this.Debouncetime = 0;
      this.Clickable = false;
      this.Required = false;
      this.Titelcolor = 'black';
      this.ParseToFloat = false;
      this.Textsize = 14;
      this.Einheit = null;
      this.Textcolor = this.Basics.Ionicfarben.Schwarz;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Input Clone', 'constructor', this.Debug.Typen.Component);
    }
  }
  ngAfterViewInit() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Input Clone', 'AfterViewInit', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {
      let Border = 1;
      let schema;
      if (this.Inputtype === 'text' || this.Inputtype === 'email') {
        schema = Joi.string();
        if (this.Inputtype === 'email') schema = schema.email({
          tlds: {
            allow: false
          }
        });
      } else {
        schema = Joi.number();
      }
      if (this.MinLength > 0) schema = schema.min(this.MinLength);
      if (this.MaxLength > 0) schema = schema.max(this.MaxLength);
      if (this.Required === true) schema = schema.required();else schema = schema.allow('');
      this.JoiShema = Joi.object({
        Text: schema
      }).options({
        stripUnknown: true
      });
      this.Valid = this.CheckValid(this.Value);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Input Clone', 'ngOnInit', this.Debug.Typen.Component);
    }
  }
  CheckValid(text) {
    try {
      let Result;
      let valid;
      if (this.JoiShema) {
        Result = this.JoiShema.validate({
          Text: text
        });
        if (Result.error) {
          valid = false;
          this.Debug.ShowErrorMessage(Result.error.message, 'Input Clone', 'CheckValid', this.Debug.Typen.Component);
        } else valid = true;
      } else {
        valid = false;
      }
      return valid;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Input Clone', 'CheckValid', this.Debug.Typen.Component);
    }
  }
  TextChangedHandler(event) {
    try {
      let Text = this.Inputtype === 'text' || this.Inputtype === 'email' ? event.detail.value : this.ParseToFloat ? parseFloat(event.detail.value) : parseInt(event.detail.value);
      if (this.Enabled === true) {
        if (typeof Text === 'undefined') {
          Text = '';
        }
        this.Valid = this.CheckValid(Text);
        this.ValueChange.emit(Text); // Übertragen für Banana in a Box
        this.TextChanged.emit({
          Titel: this.Titel,
          Text: Text,
          Valid: this.Valid
        });
      }
      event.stopPropagation();
      event.preventDefault();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Input Clone', 'TextChangedHandler', this.Debug.Typen.Component);
    }
  }
  ngOnChanges(changes) {
    try {
      let Border = 1;
      let Value = changes.Value;
      if (typeof Value !== 'undefined') {
        this.Valid = this.CheckValid(Value.currentValue);
        this.TextChanged.emit({
          Titel: this.Titel,
          Text: Value.currentValue,
          Valid: this.Valid
        });
      }
      this.DisabledBorder = Border + 'px solid ' + this.DisabledColor;
      this.OkBorder = Border + 'px solid ' + this.OkBorderColor;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Input Clone', 'ngOnChanges', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: tools_1.ToolsProvider
  }];
  static propDecorators = {
    Titel: [{
      type: core_1.Input
    }],
    Titelcolor: [{
      type: core_1.Input
    }],
    Value: [{
      type: core_1.Input
    }],
    Debouncetime: [{
      type: core_1.Input
    }],
    ValueChange: [{
      type: core_1.Output
    }],
    MinLength: [{
      type: core_1.Input
    }],
    MaxLength: [{
      type: core_1.Input
    }],
    Enabled: [{
      type: core_1.Input
    }],
    Clickable: [{
      type: core_1.Input
    }],
    MinHeight: [{
      type: core_1.Input
    }],
    Inputtype: [{
      type: core_1.Input
    }],
    Required: [{
      type: core_1.Input
    }],
    Lines: [{
      type: core_1.Input
    }],
    DisabledColor: [{
      type: core_1.Input
    }],
    OkBorderColor: [{
      type: core_1.Input
    }],
    ParseToFloat: [{
      type: core_1.Input
    }],
    Textcolor: [{
      type: core_1.Input
    }],
    Textsize: [{
      type: core_1.Input
    }],
    Einheit: [{
      type: core_1.Input
    }],
    TextChanged: [{
      type: core_1.Output
    }]
  };
};
exports.InputCloneComponent = InputCloneComponent;
exports.InputCloneComponent = InputCloneComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'input-clone',
  template: __webpack_require__(/*! ./input-clone.component.html?ngResource */ 38620),
  styles: [__webpack_require__(/*! ./input-clone.component.scss?ngResource */ 25196)]
})], InputCloneComponent);

/***/ }),

/***/ 33780:
/*!**************************************************************!*\
  !*** ./src/app/components/input-clone/input-clone.module.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.InputCloneModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const input_clone_component_1 = __webpack_require__(/*! ./input-clone.component */ 38056);
let InputCloneModule = class InputCloneModule {};
exports.InputCloneModule = InputCloneModule;
exports.InputCloneModule = InputCloneModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [input_clone_component_1.InputCloneComponent],
  exports: [input_clone_component_1.InputCloneComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule],
  providers: []
})], InputCloneModule);

/***/ }),

/***/ 90520:
/*!**************************************************************!*\
  !*** ./src/app/components/page-footer/page-footer.module.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PageFooterModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const page_footer_1 = __webpack_require__(/*! ./page-footer */ 29856);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
let PageFooterModule = class PageFooterModule {};
exports.PageFooterModule = PageFooterModule;
exports.PageFooterModule = PageFooterModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [page_footer_1.PageFooterComponent],
  exports: [page_footer_1.PageFooterComponent],
  imports: [angular_1.IonicModule, common_1.CommonModule],
  providers: []
})], PageFooterModule);

/***/ }),

/***/ 29856:
/*!*******************************************************!*\
  !*** ./src/app/components/page-footer/page-footer.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PageFooterComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
let PageFooterComponent = class PageFooterComponent {
  Const;
  Debug;
  Basics;
  PageFooterFrameDiv;
  MaxFooterhoehe;
  constructor(Const, Debug, Basics) {
    this.Const = Const;
    this.Debug = Debug;
    this.Basics = Basics;
  }
  ngOnInit() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Footer', 'ngOnInit', this.Debug.Typen.Component);
    }
  }
  InitMaximalhoehe() {
    try {
      this.MaxFooterhoehe = this.PageFooterFrameDiv.nativeElement.clientHeight;
      return this.MaxFooterhoehe;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Footer', 'InitMaximalhoehe', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: const_1.ConstProvider
  }, {
    type: debug_1.DebugProvider
  }, {
    type: basics_1.BasicsProvider
  }];
  static propDecorators = {
    PageFooterFrameDiv: [{
      type: core_1.ViewChild,
      args: ['PageFooterFrameDiv', {
        read: core_1.ElementRef,
        static: true
      }]
    }]
  };
};
exports.PageFooterComponent = PageFooterComponent;
exports.PageFooterComponent = PageFooterComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'page-footer',
  template: __webpack_require__(/*! ./page-footer.html?ngResource */ 27888),
  styles: [__webpack_require__(/*! ./page-footer.scss?ngResource */ 82868)]
})], PageFooterComponent);

/***/ }),

/***/ 89300:
/*!****************************************************************************!*\
  !*** ./src/app/components/page-header-center/page-header-center.module.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PageHeaderCenterModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const page_header_center_1 = __webpack_require__(/*! ./page-header-center */ 9348);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
let PageHeaderCenterModule = class PageHeaderCenterModule {};
exports.PageHeaderCenterModule = PageHeaderCenterModule;
exports.PageHeaderCenterModule = PageHeaderCenterModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [page_header_center_1.PageHeaderCenterComponent],
  exports: [page_header_center_1.PageHeaderCenterComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule],
  providers: []
})], PageHeaderCenterModule);

/***/ }),

/***/ 9348:
/*!*********************************************************************!*\
  !*** ./src/app/components/page-header-center/page-header-center.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PageHeaderCenterComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
let PageHeaderCenterComponent = class PageHeaderCenterComponent {
  Debug;
  Basics;
  Const;
  menuCtrl;
  PageHeaderDiv;
  constructor(Debug, Basics, Const, menuCtrl) {
    this.Debug = Debug;
    this.Basics = Basics;
    this.Const = Const;
    this.menuCtrl = menuCtrl;
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header', 'Construktor', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header', 'ngOnInit', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: angular_1.MenuController
  }];
  static propDecorators = {
    PageHeaderDiv: [{
      type: core_1.ViewChild,
      args: ['PageHeaderDiv', {
        read: core_1.ElementRef,
        static: true
      }]
    }]
  };
};
exports.PageHeaderCenterComponent = PageHeaderCenterComponent;
exports.PageHeaderCenterComponent = PageHeaderCenterComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'page-header-center',
  template: __webpack_require__(/*! ./page-header-center.html?ngResource */ 8728),
  styles: [__webpack_require__(/*! ./page-header-center.scss?ngResource */ 78920)]
})], PageHeaderCenterComponent);

/***/ }),

/***/ 63792:
/*!***************************************************************************!*\
  !*** ./src/app/components/page-header-menu/page-header-menu.component.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PageHeaderMenuComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const menue_service_1 = __webpack_require__(/*! ../../services/menue/menue.service */ 59460);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 22848);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 48044);
const database_authentication_service_1 = __webpack_require__(/*! ../../services/database-authentication/database-authentication.service */ 97092);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ../../services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 15024);
const graph_1 = __webpack_require__(/*! ../../services/graph/graph */ 8608);
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
let PageHeaderMenuComponent = class PageHeaderMenuComponent {
  Debug;
  Basics;
  Const;
  DBMitarbeiter;
  DBMitarbeitersettings;
  Auswahlservice;
  DBStandort;
  DBUrlaub;
  GraphService;
  AuthService;
  Pool;
  Menuservice;
  Suchleiste;
  Suchleiste2;
  Sucheiste3;
  ShowSandortfilter;
  ShowSuchleiste;
  Filterorigin;
  ShowStandorttitle;
  ShowMitarbeitertitle;
  ShowProjektetitle;
  ShowFavoritentitle;
  SendFestlegungenEnabled;
  Timelineindex;
  SucheChanged = new core_1.EventEmitter();
  StandortfilterClicked = new core_1.EventEmitter();
  ZeitspanneFilterClicked = new core_1.EventEmitter();
  LeistungsphaseFilterClicked = new core_1.EventEmitter();
  FilterChanged = new core_1.EventEmitter();
  ShowProjektauswahlEvent = new core_1.EventEmitter();
  ShowProjektfilesEvent = new core_1.EventEmitter();
  LOPListeZeitspanneEvent = new core_1.EventEmitter();
  ShowOpenFestlegungOnlyEvent = new core_1.EventEmitter();
  SendFestlegungenClicked = new core_1.EventEmitter();
  ShowUngelesenOnlyChanged = new core_1.EventEmitter();
  ProjektsortierungChanged = new core_1.EventEmitter();
  EmailDatumChanged = new core_1.EventEmitter();
  PlanungsmatrixLeistungsphaseClicked = new core_1.EventEmitter();
  ShowLOPListeInfoeintraegeChanged = new core_1.EventEmitter();
  ExpandFestlegungeEvent = new core_1.EventEmitter();
  UrlaubMitarbeiterClicked = new core_1.EventEmitter();
  UrlaubMitarbeiterMeClicked = new core_1.EventEmitter();
  JahrButtonClicked = new core_1.EventEmitter();
  SuchleisteInputSubscription;
  Suchleiste2InputSubscription;
  SuchleisteClearSubscription;
  Suchleiste2ClearSubscription;
  FavoritenSubscription;
  Inputtimer;
  Projektauswahlbreite;
  Wochentaghoehe;
  Tagbreite;
  HomeMouseOver;
  EmailMouseOver;
  FilesMouseOver;
  ShowOpenFestlegungOnly;
  BackMouseOver;
  Timelinebreite;
  LogoutMouseOver;
  JahrMouseOver;
  constructor(Debug, Basics, Const, DBMitarbeiter, DBMitarbeitersettings, Auswahlservice, DBStandort, DBUrlaub, GraphService, AuthService, Pool, Menuservice) {
    this.Debug = Debug;
    this.Basics = Basics;
    this.Const = Const;
    this.DBMitarbeiter = DBMitarbeiter;
    this.DBMitarbeitersettings = DBMitarbeitersettings;
    this.Auswahlservice = Auswahlservice;
    this.DBStandort = DBStandort;
    this.DBUrlaub = DBUrlaub;
    this.GraphService = GraphService;
    this.AuthService = AuthService;
    this.Pool = Pool;
    this.Menuservice = Menuservice;
    try {
      this.ShowSuchleiste = false;
      this.SuchleisteClearSubscription = null;
      this.Suchleiste2ClearSubscription = null;
      this.SuchleisteInputSubscription = null;
      this.Suchleiste2InputSubscription = null;
      this.FavoritenSubscription = null;
      this.Inputtimer = null;
      this.ShowSandortfilter = false;
      this.Projektauswahlbreite = 200;
      this.Filterorigin = this.Const.NONE;
      this.Wochentaghoehe = 30;
      this.Tagbreite = 0;
      this.Timelinebreite = 40;
      this.HomeMouseOver = false;
      this.EmailMouseOver = false;
      this.ShowStandorttitle = false;
      this.ShowMitarbeitertitle = false;
      this.ShowProjektetitle = false;
      this.ShowFavoritentitle = false;
      this.FilesMouseOver = false;
      this.ShowOpenFestlegungOnly = false;
      this.SendFestlegungenEnabled = false;
      this.BackMouseOver = false;
      this.LogoutMouseOver = false;
      this.JahrMouseOver = false;
      this.Timelineindex = 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'consturctor', this.Debug.Typen.Component);
    }
  }
  LogoutButtonClicked() {
    try {
      this.Pool.ProjektdatenLoaded = false;
      this.AuthService.Logout();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'LogoutButtonClicked', this.Debug.Typen.Component);
    }
  }
  ngOnDestroy() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'OnDestroy', this.Debug.Typen.Component);
    }
  }
  BackButtonClicked() {
    try {
      this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Projekte;
      this.Menuservice.SetCurrentPage();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'BackButtonClicked', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {
      this.Projektauswahlbreite = this.Basics.Contentbreite - 630;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'OnInit', this.Debug.Typen.Component);
    }
  }
  ngAfterViewInit() {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        _this.Tagbreite = (_this.Basics.Contentbreite - 4 - _this.Timelinebreite) / 5;
        /*
               let Text: string;
         
        let test = this.Sucheiste3;
         
               if(this.Suchleiste) { // Muss hier stehen / funktioniert in OnInit() nicht
                 this.SuchleisteInputSubscription = this.Suchleiste.ionInput.subscribe((data: any) => {
                   debugger;
                   Text = data.target.value;
                   if(this.Inputtimer !== null) {
                     window.clearTimeout(this.Inputtimer);
                     this.Inputtimer = null;
            }
                   if(Text.length >= 3 || Text.length === 0) {
                     this.Inputtimer = window.setTimeout(()  => {
                       this.SucheChanged.emit(Text);
                     }, 600);
            }
                 });
                 this.SuchleisteClearSubscription = this.Suchleiste.ionClear.subscribe(() => {
                   this.SucheChanged.emit('');
          });
         
        }
        else this.Suchleiste = null;
               if(this.Suchleiste2) { // Muss hier stehen / funktioniert in OnInit() nicht
                 this.Suchleiste2InputSubscription = this.Suchleiste2.ionInput.subscribe((data: any) => {
                   debugger;
                   Text = data.target.value;
                   if(this.Inputtimer !== null) {
                     window.clearTimeout(this.Inputtimer);
                     this.Inputtimer = null;
            }
                   if(Text.length >= 3 || Text.length === 0) {
                     this.Inputtimer = window.setTimeout(()  => {
                       this.SucheChanged.emit(Text);
                     }, 600);
            }
                 });
                 this.Suchleiste2ClearSubscription = this.Suchleiste2.ionClear.subscribe(() => {
                   this.SucheChanged.emit('');
          });
         
        }
        else this.Suchleiste2 = null;
         
         */
      } catch (error) {
        _this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'ngAfterViewInit', _this.Debug.Typen.Component);
      }
    })();
  }
  MainMenueButtonClicked(mainmenubereich) {
    try {
      this.Menuservice.MainMenuebereich = mainmenubereich;
      this.Menuservice.SetCurrentPage();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'MainMenueButtonClicked', this.Debug.Typen.Component);
    }
  }
  FirmaMenueButtonClicked(firmamenubereich) {
    try {
      this.Menuservice.FirmaMenuebereich = firmamenubereich;
      this.Menuservice.SetCurrentPage();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'FirmaMenueButtonClicked', this.Debug.Typen.Component);
    }
  }
  ProjekteMenueButtonClicked(projektmenubereich) {
    try {
      this.Menuservice.ProjekteMenuebereich = projektmenubereich;
      switch (this.Menuservice.ProjekteMenuebereich) {
        case this.Menuservice.ProjekteMenuebereiche.Aufgabenliste:
          this.Menuservice.Aufgabenlisteansicht = this.Menuservice.Aufgabenlisteansichten.Projekt;
          break;
        default:
          break;
      }
      this.Menuservice.SetCurrentPage();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'ProjekteMenueButtonClicked', this.Debug.Typen.Component);
    }
  }
  UrlaubMenueButtonClicked(urlaubmenubereich) {
    try {
      this.Menuservice.UrlaubMenuebereich = urlaubmenubereich;
      switch (this.Menuservice.UrlaubMenuebereich) {
        case this.Menuservice.ProjekteMenuebereiche.Aufgabenliste:
          this.Menuservice.Aufgabenlisteansicht = this.Menuservice.Aufgabenlisteansichten.Projekt;
          break;
        default:
          break;
      }
      this.Menuservice.SetCurrentPage();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'ProjekteMenueButtonClicked', this.Debug.Typen.Component);
    }
  }
  GetProjekteMenueIconcolor(projektemenubereich) {
    try {
      return projektemenubereich === this.Menuservice.ProjekteMenuebereich ? 'schwarz' : 'weiss';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'GetProjekteMenueIconcolor', this.Debug.Typen.Component);
    }
  }
  GetProjekteMenueFontcolor(projektemenubereich) {
    try {
      return projektemenubereich === this.Menuservice.ProjekteMenuebereich ? '#000000' : 'white';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'GetProjekteMenueIconcolor', this.Debug.Typen.Component);
    }
  }
  GetUrlaubMenueIconcolor(urlaubmenubereich) {
    try {
      return urlaubmenubereich === this.Menuservice.UrlaubMenuebereich ? 'schwarz' : 'weiss';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'GetUrlaubMenueIconcolor', this.Debug.Typen.Component);
    }
  }
  GetUrlaubMenueFontcolor(urlaubmenubereich) {
    try {
      return urlaubmenubereich === this.Menuservice.UrlaubMenuebereich ? '#000000' : 'white';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'GetUrlaubMenueFontcolor', this.Debug.Typen.Component);
    }
  }
  StandortButtonClicked() {
    try {
      this.StandortfilterClicked.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'StandortButtonClicked', this.Debug.Typen.Component);
    }
  }
  ZeitspaneClickedHandler(origin) {
    try {
      this.ZeitspanneFilterClicked.emit(origin);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'ZeitspaneClickedHandler', this.Debug.Typen.Component);
    }
  }
  LeistungsphaseClickedHandler() {
    try {
      this.LeistungsphaseFilterClicked.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'LeistungsphaseClickedHandler', this.Debug.Typen.Component);
    }
  }
  /*
     public GetAufgabenansicht(): Aufgabenansichtstruktur {
       try {
         let Aufgabenansicht: Aufgabenansichtstruktur = this.Pool.GetAufgabenansichten(this.DBProjekte.CurrentProjekt !== null ? this.DBProjekte.CurrentProjekt._id : null);
         return null; Aufgabenansicht;
       } catch (error) {
         this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'GetAufgabenansicht', this.Debug.Typen.Component);
    }
  }
      */
  /*
     StatusFilterChanged(event: any, Statusname: string) {
       try {
         let status = event.status;
         let Aufgabenansicht: Aufgabenansichtstruktur = this.Pool.GetAufgabenansichten(this.DBProjekte.CurrentProjekt !== null ? this.DBProjekte.CurrentProjekt._id : null);
         switch (Statusname) {
           case 'Bilder':
             Aufgabenansicht.AufgabenShowBilder = status;
             break;
           case this.Const.Projektpunktstatustypen.Offen.Name:
             Aufgabenansicht.AufgabenShowOffen = status;
             break;
           case this.Const.Projektpunktstatustypen.Geschlossen.Name:
             Aufgabenansicht.AufgabenShowGeschlossen= status;
             break;
           case this.Const.Projektpunktstatustypen.Bearbeitung.Name:
             Aufgabenansicht.AufgabenShowBearbeitung = status;
             break;
           case this.Const.Projektpunktstatustypen.Ruecklauf.Name:
             Aufgabenansicht.AufgabenShowRuecklauf = status;
             break;
           case 'Meilenstein':
             Aufgabenansicht.AufgabenShowMeilensteinOnly = status;
             break;
      }
         this.DBMitarbeitersettings.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings, Aufgabenansicht).then(() => {
           this.FilterChanged.emit(Statusname);
         }).catch((error: HttpErrorResponse) => {
           this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'StatusFilterChanged', this.Debug.Typen.Component);
      });
       } catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'StatusFilterChanged', this.Debug.Typen.Component);
    }
  }
      */
  StatusFilterShowFaelligOnlyChanged(event) {
    try {
      // this.DBProjekte.CurrentProjekt.Aufgabenlistefilter.FilterShowFaelligOnly = event.status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'StatusFilterShowFaelligOnlyChanged', this.Debug.Typen.Component);
    }
  }
  GetZeitfilterButtontext() {
    try {
      switch (this.Filterorigin) {
        case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Zeitfilter:
          switch (this.Pool.Mitarbeitersettings.AufgabenTerminfiltervariante) {
            case this.Const.Faelligkeitsterminfiltervarianten.Seit_dem_Zeitpunkt:
              return 'Seit dem Zeitpunkt';
              break;
            case this.Const.Faelligkeitsterminfiltervarianten.Bis_zum_Zeitpunkt:
              return 'Bis zum Zeitpunkt';
              break;
            case this.Const.Faelligkeitsterminfiltervarianten.Zeitspanne:
              return 'Zeitspanne';
              break;
            case this.Const.Faelligkeitsterminfiltervarianten.Nur_diesen_Monat:
              return 'Monat';
              break;
            case this.Const.Faelligkeitsterminfiltervarianten.Nur_diese_Woche:
              return 'Woche';
              break;
            default:
              return 'Zeitfilter';
              break;
          }
          break;
        default:
          return 'Zeitfilter';
          break;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'GetZeitfilterButtontext', this.Debug.Typen.Component);
    }
  }
  GetZeitfilterButtonwert() {
    try {
      let Starttag;
      let Endetag;
      let Text = '';
      if (this.Pool.Mitarbeitersettings !== null) {
        switch (this.Filterorigin) {
          case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Zeitfilter:
            switch (this.Pool.Mitarbeitersettings.AufgabenTerminfiltervariante) {
              case this.Const.Faelligkeitsterminfiltervarianten.Seit_dem_Zeitpunkt:
                if (this.Pool.Mitarbeitersettings.AufgabenTerminfilterStartwert !== null) {
                  Starttag = (0, moment_1.default)(this.Pool.Mitarbeitersettings.AufgabenTerminfilterStartwert);
                  return Starttag.format('DD.MM.YYYY');
                } else return 'Unbekannt';
                break;
              case this.Const.Faelligkeitsterminfiltervarianten.Bis_zum_Zeitpunkt:
                if (this.Pool.Mitarbeitersettings.AufgabenTerminfilterEndewert !== null) {
                  Endetag = (0, moment_1.default)(this.Pool.Mitarbeitersettings.AufgabenTerminfilterEndewert);
                  return Endetag.format('DD.MM.YYYY');
                } else return 'Unbekannt';
                break;
              case this.Const.Faelligkeitsterminfiltervarianten.Zeitspanne:
                if (this.Pool.Mitarbeitersettings.AufgabenTerminfilterStartwert !== null) {
                  Starttag = (0, moment_1.default)(this.Pool.Mitarbeitersettings.AufgabenTerminfilterStartwert);
                  Text += Starttag.format('DD.MM.YYYY');
                } else Text += 'Unbekannt';
                Text += ' - ';
                if (this.Pool.Mitarbeitersettings.AufgabenTerminfilterEndewert !== null) {
                  Endetag = (0, moment_1.default)(this.Pool.Mitarbeitersettings.AufgabenTerminfilterEndewert);
                  Text += Endetag.format('DD.MM.YYYY');
                } else Text += 'Unbekannt';
                return Text;
                break;
              case this.Const.Faelligkeitsterminfiltervarianten.Nur_diesen_Monat:
                return 'Unbekannt';
                break;
              case this.Const.Faelligkeitsterminfiltervarianten.Nur_diese_Woche:
                return 'Unbekannt';
                break;
              default:
                return 'kein Filter';
                break;
            }
            break;
          default:
            return 'Zeitfilter';
            break;
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header Menu', 'GetZeitfilterButtonwert', this.Debug.Typen.Component);
    }
  }
  MeintagClicked() {
    try {
      this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Aufgabenliste;
      this.Menuservice.Aufgabenlisteansicht = this.Menuservice.Aufgabenlisteansichten.Mein_Tag;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'MeintagClicked', this.Debug.Typen.Component);
    }
  }
  MeineWocheClicked() {
    try {
      this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Aufgabenliste;
      this.Menuservice.Aufgabenlisteansicht = this.Menuservice.Aufgabenlisteansichten.Meine_Woche;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'MeineWocheClicked', this.Debug.Typen.Component);
    }
  }
  MeilensteineClicked() {
    try {
      this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Aufgabenliste;
      this.Menuservice.Aufgabenlisteansicht = this.Menuservice.Aufgabenlisteansichten.Meilensteine;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'MeilensteineClicked', this.Debug.Typen.Component);
    }
  }
  ProjektClicked() {
    try {
      if (this.Menuservice.Aufgabenlisteansicht !== this.Menuservice.Aufgabenlisteansichten.Projekt) {
        this.Menuservice.Aufgabenlisteansicht = this.Menuservice.Aufgabenlisteansichten.Projekt;
      } else {
        this.ShowProjektauswahlEvent.emit();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'ProjektClicked', this.Debug.Typen.Component);
    }
  }
  /*
     ProjektGoBackClicked() {
       try {
         let Aufgabenansichten: Aufgabenansichtstruktur;
         if(this.DBProjekte.CurrentProjektindex > 0) {
           this.DBProjekte.CurrentProjektindex--;
           this.DBProjekte.CurrentProjekt                    = this.DBProjekte.Projektliste[this.DBProjekte.CurrentProjektindex];
        this.Pool.Mitarbeitersettings.Favoritprojektindex = this.DBProjekte.CurrentProjektindex;
        this.Pool.Mitarbeitersettings.ProjektID           = this.DBProjekte.CurrentProjekt._id;
           Aufgabenansichten = this.Pool.GetAufgabenansichten(this.DBProjekte.CurrentProjekt._id);
           this.DBMitarbeitersettings.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings, Aufgabenansichten);
           this.DBProjekte.CurrentFavoritenProjektChanged.emit();
      }
       } catch (error) {
         this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'ProjektGoBackClicked', this.Debug.Typen.Component);
    }
  }
      */
  /*
     ProjektGoForwardClicked() {
       try {
         let Aufgabenansichten: Aufgabenansichtstruktur;
         if(this.DBProjekte.CurrentProjektindex < this.DBProjekte.Projektliste.length - 1) {
           this.DBProjekte.CurrentProjektindex++;
        this.DBProjekte.CurrentProjekt = this.DBProjekte.Projektliste[this.DBProjekte.CurrentProjektindex];
           this.Pool.Mitarbeitersettings.Favoritprojektindex = this.DBProjekte.CurrentProjektindex;
        this.Pool.Mitarbeitersettings.ProjektID           = this.DBProjekte.CurrentProjekt._id;
   
        Aufgabenansichten = this.Pool.GetAufgabenansichten(this.DBProjekte.CurrentProjekt._id);
           this.DBMitarbeitersettings.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings, Aufgabenansichten);
           this.DBProjekte.CurrentFavoritenProjektChanged.emit();
      }
       } catch (error) {
         this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'ProjektGoForwardClicked', this.Debug.Typen.Component);
    }
  }
      */
  /*
     GetProjektBackButtoncolor(): string {
       try {
         if(this.Menuservice.Aufgabenlisteansicht === this.Menuservice.Aufgabenlisteansichten.Projekt && this.DBProjekte.CurrentProjektindex > 0) {
           return 'grau';
      }
      else {
           return 'silber';
      }
    } catch (error) {
         this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'GetProjektBackButtoncolor', this.Debug.Typen.Component);
    }
  }
      */
  /*
  GetProjektForwardButtoncolor(): string {
       try {
         if(this.Menuservice.Aufgabenlisteansicht === this.Menuservice.Aufgabenlisteansichten.Projekt && this.DBProjekte.CurrentProjektindex < this.DBProjekte.Projektliste.length - 1) {
           return 'grau';
      }
      else {
           return 'silver';
      }
    } catch (error) {
         this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'GetProjektForwardButtoncolor', this.Debug.Typen.Component);
    }
  }
   
   */
  ProjektfilesClicked() {
    try {
      this.GraphService.FilebrowserModus = this.GraphService.FilebrowserModusvarianten.Current_Projekt;
      this.ShowProjektfilesEvent.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'ProjektfilesClicked', this.Debug.Typen.Component);
    }
  }
  /*
     GetKostengruppenname(id: string): string {
       try {
         let Kategorie: Festlegungskategoriestruktur;
         if(this.DBProjekte.CurrentProjekt !== null && this.Pool.Mitarbeitersettings !== null) {
           Kategorie = lodash.find(this.Pool.Festlegungskategorienliste[this.DBProjekte.CurrentProjekt.Projektkey], (Eintrag: Festlegungskategoriestruktur) => {
             return Eintrag.Unterkostengruppe === this.Pool.Mitarbeitersettings.UnterkostengruppeFilter &&
                 Eintrag.Hauptkostengruppe === this.Pool.Mitarbeitersettings.HauptkostengruppeFilter &&
                 Eintrag.Oberkostengruppe  === this.Pool.Mitarbeitersettings.OberkostengruppeFilter;
        });
           if(!lodash.isUndefined(Kategorie)) {
             return Kategorie.Kostengruppennummer + ' ' + Kategorie.Beschreibung;
        }
        else {
             return 'Alle';
           }
      }
      else {
           return 'Alle';
      }
    } catch (error) {
         this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'GetKostengruppenname', this.Debug.Typen.Component);
    }
  }
      */
  ShowOpenFestlegungOnlyChanged(event) {
    try {
      this.ShowOpenFestlegungOnly = event.status;
      this.ShowOpenFestlegungOnlyEvent.emit(event.status);
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'ShowOpenFestlegungOnlyChanged', this.Debug.Typen.Component);
    }
  }
  GetDatumtext(tag) {
    try {
      let Heute = (0, moment_1.default)().locale('de');
      let Montag = Heute.clone().startOf('isoWeek');
      switch (tag) {
        case 'Montag':
          return Montag.format('DD.MM.');
          break;
        case 'Dienstag':
          return Montag.clone().add(1, 'day').format('DD.MM.');
          break;
        case 'Mittwoch':
          return Montag.clone().add(2, 'day').format('DD.MM.');
          break;
        case 'Donnerstag':
          return Montag.clone().add(3, 'day').format('DD.MM.');
          break;
        case 'Freitag':
          return Montag.clone().add(4, 'day').format('DD.MM.');
          break;
      }
      return '';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'GetDatumtext', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
  }, {
    type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService
  }, {
    type: auswahl_dialog_service_1.AuswahlDialogService
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: graph_1.Graphservice
  }, {
    type: database_authentication_service_1.DatabaseAuthenticationService
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: menue_service_1.MenueService
  }];
  static propDecorators = {
    Suchleiste: [{
      type: core_1.ViewChild,
      args: ['Suchleiste', {
        static: false
      }]
    }],
    Suchleiste2: [{
      type: core_1.ViewChild,
      args: ['Suchleiste2', {
        static: false
      }]
    }],
    Sucheiste3: [{
      type: core_1.ViewChildren,
      args: ['ion-searchbar']
    }],
    ShowSandortfilter: [{
      type: core_1.Input
    }],
    ShowSuchleiste: [{
      type: core_1.Input
    }],
    Filterorigin: [{
      type: core_1.Input
    }],
    ShowStandorttitle: [{
      type: core_1.Input
    }],
    ShowMitarbeitertitle: [{
      type: core_1.Input
    }],
    ShowProjektetitle: [{
      type: core_1.Input
    }],
    ShowFavoritentitle: [{
      type: core_1.Input
    }],
    SendFestlegungenEnabled: [{
      type: core_1.Input
    }],
    Timelineindex: [{
      type: core_1.Input
    }],
    SucheChanged: [{
      type: core_1.Output
    }],
    StandortfilterClicked: [{
      type: core_1.Output
    }],
    ZeitspanneFilterClicked: [{
      type: core_1.Output
    }],
    LeistungsphaseFilterClicked: [{
      type: core_1.Output
    }],
    FilterChanged: [{
      type: core_1.Output
    }],
    ShowProjektauswahlEvent: [{
      type: core_1.Output
    }],
    ShowProjektfilesEvent: [{
      type: core_1.Output
    }],
    LOPListeZeitspanneEvent: [{
      type: core_1.Output
    }],
    ShowOpenFestlegungOnlyEvent: [{
      type: core_1.Output
    }],
    SendFestlegungenClicked: [{
      type: core_1.Output
    }],
    ShowUngelesenOnlyChanged: [{
      type: core_1.Output
    }],
    ProjektsortierungChanged: [{
      type: core_1.Output
    }],
    EmailDatumChanged: [{
      type: core_1.Output
    }],
    PlanungsmatrixLeistungsphaseClicked: [{
      type: core_1.Output
    }],
    ShowLOPListeInfoeintraegeChanged: [{
      type: core_1.Output
    }],
    ExpandFestlegungeEvent: [{
      type: core_1.Output
    }],
    UrlaubMitarbeiterClicked: [{
      type: core_1.Output
    }],
    UrlaubMitarbeiterMeClicked: [{
      type: core_1.Output
    }],
    JahrButtonClicked: [{
      type: core_1.Output
    }]
  };
};
exports.PageHeaderMenuComponent = PageHeaderMenuComponent;
exports.PageHeaderMenuComponent = PageHeaderMenuComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'page-header-menu',
  template: __webpack_require__(/*! ./page-header-menu.component.html?ngResource */ 2828),
  styles: [__webpack_require__(/*! ./page-header-menu.component.scss?ngResource */ 49732)]
})], PageHeaderMenuComponent);

/***/ }),

/***/ 6168:
/*!************************************************************************!*\
  !*** ./src/app/components/page-header-menu/page-header-menu.module.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PageHeaderMenuModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const page_header_menu_component_1 = __webpack_require__(/*! ../page-header-menu/page-header-menu.component */ 63792);
const button_value_module_1 = __webpack_require__(/*! ../button-value/button-value.module */ 72284);
const checkbox_clon_module_1 = __webpack_require__(/*! ../checkbox-clon/checkbox-clon.module */ 7388);
const button_value_date_module_1 = __webpack_require__(/*! ../button-value-date/button-value-date.module */ 22844);
let PageHeaderMenuModule = class PageHeaderMenuModule {};
exports.PageHeaderMenuModule = PageHeaderMenuModule;
exports.PageHeaderMenuModule = PageHeaderMenuModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [page_header_menu_component_1.PageHeaderMenuComponent],
  exports: [page_header_menu_component_1.PageHeaderMenuComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule, button_value_module_1.ButtonValueModule, checkbox_clon_module_1.CheckboxClonModule, button_value_date_module_1.ButtonValueDateModule],
  providers: []
})], PageHeaderMenuModule);

/***/ }),

/***/ 70216:
/*!**************************************************************!*\
  !*** ./src/app/components/page-header/page-header.module.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PageHeaderModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const page_header_1 = __webpack_require__(/*! ./page-header */ 90212);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
let PageHeaderModule = class PageHeaderModule {};
exports.PageHeaderModule = PageHeaderModule;
exports.PageHeaderModule = PageHeaderModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [page_header_1.PageHeaderComponent],
  exports: [page_header_1.PageHeaderComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule],
  providers: []
})], PageHeaderModule);

/***/ }),

/***/ 90212:
/*!*******************************************************!*\
  !*** ./src/app/components/page-header/page-header.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PageHeaderComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
let PageHeaderComponent = class PageHeaderComponent {
  Debug;
  Basics;
  Pool;
  Const;
  PageHeaderDiv;
  ProgressMessage;
  constructor(Debug, Basics, Pool, Const) {
    this.Debug = Debug;
    this.Basics = Basics;
    this.Pool = Pool;
    this.Const = Const;
    try {
      this.ProgressMessage = 'Stammdaten werden geladen werden geladen';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header', 'Construktor', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Header', 'ngOnInit', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: const_1.ConstProvider
  }];
  static propDecorators = {
    PageHeaderDiv: [{
      type: core_1.ViewChild,
      args: ['PageHeaderDiv', {
        read: core_1.ElementRef,
        static: true
      }]
    }],
    ProgressMessage: [{
      type: core_1.Input
    }]
  };
};
exports.PageHeaderComponent = PageHeaderComponent;
exports.PageHeaderComponent = PageHeaderComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'page-header',
  template: __webpack_require__(/*! ./page-header.html?ngResource */ 8756),
  styles: [__webpack_require__(/*! ./page-header.scss?ngResource */ 23804)]
})], PageHeaderComponent);

/***/ }),

/***/ 3551:
/*!*****************************************************************************!*\
  !*** ./src/app/components/page-modal-keeper/page-modal-keeper.component.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PageModalKeeperComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
let PageModalKeeperComponent = class PageModalKeeperComponent {
  Debug;
  Const;
  Basics;
  DBStandort;
  CancelClickedEvent = new core_1.EventEmitter();
  StandortfilterClickedEvent = new core_1.EventEmitter();
  OkClickedEvent = new core_1.EventEmitter();
  Titel;
  Iconname;
  Dialogbreite;
  Dialoghoehe;
  OkButtonEneabled;
  ShowSandortfilter;
  PositionY;
  /*
  @Input()  DialogVisible: boolean;
  @Output() DialogVisibleChange = new EventEmitter<boolean>();
      */
  constructor(Debug, Const, Basics, DBStandort) {
    this.Debug = Debug;
    this.Const = Const;
    this.Basics = Basics;
    this.DBStandort = DBStandort;
    try {
      this.Titel = this.Const.NONE;
      this.Iconname = 'help-circle-outline';
      // this.DialogVisible     = false;
      this.Dialogbreite = 400;
      this.Dialoghoehe = 300;
      this.OkButtonEneabled = true;
      this.ShowSandortfilter = true;
      this.PositionY = 100;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Modal Keeper', 'consturctor', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Modal Keeper', 'OnInit', this.Debug.Typen.Component);
    }
  }
  CancelButtonClicked() {
    this.CancelClickedEvent.emit();
    // this.DialogVisibleChange.emit(false);
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Modal Keeper', 'CancelButtonClicked', this.Debug.Typen.Component);
    }
  }
  OkButtonClicked() {
    this.OkClickedEvent.emit();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Modal Keeper', 'OkButtonClicked', this.Debug.Typen.Component);
    }
  }
  ContentClicked(event) {
    event.preventDefault();
    event.stopPropagation();
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Modal Keeper', 'ContentClicked', this.Debug.Typen.Component);
    }
  }
  StandortfilterButtonClicked() {
    try {
      this.StandortfilterClickedEvent.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Page Modal Keeper', 'StandortfilterButtonClicked', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }];
  static propDecorators = {
    CancelClickedEvent: [{
      type: core_1.Output
    }],
    StandortfilterClickedEvent: [{
      type: core_1.Output
    }],
    OkClickedEvent: [{
      type: core_1.Output
    }],
    Titel: [{
      type: core_1.Input
    }],
    Iconname: [{
      type: core_1.Input
    }],
    Dialogbreite: [{
      type: core_1.Input
    }],
    Dialoghoehe: [{
      type: core_1.Input
    }],
    OkButtonEneabled: [{
      type: core_1.Input
    }],
    ShowSandortfilter: [{
      type: core_1.Input
    }],
    PositionY: [{
      type: core_1.Input
    }]
  };
};
exports.PageModalKeeperComponent = PageModalKeeperComponent;
exports.PageModalKeeperComponent = PageModalKeeperComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'page-modal-keeper',
  template: __webpack_require__(/*! ./page-modal-keeper.component.html?ngResource */ 1724),
  styles: [__webpack_require__(/*! ./page-modal-keeper.component.scss?ngResource */ 23340)]
})], PageModalKeeperComponent);

/***/ }),

/***/ 54588:
/*!**************************************************************************!*\
  !*** ./src/app/components/page-modal-keeper/page-modal-keeper.module.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PageModalKeepermodule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const page_modal_keeper_component_1 = __webpack_require__(/*! ./page-modal-keeper.component */ 3551);
const page_header_module_1 = __webpack_require__(/*! ../page-header/page-header.module */ 70216);
let PageModalKeepermodule = class PageModalKeepermodule {};
exports.PageModalKeepermodule = PageModalKeepermodule;
exports.PageModalKeepermodule = PageModalKeepermodule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [page_modal_keeper_component_1.PageModalKeeperComponent],
  exports: [page_modal_keeper_component_1.PageModalKeeperComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule, page_header_module_1.PageHeaderModule],
  providers: []
})], PageModalKeepermodule);

/***/ }),

/***/ 6232:
/*!****************************************************************************************!*\
  !*** ./src/app/components/pj-urlaubsplanung-kalender/urlausplanung-kalender.module.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UrlausplanungKalenderModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const urlausplanung_kalender_1 = __webpack_require__(/*! ./urlausplanung-kalender */ 77440);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const page_header_center_module_1 = __webpack_require__(/*! ../../components/page-header-center/page-header-center.module */ 89300);
let UrlausplanungKalenderModule = class UrlausplanungKalenderModule {};
exports.UrlausplanungKalenderModule = UrlausplanungKalenderModule;
exports.UrlausplanungKalenderModule = UrlausplanungKalenderModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [urlausplanung_kalender_1.UrlaubsplanungKalenderComponent],
  exports: [urlausplanung_kalender_1.UrlaubsplanungKalenderComponent],
  imports: [common_1.CommonModule, angular_1.IonicModule, forms_1.ReactiveFormsModule, forms_1.FormsModule, page_footer_module_1.PageFooterModule, page_header_center_module_1.PageHeaderCenterModule],
  providers: []
})], UrlausplanungKalenderModule);

/***/ }),

/***/ 77440:
/*!*********************************************************************************!*\
  !*** ./src/app/components/pj-urlaubsplanung-kalender/urlausplanung-kalender.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UrlaubsplanungKalenderComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 21052);
__webpack_require__(/*! moment-duration-format */ 81824);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
let UrlaubsplanungKalenderComponent = class UrlaubsplanungKalenderComponent {
  Debug;
  Basics;
  Pool;
  Displayservice;
  DB;
  Tools;
  Const;
  ShowProtokollpunkte;
  Iconname;
  Dialogbreite;
  Dialoghoehe;
  PositionY;
  ZIndex;
  Monatindex;
  Jahr;
  AddUrlaubRunning;
  AddHomeofficerunning;
  AddHalberUrlaubstagRunning;
  ShowYear;
  FeiertagCrossedEvent = new core_1.EventEmitter();
  FerientagCrossedEvent = new core_1.EventEmitter();
  AddUrlaubFinishedEvent = new core_1.EventEmitter();
  AddHomeofficeFinishedEvent = new core_1.EventEmitter();
  ExternUrlaubstagClickedEvent = new core_1.EventEmitter();
  Kalendertageliste;
  KalendertageExternliste;
  DataSubscription;
  MonateSubscription;
  Monatname;
  ExterneUrlaubSubscription;
  UrlaubStatusSubscription;
  HomeofficeStatusSubscription;
  ExterneHomeofficeSubscription;
  CurrentTagindex;
  CurrentWochenindex;
  CancelUrlaubSubscription;
  UpdateKalenderSubscription;
  constructor(Debug, Basics, Pool, Displayservice, DB, Tools, Const) {
    this.Debug = Debug;
    this.Basics = Basics;
    this.Pool = Pool;
    this.Displayservice = Displayservice;
    this.DB = DB;
    this.Tools = Tools;
    this.Const = Const;
    try {
      this.Dialogbreite = 300;
      this.Dialoghoehe = 400;
      this.Jahr = 2023;
      this.ShowProtokollpunkte = true;
      this.Kalendertageliste = [];
      this.KalendertageExternliste = [];
      this.Monatname = 'none';
      this.AddUrlaubRunning = false;
      this.AddHomeofficerunning = false;
      this.Monatindex = 0;
      this.ShowYear = false;
      this.CurrentWochenindex = null;
      this.CurrentTagindex = null;
      this.Monatname = this.DB.Monateliste[this.Monatindex];
      this.DataSubscription = null;
      this.MonateSubscription = null;
      this.ExterneUrlaubSubscription = null;
      this.UrlaubStatusSubscription = null;
      this.HomeofficeStatusSubscription = null;
      this.ExterneHomeofficeSubscription = null;
      this.CancelUrlaubSubscription = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsplanung Kalender', 'Construktor', this.Debug.Typen.Component);
    }
  }
  ngOnChanges(changes) {
    try {
      let Monatindexvalue = changes.Monatindex;
      let AddHomeofficerunningvalue = changes.AddHomeofficerunning;
      if (!lodash.isUndefined(Monatindexvalue)) {
        this.PrepareData();
      }
      if (!lodash.isUndefined(AddHomeofficerunningvalue)) {
        if (AddHomeofficerunningvalue.firstChange === false && AddHomeofficerunningvalue.previousValue === false && AddHomeofficerunningvalue.currentValue === true) {
          this.DB.CurrentHomeofficecounter = 0;
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Kalender', 'ngOnChanges', this.Debug.Typen.Component);
    }
  }
  PrepareData() {
    try {
      let Tageanzahl;
      let Tagesumme;
      let Tagindex;
      let Tage;
      let Wochenanazahl;
      let Monattext = this.Monatindex + 1;
      let Tag;
      let Startdatum;
      let Endedatum;
      let Datum;
      let Mitarbeiterindex;
      let Datumsicherung;
      let Kalenderewoche;
      let Wochentagnummer;
      this.Monatname = this.DB.Monateliste[this.Monatindex];
      if (Monattext < 10) Monattext = '0' + Monattext.toString();else Monattext = Monattext.toString();
      Tageanzahl = (0, moment_1.default)(this.Jahr.toString() + '-' + Monattext, "YYYY-MM").daysInMonth(); // 31
      Tagesumme = Tageanzahl;
      let MonatStartdatum = (0, moment_1.default)().set({
        date: 1,
        month: this.Monatindex,
        year: this.Jahr,
        hour: 8,
        minute: 0
      }).locale('de');
      let MonatEndedatum = (0, moment_1.default)().set({
        date: Tageanzahl,
        month: this.Monatindex,
        year: this.Jahr,
        hour: 8,
        minute: 0
      }).locale('de');
      Tagindex = MonatStartdatum.isoWeekday();
      Tage = Tagindex - 1;
      Tagesumme = Tagesumme + Tage;
      Startdatum = MonatStartdatum.clone().subtract(Tage, 'day');
      Datum = Startdatum.clone();
      Tagindex = MonatEndedatum.isoWeekday();
      Tage = 7 - Tagindex;
      Tagesumme = Tagesumme + Tage;
      Wochenanazahl = Tagesumme / 7;
      Datumsicherung = Datum.clone();
      this.Kalendertageliste = [];
      for (let wochenindex = 0; wochenindex < Wochenanazahl; wochenindex++) {
        this.Kalendertageliste[wochenindex] = [];
        for (let tagindex = 0; tagindex < 7; tagindex++) {
          Kalenderewoche = Datum.isoWeek();
          Tag = {
            Tagnummer: Datum.date(),
            Tag: Datum.format('dddd'),
            Datumstring: Datum.format('DD.MM.YYYY'),
            Hauptmonat: Datum.isSameOrAfter(MonatStartdatum, 'day') && Datum.isSameOrBefore(MonatEndedatum, 'day'),
            Kalenderwoche: Kalenderewoche,
            Tagstempel: Datum.valueOf(),
            Datum: Datum
          };
          if (lodash.isUndefined(this.DB.Kalenderwochenhoehenliste[Kalenderewoche])) this.DB.Kalenderwochenhoehenliste[Kalenderewoche] = [];
          // Feiertag eintragen
          Tag.IsFeiertag_DE = this.DB.CheckIsFeiertag(Tag, 'DE');
          Tag.IsFeiertag_BG = this.DB.CheckIsFeiertag(Tag, 'BG');
          if (Tag.IsFeiertag_DE) Tag.Feiertagname_DE = this.DB.GetFeiertag(Tag, 'DE').Feiertagname_DE; // 'DE: ' +
          else Tag.Feiertagname_DE = '';
          if (Tag.IsFeiertag_BG) Tag.Feiertagname_BG = this.DB.GetFeiertag(Tag, 'BG').Feiertagname_BG; // 'BG: ' +
          else Tag.Feiertagname_BG = '';
          // Ferientage eintragen
          Tag.IsFerientag_DE = this.DB.CheckIsFerientag(Tag, 'DE');
          Tag.IsFerientag_BG = this.DB.CheckIsFerientag(Tag, 'BG');
          if (Tag.IsFerientag_DE) Tag.Ferienname_DE = this.DB.GetFerientag(Tag, 'DE').Ferienname_DE; // 'DE: ' +
          else Tag.Ferienname_DE = '';
          if (Tag.IsFerientag_BG) Tag.Ferienname_BG = this.DB.GetFerientag(Tag, 'BG').Ferienname_BG; // 'BG: ' +
          else Tag.Ferienname_BG = '';
          Tag.Background = 'white';
          Tag.Color = 'black';
          Tag.IsUrlaub = false;
          Tag.IsHomeoffice = false;
          Tag.IsHalberUrlaubstag = false;
          // Urlaube eintragen
          if (this.DB.CurrentUrlaub !== null) {
            for (let Zeitspanne of this.DB.CurrentUrlaub.Urlaubzeitspannen) {
              Startdatum = (0, moment_1.default)(Zeitspanne.Startstempel);
              Endedatum = (0, moment_1.default)(Zeitspanne.Endestempel);
              if (Datum.isSameOrAfter(Startdatum, 'day') === true && Datum.isSameOrBefore(Endedatum, 'day') === true && this.DB.CheckIsFeiertag(Tag, this.DB.Laendercode) === false) {
                Tag.IsUrlaub = true;
                Tag.Background = this.DB.GetUrlaubStatuscolor(Zeitspanne);
                Tag.Color = 'white';
                break;
              }
            }
          }
          // Halbe Urlaubstage eintragen
          if (this.DB.CurrentUrlaub !== null) {
            for (let Zeitspanne of this.DB.CurrentUrlaub.Urlaubzeitspannen) {
              if (Zeitspanne.Halbertag) {
                Startdatum = (0, moment_1.default)(Zeitspanne.Startstempel);
                Endedatum = (0, moment_1.default)(Zeitspanne.Endestempel);
                if (Datum.isSame(Startdatum, 'day') === true && this.DB.CheckIsFeiertag(Tag, this.DB.Laendercode) === false) {
                  Tag.IsHalberUrlaubstag = true;
                  Tag.IsUrlaub = true;
                  Tag.Background = this.DB.GetUrlaubStatuscolor(Zeitspanne);
                  Tag.Color = 'white';
                  break;
                }
              }
            }
          }
          // Homeoffice eintragen
          if (this.DB.CurrentUrlaub !== null && this.Pool.Mitarbeitersettings !== null) {
            for (let Zeitspanne of this.DB.CurrentUrlaub.Homeofficezeitspannen) {
              Startdatum = (0, moment_1.default)(Zeitspanne.Startstempel);
              Endedatum = (0, moment_1.default)(Zeitspanne.Endestempel);
              if (Datum.isSameOrAfter(Startdatum, 'day') === true && Datum.isSameOrBefore(Endedatum, 'day') === true && this.DB.CheckIsFeiertag(Tag, this.DB.Laendercode) === false) {
                Tag.IsHomeoffice = true;
                Tag.Background = this.Pool.Mitarbeitersettings.ShowHomeoffice ? this.DB.GetHomeofficeStatuscolor(Zeitspanne.Status) : 'none';
                Tag.Color = this.Pool.Mitarbeitersettings.ShowHomeoffice ? 'white' : 'black';
                break;
              }
            }
          }
          this.Kalendertageliste[wochenindex].push(Tag);
          Datum.add(1, 'day');
        }
      }
      // Externe Urlaube
      this.KalendertageExternliste = [];
      Mitarbeiterindex = 0;
      for (let i = 0; i < this.DB.UrlaublisteExtern.length; i++) {
        Datum = Datumsicherung.clone();
        if (this.DB.CheckDisplayExternenUrlaub(this.DB.UrlaublisteExtern[i].MitarbeiterIDExtern)) {
          this.KalendertageExternliste[Mitarbeiterindex] = [];
          for (let wochenindex = 0; wochenindex < Wochenanazahl; wochenindex++) {
            this.KalendertageExternliste[Mitarbeiterindex][wochenindex] = [];
            for (let tagindex = 0; tagindex < 7; tagindex++) {
              Tag = {
                Kuerzel: this.DB.UrlaublisteExtern[i].NameKuerzel,
                MitarbeiterID: this.DB.UrlaublisteExtern[i].MitarbeiterIDExtern,
                Tagnummer: Datum.date(),
                Tag: Datum.format('dddd'),
                Datumstring: Datum.format('DD.MM.YYYY'),
                Hauptmonat: Datum.isSameOrAfter(MonatStartdatum, 'day') && Datum.isSameOrBefore(MonatEndedatum, 'day'),
                Kalenderwoche: Datum.isoWeek(),
                Tagstempel: Datum.valueOf(),
                Datum: Datum.clone(),
                IsUrlaub: false,
                IsHomeoffice: false,
                Background: 'white',
                Color: 'black'
              };
              // Urlaub Extern
              for (let UrlaubZeitspanne of this.DB.UrlaublisteExtern[i].Urlaubzeitspannen) {
                Startdatum = (0, moment_1.default)(UrlaubZeitspanne.Startstempel);
                Endedatum = (0, moment_1.default)(UrlaubZeitspanne.Endestempel);
                Kalenderewoche = Startdatum.isoWeek();
                if (lodash.isUndefined(this.DB.Kalenderwochenhoehenliste[Kalenderewoche])) {
                  this.DB.Kalenderwochenhoehenliste[Kalenderewoche] = [];
                  for (let i = 0; i < 5; i++) {
                    this.DB.Kalenderwochenhoehenliste[Kalenderewoche][i] = [];
                  }
                }
                if (Datum.isSameOrAfter(Startdatum, 'day') === true && Datum.isSameOrBefore(Endedatum, 'day') === true && this.DB.CheckIsFeiertag(Tag, this.DB.Laendercode) === false) {
                  Tag.IsUrlaub = true;
                  Tag.IsHomeoffice = false;
                  Tag.Background = this.DB.GetUrlaubStatuscolor(UrlaubZeitspanne);
                  Tag.Color = 'white';
                  Wochentagnummer = Datum.weekday();
                  debugger;
                  if (lodash.isUndefined(this.DB.Kalenderwochenhoehenliste[Kalenderewoche][Wochentagnummer]) === false && this.DB.Kalenderwochenhoehenliste[Kalenderewoche][Wochentagnummer].indexOf(this.DB.UrlaublisteExtern[i].MitarbeiterIDExtern) === -1) {
                    this.DB.Kalenderwochenhoehenliste[Kalenderewoche][Wochentagnummer].push(this.DB.UrlaublisteExtern[i].MitarbeiterIDExtern);
                  }
                  break;
                }
              }
              // Homeoffice Extern
              for (let HomeofficeZeitspanne of this.DB.UrlaublisteExtern[i].Homeofficezeitspannen) {
                Startdatum = (0, moment_1.default)(HomeofficeZeitspanne.Startstempel);
                Endedatum = (0, moment_1.default)(HomeofficeZeitspanne.Endestempel);
                if (Datum.isSameOrAfter(Startdatum, 'day') === true && Datum.isSameOrBefore(Endedatum, 'day') === true && this.DB.CheckIsFeiertag(Tag, this.DB.Laendercode) === false) {
                  Tag.IsHomeoffice = true;
                  Tag.IsUrlaub = false;
                  Tag.Background = this.DB.GetHomeofficeStatuscolor(HomeofficeZeitspanne.Status);
                  Tag.Color = 'white';
                  Wochentagnummer = Datum.weekday();
                  if (lodash.isUndefined(this.DB.Kalenderwochenhoehenliste[Kalenderewoche][Wochentagnummer]) === false && this.DB.Kalenderwochenhoehenliste[Kalenderewoche][Wochentagnummer].indexOf(this.DB.UrlaublisteExtern[i].MitarbeiterIDExtern) === -1) {
                    this.DB.Kalenderwochenhoehenliste[Kalenderewoche][Wochentagnummer].push(this.DB.UrlaublisteExtern[i].MitarbeiterIDExtern);
                  }
                  break;
                }
              }
              this.KalendertageExternliste[Mitarbeiterindex][wochenindex].push(Tag);
              Datum.add(1, 'day');
            }
          }
          Mitarbeiterindex++;
        }
      }
      // debugger;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsplanung Kalender', 'PrepareData', this.Debug.Typen.Component);
    }
  }
  ngOnInit() {
    try {
      this.DataSubscription = this.Pool.LoadingAllDataFinished.subscribe(() => {
        this.PrepareData();
      });
      this.MonateSubscription = this.DB.PlanungsmonateChanged.subscribe(() => {
        this.PrepareData();
      });
      this.ExterneUrlaubSubscription = this.DB.ExterneUrlaubeChanged.subscribe(() => {
        this.PrepareData();
      });
      this.ExterneHomeofficeSubscription = this.DB.ExterneHomeofficeChanged.subscribe(() => {
        this.PrepareData();
      });
      this.UrlaubStatusSubscription = this.DB.UrlaubStatusChanged.subscribe(() => {
        this.PrepareData();
      });
      this.HomeofficeStatusSubscription = this.DB.HomeofficeStatusChanged.subscribe(() => {
        this.PrepareData();
      });
      this.CancelUrlaubSubscription = this.DB.AddUrlaubCancelEvent.subscribe(() => {
        this.CancelUrlaub();
      });
      this.UpdateKalenderSubscription = this.DB.UpdateKalenderRequestEvent.subscribe(() => {
        this.PrepareData();
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsplanung Kalender', 'ngOnInit', this.Debug.Typen.Component);
    }
  }
  ngOnDestroy() {
    try {
      this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.ProjektpunktDateKwPicker);
      this.DataSubscription.unsubscribe();
      this.DataSubscription = null;
      this.MonateSubscription.unsubscribe();
      this.MonateSubscription = null;
      this.ExterneUrlaubSubscription.unsubscribe();
      this.ExterneUrlaubSubscription = null;
      this.UrlaubStatusSubscription.unsubscribe();
      this.UrlaubStatusSubscription = null;
      this.HomeofficeStatusSubscription.unsubscribe();
      this.HomeofficeStatusSubscription = null;
      this.ExterneHomeofficeSubscription.unsubscribe();
      this.ExterneHomeofficeSubscription = null;
      this.CancelUrlaubSubscription.unsubscribe();
      this.CancelUrlaubSubscription = null;
      this.UpdateKalenderSubscription.unsubscribe();
      this.UpdateKalenderSubscription = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsplanung Kalender', 'ngOnDestroy', this.Debug.Typen.Component);
    }
  }
  FeietragMouseOverEvent(Tag, laendercode) {
    try {
      let Name = '';
      let Datum = (0, moment_1.default)(Tag.Tagstempel).locale(laendercode === 'DE' ? 'de' : 'en');
      if (Tag.IsFeiertag_DE || Tag.IsFeiertag_BG) {
        if (laendercode === 'DE' && Tag.IsFeiertag_DE) {
          Name = Tag.Feiertagname_DE + ' / ' + Datum.format('D. MMMM YYYY');
          this.FeiertagCrossedEvent.emit({
            Name: Name,
            Laendercode: laendercode
          });
        } else if (laendercode === 'BG' && Tag.IsFeiertag_BG) {
          Name = Tag.Feiertagname_BG + ' / ' + Datum.format('D. MMMM YYYY');
          this.FeiertagCrossedEvent.emit({
            Name: Name,
            Laendercode: laendercode
          });
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Kalender', 'FeietragMouseOverEvent', this.Debug.Typen.Component);
    }
  }
  FerientagMouseOverEvent(Tag, laendercode) {
    try {
      let Name = laendercode === 'DE' ? Tag.Ferienname_DE : Tag.Ferienname_BG;
      this.FerientagCrossedEvent.emit({
        Name: Name,
        Laendercode: laendercode
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Kalender', 'FerientagMouseOverEvent', this.Debug.Typen.Component);
    }
  }
  TagClicked(event, Tag, Wocheindex, CurrentTagindex) {
    try {
      let EndeDatum;
      let Startdatum;
      let Kalendertag;
      let Anzahl = 0;
      let IsFeiertag = this.DB.Laendercode === 'DE' ? Tag.IsFeiertag_DE : Tag.IsFeiertag_BG;
      let Resturlaub;
      let IsUrlaub = Tag.IsUrlaub && this.DB.CurrentUrlaubzeitspanne === null;
      let IsHomeoffice = Tag.IsHomeoffice;
      let Starttagindex;
      let Endetagindex;
      let Heute = (0, moment_1.default)();
      event.stopPropagation();
      event.preventDefault();
      this.CurrentTagindex = CurrentTagindex;
      this.CurrentWochenindex = Wocheindex;
      if (this.AddUrlaubRunning) {
        if (IsFeiertag === false && IsHomeoffice === false && IsUrlaub === false) {
          if (this.DB.CurrentUrlaubzeitspanne === null) {
            this.DB.CurrentUrlaubzeitspanne = this.DB.GetEmptyUrlaubszeitspanne();
            this.DB.CurrentUrlaubzeitspanne.Startstempel = Tag.Tagstempel;
            this.DB.CurrentUrlaubzeitspanne.Startstring = Tag.Datumstring;
            Tag.Background = this.DB.Urlaubsfaben.Geplant;
            Tag.IsUrlaub = true;
            Tag.Color = 'white';
          } else {
            Startdatum = (0, moment_1.default)(this.DB.CurrentUrlaubzeitspanne.Startstempel);
            Starttagindex = Startdatum.isoWeekday() - 1;
            Endetagindex = CurrentTagindex;
            EndeDatum = (0, moment_1.default)(Tag.Tagstempel);
            if (EndeDatum.isSameOrAfter(Startdatum, 'day') === true && EndeDatum.isSame(Startdatum, 'week')) {
              this.DB.CurrentUrlaubzeitspanne.Endestempel = Tag.Tagstempel;
              this.DB.CurrentUrlaubzeitspanne.Endestring = Tag.Datumstring;
              if (EndeDatum.isSameOrBefore(Heute)) {
                this.DB.CurrentUrlaubzeitspanne.Status = this.DB.Urlaubstatusvarianten.Genehmigt;
                this.DB.CurrentUrlaubzeitspanne.FreigabeanfrageSended = true;
                this.DB.CurrentUrlaubzeitspanne.FreigabeantwortSended = true;
                this.DB.CurrentUrlaubzeitspanne.FreigabeantwortOfficeSended = true;
                this.DB.CurrentUrlaubzeitspanne.Planungmeldung = 'Der Urlaub befand sich zum Tage der Eintragung am ' + Heute.format('DD.MM.YYYY') + ' in der Vergangenheit.';
              }
              for (let Index = Starttagindex; Index <= Endetagindex; Index++) {
                Kalendertag = this.Kalendertageliste[Wocheindex][Index];
                IsFeiertag = this.DB.Laendercode === 'DE' ? Kalendertag.IsFeiertag_DE : Kalendertag.IsFeiertag_BG;
                if (IsFeiertag === false) {
                  Kalendertag.Background = this.DB.Urlaubsfaben.Geplant;
                  Kalendertag.IsUrlaub = true;
                  Kalendertag.Color = 'white';
                  Anzahl++;
                }
              }
              this.DB.CurrentUrlaubzeitspanne.Tageanzahl = Anzahl;
              Resturlaub = this.DB.CountResturlaub();
              if (Resturlaub - Anzahl >= 0) {
                this.AddUrlaubFinishedEvent.emit(true);
              } else {
                this.Tools.ShowHinweisDialog('Du hast nur noch ' + Resturlaub + ' Tage Resturlaub.');
                this.DB.CurrentUrlaubzeitspanne = null;
                window.setTimeout(() => {
                  for (let Index = Starttagindex; Index < Endetagindex; Index++) {
                    Kalendertag = this.Kalendertageliste[Wocheindex][Index];
                    IsFeiertag = this.DB.Laendercode === 'DE' ? Kalendertag.IsFeiertag_DE : Kalendertag.IsFeiertag_BG;
                    if (IsFeiertag === false) {
                      Kalendertag.Background = 'none';
                      Kalendertag.IsUrlaub = false;
                      Kalendertag.Color = 'black';
                    }
                  }
                  this.AddUrlaubFinishedEvent.emit(false);
                }, 3000);
              }
            } else {
              this.Tools.ShowHinweisDialog('Bitte Tag in der gleichen Woche wählen.');
            }
          }
        } else {
          if (IsFeiertag) this.Tools.ShowHinweisDialog('Dieser Tag ist ein Feiertag.');else if (IsHomeoffice) this.Tools.ShowHinweisDialog('Dieser Tag ist ein Homeofficetag.');else this.Tools.ShowHinweisDialog('Dieser Tag ist bereits ein Urlaubstag.');
        }
      }
      if (this.AddHomeofficerunning) {
        if (IsFeiertag === false && IsUrlaub === false && IsHomeoffice === false) {
          this.DB.CurrentHomeofficezeitspanne = this.DB.GetEmptyHomeofficezeitspanne();
          this.DB.CurrentHomeofficezeitspanne.Startstempel = Tag.Tagstempel;
          this.DB.CurrentHomeofficezeitspanne.Endestempel = Tag.Tagstempel;
          this.DB.CurrentHomeofficezeitspanne.Startstring = Tag.Datumstring;
          this.DB.CurrentHomeofficezeitspanne.Endestring = Tag.Datumstring;
          this.DB.CurrentHomeofficezeitspanne.Tageanzahl = 1;
          Kalendertag = this.Kalendertageliste[Wocheindex][CurrentTagindex];
          Kalendertag.Background = this.DB.Homeofficefarben.Geplant;
          Kalendertag.IsHomeoffice = true;
          Kalendertag.Color = 'white';
          this.DB.CurrentHomeofficecounter++;
          this.AddHomeofficeFinishedEvent.emit(true);
        } else {
          if (IsFeiertag) this.Tools.ShowHinweisDialog('Dieser Tag ist ein Feiertag.');else if (IsHomeoffice) this.Tools.ShowHinweisDialog('Dieser Tag ist ein Homeofficetag.');else this.Tools.ShowHinweisDialog('Dieser Tag ist bereits ein Urlaubstag.');
          this.DB.CurrentHomeofficezeitspanne = null;
        }
      }
      if (this.AddHalberUrlaubstagRunning) {
        if (IsFeiertag === false && IsUrlaub === false && IsHomeoffice === false) {
          this.DB.CurrentUrlaubzeitspanne = this.DB.GetEmptyUrlaubszeitspanne();
          this.DB.CurrentUrlaubzeitspanne.Halbertag = true;
          this.DB.CurrentUrlaubzeitspanne.Startstempel = Tag.Tagstempel;
          this.DB.CurrentUrlaubzeitspanne.Endestempel = Tag.Tagstempel;
          this.DB.CurrentUrlaubzeitspanne.Startstring = Tag.Datumstring;
          this.DB.CurrentUrlaubzeitspanne.Endestring = Tag.Datumstring;
          this.DB.CurrentUrlaubzeitspanne.Tageanzahl = 0.5;
          Kalendertag = this.Kalendertageliste[Wocheindex][CurrentTagindex];
          Kalendertag.Background = this.DB.Urlaubsfaben.Geplant;
          Kalendertag.IsUrlaub = true;
          Kalendertag.IsHalberUrlaubstag = true;
          Kalendertag.Color = 'white';
          this.AddUrlaubFinishedEvent.emit(true);
        } else {
          if (IsFeiertag) this.Tools.ShowHinweisDialog('Dieser Tag ist ein Feiertag.');else if (IsUrlaub) this.Tools.ShowHinweisDialog('Dieser Tag ist ein Urlaubstag.');else this.Tools.ShowHinweisDialog('Dieser Tag ist bereits ein Homeofficetag.');
          this.DB.CurrentUrlaubzeitspanne = null;
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Kalender', 'TagClicked', this.Debug.Typen.Component);
    }
  }
  GetMonatname() {
    try {
      let Text = this.Monatname;
      if (this.ShowYear) Text += ' ' + this.Jahr;
      return Text;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Kalender', 'GetMonatname', this.Debug.Typen.Component);
    }
  }
  GetTagBackground(Tag) {
    try {
      if (Tag.IsUrlaub === true || Tag.IsHomeoffice === true) {
        if (Tag.IsUrlaub) return Tag.Background;else if (Tag.IsHomeoffice === true && this.Pool.Mitarbeitersettings.ShowHomeoffice === true) return Tag.Background;else return 'none';
      } else return 'none';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Kalender', 'GetTagBackground', this.Debug.Typen.Component);
    }
  }
  CancelUrlaub() {
    try {
      let Kalendertag;
      if (lodash.isUndefined(this.CurrentWochenindex) === false && this.CurrentWochenindex !== null && lodash.isUndefined(this.CurrentTagindex) === false && this.CurrentTagindex !== null) {
        Kalendertag = this.Kalendertageliste[this.CurrentWochenindex][this.CurrentTagindex];
        Kalendertag.Background = 'none';
        Kalendertag.IsUrlaub = false;
        Kalendertag.Color = 'black';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Kalender', 'CancelUrlaub', this.Debug.Typen.Component);
    }
  }
  lodash = lodash;
  GetMaxExternUrlaubseintraege(Kalenderwoche) {
    try {
      let Liste = this.DB.Kalenderwochenhoehenliste[Kalenderwoche];
      // let IDListe: string[] = [];
      // let Eintrag: string;
      let Eintraege;
      let Max = 0;
      if (Liste.length > 0) {
        if (Kalenderwoche === 25) {
          // debugger;
        }
        for (let i = 0; i < Liste.length; i++) {
          if (!lodash.isUndefined(Liste[i])) {
            Eintraege = Liste[i];
            if (Eintraege.length > Max) Max = Eintraege.length;
            /*
            for(let j = 0; j < Eintraege.length; j++) {
                           if(lodash.isUndefined(Eintraege[j]) === false) {
                             Eintrag = Eintraege[j];
                             if(IDListe.indexOf(Eintrag) === -1) IDListe.push(Eintrag);
              }
            }
                          */
          }
        }
      }
      return Max;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Kalender', 'GetMaxExternUrlaubseintraege', this.Debug.Typen.Component);
    }
  }
  ExternUrlaubstagClicked(event, MitarbeiterID) {
    try {
      event.preventDefault();
      event.stopPropagation();
      this.ExternUrlaubstagClickedEvent.emit(MitarbeiterID);
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Kalender', 'ExternUrlaubstagClicked', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: display_service_1.DisplayService
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: const_1.ConstProvider
  }];
  static propDecorators = {
    ShowProtokollpunkte: [{
      type: core_1.Input
    }],
    Iconname: [{
      type: core_1.Input
    }],
    Dialogbreite: [{
      type: core_1.Input
    }],
    Dialoghoehe: [{
      type: core_1.Input
    }],
    PositionY: [{
      type: core_1.Input
    }],
    ZIndex: [{
      type: core_1.Input
    }],
    Monatindex: [{
      type: core_1.Input
    }],
    Jahr: [{
      type: core_1.Input
    }],
    AddUrlaubRunning: [{
      type: core_1.Input
    }],
    AddHomeofficerunning: [{
      type: core_1.Input
    }],
    AddHalberUrlaubstagRunning: [{
      type: core_1.Input
    }],
    ShowYear: [{
      type: core_1.Input
    }],
    FeiertagCrossedEvent: [{
      type: core_1.Output
    }],
    FerientagCrossedEvent: [{
      type: core_1.Output
    }],
    AddUrlaubFinishedEvent: [{
      type: core_1.Output
    }],
    AddHomeofficeFinishedEvent: [{
      type: core_1.Output
    }],
    ExternUrlaubstagClickedEvent: [{
      type: core_1.Output
    }]
  };
};
exports.UrlaubsplanungKalenderComponent = UrlaubsplanungKalenderComponent;
exports.UrlaubsplanungKalenderComponent = UrlaubsplanungKalenderComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'urlaubsplanung-kalender',
  template: __webpack_require__(/*! ./urlausplanung-kalender.html?ngResource */ 55260),
  styles: [__webpack_require__(/*! ./urlausplanung-kalender.scss?ngResource */ 19584)]
})], UrlaubsplanungKalenderComponent);

/***/ }),

/***/ 66068:
/*!***************************************************************************!*\
  !*** ./src/app/pages/common-einstellungen/common-einstellungen.module.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonEinstellungenPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const common_einstellungen_page_1 = __webpack_require__(/*! ./common-einstellungen.page */ 42764);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 6168);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 72284);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 10272);
const safe_pipe_module_1 = __webpack_require__(/*! ../../pipes/safe.pipe.module */ 84104);
const routes = [{
  path: '',
  component: common_einstellungen_page_1.CommonEinstellungenPage
}];
let CommonEinstellungenPageModule = class CommonEinstellungenPageModule {};
exports.CommonEinstellungenPageModule = CommonEinstellungenPageModule;
exports.CommonEinstellungenPageModule = CommonEinstellungenPageModule = tslib_1.__decorate([(0, core_1.NgModule)({
  imports: [common_1.CommonModule, forms_1.FormsModule, angular_1.IonicModule, page_header_module_1.PageHeaderModule, router_1.RouterModule.forChild(routes), page_header_menu_module_1.PageHeaderMenuModule, page_footer_module_1.PageFooterModule, checkbox_clon_module_1.CheckboxClonModule, button_value_module_1.ButtonValueModule, auswahl_dialog_module_1.AuswahlDialogModule, safe_pipe_module_1.SafePipeModule],
  declarations: [common_einstellungen_page_1.CommonEinstellungenPage]
})], CommonEinstellungenPageModule);

/***/ }),

/***/ 42764:
/*!*************************************************************************!*\
  !*** ./src/app/pages/common-einstellungen/common-einstellungen.page.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonEinstellungenPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const database_appeinstellungen_service_1 = __webpack_require__(/*! ../../services/database-appeinstellungen/database-appeinstellungen.service */ 96140);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
let CommonEinstellungenPage = class CommonEinstellungenPage {
  Pool;
  Const;
  Basics;
  Tools;
  DBUrlaub;
  DB;
  Debug;
  DataSubscription;
  Vertreterliste;
  Freigeberliste;
  ShowAuswahl;
  Auswahlindex;
  Auswahltitel;
  Auswahlliste;
  constructor(Pool, Const, Basics, Tools, DBUrlaub, DB, Debug) {
    this.Pool = Pool;
    this.Const = Const;
    this.Basics = Basics;
    this.Tools = Tools;
    this.DBUrlaub = DBUrlaub;
    this.DB = DB;
    this.Debug = Debug;
    try {
      this.DataSubscription = null;
      this.Vertreterliste = [];
      this.Freigeberliste = [];
      this.ShowAuswahl = false;
      this.Auswahlliste = [{
        Index: 0,
        FirstColumn: '',
        SecoundColumn: '',
        Data: null
      }];
      this.Auswahlindex = 0;
      this.Auswahltitel = '';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Einstellungen', 'constructor', this.Debug.Typen.Page);
    }
  }
  ngOnDestroy() {
    try {
      this.DataSubscription.unsubscribe();
      this.DataSubscription = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Einstellungen', 'OnDestroy', this.Debug.Typen.Page);
    }
  }
  ngOnInit() {
    try {
      this.DataSubscription = this.Pool.LoadingAllDataFinished.subscribe(() => {
        this.PrepareData();
      });
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Einstellungen', 'OnInit', this.Debug.Typen.Page);
    }
  }
  DebugNoExternalEmaillCheckedChanged(event) {
    try {
      this.Pool.Appeinstellungen.DebugNoExternalEmail = event.status;
      this.DB.SaveAppeinstellungen();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Einstellungen', 'DebugNoExternalEmaillCheckedChanged', this.Debug.Typen.Page);
    }
  }
  ShowHomescreeninfosChanged(event) {
    try {
      this.Pool.Appeinstellungen.ShowHomeScreenInfos = event.status;
      this.DB.SaveAppeinstellungen();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Einstellungen', 'ShowHomescreeninfosChanged', this.Debug.Typen.Page);
    }
  }
  StartseiteChangedHandler(event) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        _this.Pool.Appeinstellungen.AdminStartseite = event.detail.value;
        yield _this.DB.SaveAppeinstellungen();
        _this.Tools.ShowHinweisDialog('App wird neu gestartet.....');
        window.setTimeout(() => {
          location.replace(_this.Pool.ApplicationURL);
        }, 500);
      } catch (error) {
        _this.Debug.ShowErrorMessage(error, 'Einstellungen', 'StartseiteChangedHandler', _this.Debug.Typen.Page);
      }
    })();
  }
  WartungsmodusCheckChanged(event) {
    try {
      this.Pool.Appeinstellungen.Wartungsmodus = event.status;
      this.DB.SaveAppeinstellungen();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Einstellungen', 'WartungsmodusCheckChanged', this.Debug.Typen.Page);
    }
  }
  PrepareData() {
    try {
      let Mitarbeiter;
      let CurrentMitarbeiter;
      let Jahr = (0, moment_1.default)().year();
      let Urlaub;
      let CurrentZeitspanne;
      let Standort;
      let Vertreter;
      let Freigeber;
      this.Vertreterliste = [];
      this.Freigeberliste = [];
      for (CurrentMitarbeiter of this.Pool.Mitarbeiterliste) {
        Urlaub = lodash.find(CurrentMitarbeiter.Urlaubsliste, currenturlaub => {
          return currenturlaub.Jahr === Jahr;
        });
        if (lodash.isUndefined(Urlaub) === false) {
          for (CurrentZeitspanne of Urlaub.Urlaubzeitspannen) {
            switch (CurrentZeitspanne.Status) {
              case this.DBUrlaub.Urlaubstatusvarianten.Vertreteranfrage:
                for (let Konversation of CurrentZeitspanne.Vertretungskonversationliste) {
                  Vertreter = lodash.cloneDeep(lodash.find(this.Pool.Mitarbeiterliste, {
                    _id: Konversation.VertreterID
                  }));
                  Mitarbeiter = lodash.find(this.Vertreterliste, {
                    _id: Konversation.VertreterID
                  });
                  if (lodash.isUndefined(Mitarbeiter)) {
                    Vertreter.Vertretungenanfragenanzahl = 1;
                    Vertreter.Selected = false;
                    Vertreter.UrlaubanfrageReminderSended = false;
                    this.Vertreterliste.push(Vertreter);
                  } else {
                    Mitarbeiter.Vertretungenanfragenanzahl++;
                  }
                }
                break;
              case this.DBUrlaub.Urlaubstatusvarianten.Vertreterfreigabe:
                Standort = lodash.find(this.Pool.Standorteliste, {
                  _id: CurrentMitarbeiter.StandortID
                });
                if (lodash.isUndefined(Standort) === false) {
                  for (let FreigeberID of Standort.Urlaubfreigabepersonen) {
                    Freigeber = lodash.cloneDeep(lodash.find(this.Pool.Mitarbeiterliste, {
                      _id: FreigeberID
                    }));
                    Mitarbeiter = lodash.find(this.Freigeberliste, {
                      _id: FreigeberID
                    });
                    if (lodash.isUndefined(Mitarbeiter) === true) {
                      Freigeber.Freigabenanfragenanzahl = 1;
                      Freigeber.Selected = false;
                      Freigeber.UrlaubanfrageReminderSended = false;
                      this.Freigeberliste.push(Freigeber);
                    } else {
                      Mitarbeiter.Freigabenanfragenanzahl++;
                    }
                  }
                }
                break;
            }
          }
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Einstellungen', 'PrepareData', this.Debug.Typen.Page);
    }
  }
  FreigberCheckedChanged(event) {
    try {
      this.Freigeberliste[event.index].Selected = event.status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Einstellungen', 'FreigberCheckedChanged', this.Debug.Typen.Page);
    }
  }
  VertreterCheckedChanged(event) {
    try {
      this.Vertreterliste[event.index].Selected = event.status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Einstellungen', 'VertreterCheckedChanged', this.Debug.Typen.Page);
    }
  }
  SendUrlaubReminderMail() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        for (let Vertreter of _this2.Vertreterliste) {
          if (Vertreter.Selected) {
            yield _this2.DBUrlaub.SendVertreterreminder(Vertreter);
            Vertreter.UrlaubanfrageReminderSended = true;
            Vertreter.Selected = false;
          }
        }
        for (let Freigeber of _this2.Freigeberliste) {
          if (Freigeber.Selected) {
            yield _this2.DBUrlaub.SendFreigabereminder(Freigeber);
            Freigeber.UrlaubanfrageReminderSended = true;
            Freigeber.Selected = false;
          }
        }
      } catch (error) {
        _this2.Debug.ShowErrorMessage(error, 'Einstellungen', 'SendUrlaubReminderMail', _this2.Debug.Typen.Page);
      }
    })();
  }
  static ctorParameters = () => [{
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: const_1.ConstProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: database_appeinstellungen_service_1.DatabaseAppeinstellungenService
  }, {
    type: debug_1.DebugProvider
  }];
};
exports.CommonEinstellungenPage = CommonEinstellungenPage;
exports.CommonEinstellungenPage = CommonEinstellungenPage = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'common-einstellungen-page',
  template: __webpack_require__(/*! ./common-einstellungen.page.html?ngResource */ 9540),
  styles: [__webpack_require__(/*! ./common-einstellungen.page.scss?ngResource */ 66673)]
})], CommonEinstellungenPage);

/***/ }),

/***/ 27735:
/*!*********************************************************!*\
  !*** ./src/app/pages/common-home/common-home.module.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonHomePageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const common_home_page_1 = __webpack_require__(/*! ./common-home.page */ 45884);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 6512);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const fi_changelog_editor_module_1 = __webpack_require__(/*! ../../components-page/fi-changelog-editor/fi-changelog-editor.module */ 12095);
const routes = [{
  path: '',
  component: common_home_page_1.CommonHomePage
}];
let CommonHomePageModule = class CommonHomePageModule {};
exports.CommonHomePageModule = CommonHomePageModule;
exports.CommonHomePageModule = CommonHomePageModule = tslib_1.__decorate([(0, core_1.NgModule)({
  imports: [common_1.CommonModule, forms_1.FormsModule, angular_1.IonicModule, router_1.RouterModule.forChild(routes), page_header_module_1.PageHeaderModule, abstand_element_fixed_module_1.AbstandElementFixedModule, forms_1.ReactiveFormsModule, page_footer_module_1.PageFooterModule, fi_changelog_editor_module_1.FiChangelogEditorModule],
  declarations: [common_home_page_1.CommonHomePage]
})], CommonHomePageModule);

/***/ }),

/***/ 45884:
/*!*******************************************************!*\
  !*** ./src/app/pages/common-home/common-home.page.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonHomePage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const database_authentication_service_1 = __webpack_require__(/*! ../../services/database-authentication/database-authentication.service */ 97092);
const menue_service_1 = __webpack_require__(/*! ../../services/menue/menue.service */ 59460);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_changelog_service_1 = __webpack_require__(/*! ../../services/database-changelog/database-changelog.service */ 51708);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
const rxjs_1 = __webpack_require__(/*! rxjs */ 90856);
const msal_angular_1 = __webpack_require__(/*! @azure/msal-angular */ 38460);
const msal_browser_1 = __webpack_require__(/*! @azure/msal-browser */ 10892);
const graph_1 = __webpack_require__(/*! ../../services/graph/graph */ 8608);
const environment_1 = __webpack_require__(/*! ../../../environments/environment */ 36716);
const security_service_1 = __webpack_require__(/*! ../../services/security/security.service */ 34636);
let CommonHomePage = class CommonHomePage {
  Basics;
  Debug;
  Tools;
  Const;
  Pool;
  authService;
  msalBroadcastService;
  GraphService;
  DBChangelog;
  AuthService;
  Security;
  Menuservice;
  Title;
  StandortMouseOver;
  MitarbeiterMouseOver;
  ProjekteMouseOver;
  FavoritenMouseOver;
  LogoutMouseOver;
  DebugMouseOver;
  EinstellungenMouseOver;
  PlayMouseOver;
  BackgroundimageURL;
  Backgroundinterval;
  ShowChangelogEditor;
  ChangelogSubscription;
  ProgressMessage;
  ReloadMouseOver;
  UrlaubMouseOver;
  constructor(Basics, Debug, Tools, Const, Pool, authService, msalBroadcastService, GraphService, DBChangelog, AuthService, Security, Menuservice) {
    this.Basics = Basics;
    this.Debug = Debug;
    this.Tools = Tools;
    this.Const = Const;
    this.Pool = Pool;
    this.authService = authService;
    this.msalBroadcastService = msalBroadcastService;
    this.GraphService = GraphService;
    this.DBChangelog = DBChangelog;
    this.AuthService = AuthService;
    this.Security = Security;
    this.Menuservice = Menuservice;
    try {
      this.StandortMouseOver = false;
      this.MitarbeiterMouseOver = false;
      this.ProjekteMouseOver = false;
      this.FavoritenMouseOver = false;
      this.LogoutMouseOver = false;
      this.DebugMouseOver = false;
      this.EinstellungenMouseOver = false;
      this.PlayMouseOver = false;
      this.BackgroundimageURL = '../../../assets/background/' + lodash.random(1, 36, false).toString() + '.jpg';
      this.Backgroundinterval = null;
      this.ShowChangelogEditor = false;
      this.ChangelogSubscription = null;
      this.ProgressMessage = '';
      this.ReloadMouseOver = false;
      this.UrlaubMouseOver = false;
      // Test
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'constructor', this.Debug.Typen.Page);
    }
  }
  ngOnInit() {
    try {
      this.Security.CheckSecurity();
      this.ChangelogSubscription = this.Pool.ChangeloglisteChanged.subscribe(() => {
        this.PrepareDaten();
      });
      this.msalBroadcastService.msalSubject$.pipe((0, rxjs_1.filter)(msg => msg.eventType === msal_browser_1.EventType.LOGIN_SUCCESS)).subscribe(result => {
        const payload = result.payload;
        this.authService.instance.setActiveAccount(payload.account);
        this.AuthService.ActiveUser = payload.account;
        // this.AuthService.AccessToken = payload.accessToken;
        this.AuthService.SetShowLoginStatus();
        this.AuthService.LoginSuccessEvent.emit();
        /*
        this.AuthService.SaveAccessToken(payload.accessToken).then(() => {
               });
                */
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'OnInit', this.Debug.Typen.Page);
    }
  }
  ionViewDidEnter() {
    try {
      let Nummer;
      this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Home;
      /*
      this.Backgroundinterval = window.setInterval(() => {
               Nummer = lodash.random(1, 36, false);
               this.BackgroundimageURL = '../../../assets/background/' + Nummer.toString() + '.jpg';
       
      }, 60000);
              */
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'ionViewDidEnter', this.Debug.Typen.Page);
    }
  }
  ionViewDidLeave() {
    try {
      this.Backgroundinterval = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'ionViewDidLeave', this.Debug.Typen.Page);
    }
  }
  ngOnDestroy() {
    try {
      this.ChangelogSubscription.unsubscribe();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'OnDestroy', this.Debug.Typen.Page);
    }
  }
  FavoritChangedHandler(event) {
    try {
      /*
             this.DBProjekte.CurrentFavorit = lodash.find(this.Pool.Mitarbeiterdaten.Favoritenliste, {FavoritenID: event.detail.value});
             if(lodash.isUndefined(this.DBProjekte.CurrentFavorit)) this.DBProjekte.CurrentFavorit = null;
             if(this.DBProjekte.CurrentFavorit === null) {
               this.Pool.Mitarbeitersettings.FavoritenID      = null;
        this.DBProjekte.CurrentFavoritenlisteindex     = null;
        this.Pool.Mitarbeitersettings.ProjektID        = null;
      }
      else {
               this.Pool.Mitarbeitersettings.FavoritenID  = this.DBProjekte.CurrentFavorit.FavoritenID;
        this.DBProjekte.CurrentFavoritenlisteindex = lodash.findIndex(this.Pool.Mitarbeiterdaten.Favoritenliste, {FavoritenID: this.DBProjekte.CurrentFavorit.FavoritenID});
        this.Pool.Mitarbeitersettings.ProjektID    = null;
      }
              */
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'FavoritChangedHandler', this.Debug.Typen.Page);
    }
  }
  DebugButtonClicked() {
    try {
      this.Tools.SetRootPage(this.Const.Pages.DebugPage);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'DebugButtonClicked', this.Debug.Typen.Page);
    }
  }
  EinstellungenButtonClicked() {
    try {
      this.Tools.SetRootPage(this.Const.Pages.EinstellungenPage);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'EinstellungenButtonClicked', this.Debug.Typen.Page);
    }
  }
  LogoutButtonClicked() {
    try {
      this.Pool.ProjektdatenLoaded = false;
      this.AuthService.Logout();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'LogoutButtonClicked', this.Debug.Typen.Page);
    }
  }
  LoginButtonClicked() {
    try {
      this.Pool.ProjektdatenLoaded = false;
      this.AuthService.Login();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'LoginButtonClicked', this.Debug.Typen.Page);
    }
  }
  StandorteButtonClicked() {
    try {
      this.Tools.SetRootPage(this.Const.Pages.FiStandortelistePage);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'StandorteButtonClicked', this.Debug.Typen.Page);
    }
  }
  MitarbeiterButtonClicked() {
    try {
      this.Tools.SetRootPage(this.Const.Pages.FiMitarbeiterlistePage);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'MitarbeiterButtonClicked', this.Debug.Typen.Page);
    }
  }
  PlanerButtonClicked() {
    try {
      this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Urlaubsplanung;
      this.Menuservice.UrlaubMenuebereich = this.Menuservice.UrlaubMenuebereiche.Planung;
      this.Tools.SetRootPage(this.Const.Pages.UrlaubPlanungPage);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'PlanerButtonClicked', this.Debug.Typen.Page);
    }
  }
  ProjekteButtonClicked() {
    try {
      this.Tools.SetRootPage(this.Const.Pages.PjListePage);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'ProjekteButtonClicked', this.Debug.Typen.Page);
    }
  }
  FavoritenButtonClicked() {
    try {
      this.Tools.SetRootPage(this.Const.Pages.PjFavoritenlistePage);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'FavoritenButtonClicked', this.Debug.Typen.Page);
    }
  }
  PlayButtonClicked() {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        /*
               let Aufgabenansicht: Aufgabenansichtstruktur;
               if(this.DBProjekte.CurrentFavorit !== null && this.DBProjekte.GesamtprojektlisteHasDatenerror === false) {
                 if(this.Pool.ProjektdatenLoaded === false) {
                   this.ProgressMessage = 'Projektdaten werden geladen';
                   this.DBProjekte.SetProjekteliste(this.DBProjekte.CurrentFavorit.Projekteliste);
            this.DBProjekte.SetCurrentFavoritenprojekt();
                   await this.Pool.ReadProjektdaten(this.DBProjekte.Projektliste);
                   Aufgabenansicht = this.Pool.GetAufgabenansichten(this.DBProjekte.CurrentProjekt !== null ? this.DBProjekte.CurrentProjekt._id : null);
                   await this.DBMitarbeitersettings.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings, Aufgabenansicht);
                   this.Pool.ProjektdatenLoaded = true;
          }
                 this.Menuservice.MainMenuebereich     = this.Menuservice.MainMenuebereiche.Projekte;
          this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.Aufgabenliste;
          this.Menuservice.Aufgabenlisteansicht = this.Menuservice.Aufgabenlisteansichten.Projekt;
                 this.Tools.SetRootPage(this.Const.Pages.PjAufgabenlistePage);
        }
                */
      } catch (error) {
        _this.Debug.ShowErrorMessage(error.message, 'Home', 'PlayButtonClicked', _this.Debug.Typen.Page);
      }
    })();
  }
  GetFavoritenlistehoehe() {
    try {
      let Anzahl = 0;
      if (this.Pool.Mitarbeiterdaten !== null) {
        Anzahl = this.Pool.Mitarbeiterdaten.Favoritenliste.length === 0 ? 2 : this.Pool.Mitarbeiterdaten.Favoritenliste.length;
      }
      if (Anzahl === 0) Anzahl = 1;
      return Anzahl * 50;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Home', 'GetFavoritenlistehoehe', this.Debug.Typen.Page);
    }
  }
  AddChangelogClicked() {
    try {
      this.DBChangelog.CurrentChangelog = this.DBChangelog.GetEmptyChangelog();
      this.ShowChangelogEditor = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Home', 'AddChangelogClicked', this.Debug.Typen.Page);
    }
  }
  GetDatum(Zeitstempel) {
    try {
      let Datum = (0, moment_1.default)(Zeitstempel);
      return Datum.format('DD.MM.YYYY');
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Home', 'GetDatum', this.Debug.Typen.Page);
    }
  }
  ChangelogClicked(Changelog) {
    try {
      this.DBChangelog.CurrentChangelog = lodash.cloneDeep(Changelog);
      this.ShowChangelogEditor = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Home', 'ChangelogClicked', this.Debug.Typen.Page);
    }
  }
  PrepareDaten() {
    try {
      let Changelog;
      if (this.Pool.Changlogliste.length > 0) {
        Changelog = this.Pool.Changlogliste[0];
        this.Basics.AppVersionName = Changelog.Version;
        this.Basics.AppVersionDatum = (0, moment_1.default)(Changelog.Zeitstempel).format('DD.MM.YYYY');
      } else {
        this.Basics.AppVersionName = 'none';
        this.Basics.AppVersionDatum = 'none';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Home', 'PrepareDaten', this.Debug.Typen.Page);
    }
  }
  CountMitarbeiter() {
    try {
      return lodash.filter(this.Pool.Mitarbeiterliste, Mitarbeiter => {
        return !Mitarbeiter.Archiviert;
      }).length.toString();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Home', 'CountMitarbeiter', this.Debug.Typen.Page);
    }
  }
  CountProjekte() {
    try {
      /*
             let Liste: Projektestruktur[] =  lodash.filter(this.DBProjekte.Gesamtprojektliste, (Projekt: Projektestruktur) => {
               return Projekt.ProjektIsReal === true;
             });
             */
      return 0; //  Liste.length;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Home', 'CountProjekte', this.Debug.Typen.Page);
    }
  }
  RelaodButtonClicked() {
    try {
      this.Pool.ProjektdatenLoaded = false;
      this.PlayButtonClicked();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Home', 'RelaodButtonClicked', this.Debug.Typen.Page);
    }
  }
  environment = environment_1.environment;
  CheckAllMitarbeiterdaten() {
    try {
      let Valid = true;
      for (let Mitarbeiter of this.Pool.Mitarbeiterliste) {
        if (Mitarbeiter.Archiviert === false) {
          if (Mitarbeiter.Kuerzel === '' || Mitarbeiter.StandortID === '') {
            Valid = false;
          }
        }
      }
      return Valid;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Home', 'CheckAllMitarbeiterdaten', this.Debug.Typen.Page);
    }
  }
  static ctorParameters = () => [{
    type: basics_1.BasicsProvider
  }, {
    type: debug_1.DebugProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: msal_angular_1.MsalService
  }, {
    type: msal_angular_1.MsalBroadcastService
  }, {
    type: graph_1.Graphservice
  }, {
    type: database_changelog_service_1.DatabaseChangelogService
  }, {
    type: database_authentication_service_1.DatabaseAuthenticationService
  }, {
    type: security_service_1.SecurityService
  }, {
    type: menue_service_1.MenueService
  }];
};
exports.CommonHomePage = CommonHomePage;
exports.CommonHomePage = CommonHomePage = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'common-home-page',
  template: __webpack_require__(/*! ./common-home.page.html?ngResource */ 82748),
  styles: [__webpack_require__(/*! ./common-home.page.scss?ngResource */ 94264)]
})], CommonHomePage);

/***/ }),

/***/ 53964:
/*!*****************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-einstellungen/common-urlaub-einstellungen.module.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonUrlaubEinstellungenPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const common_urlaub_einstellungen_page_1 = __webpack_require__(/*! ./common-urlaub-einstellungen.page */ 79444);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 6168);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const urlausplanung_kalender_module_1 = __webpack_require__(/*! ../../components/pj-urlaubsplanung-kalender/urlausplanung-kalender.module */ 6232);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 72284);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 10272);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const fi_mitarbeiter_editor_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.module */ 27328);
const fi_mitarbeiter_auswahl_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.module */ 26668);
const routes = [{
  path: '',
  component: common_urlaub_einstellungen_page_1.CommonUrlaubEinstellungenPage
}];
let CommonUrlaubEinstellungenPageModule = class CommonUrlaubEinstellungenPageModule {};
exports.CommonUrlaubEinstellungenPageModule = CommonUrlaubEinstellungenPageModule;
exports.CommonUrlaubEinstellungenPageModule = CommonUrlaubEinstellungenPageModule = tslib_1.__decorate([(0, core_1.NgModule)({
  imports: [common_1.CommonModule, forms_1.FormsModule, angular_1.IonicModule, page_header_module_1.PageHeaderModule, router_1.RouterModule.forChild(routes), page_header_menu_module_1.PageHeaderMenuModule, page_footer_module_1.PageFooterModule, urlausplanung_kalender_module_1.UrlausplanungKalenderModule, button_value_module_1.ButtonValueModule, auswahl_dialog_module_1.AuswahlDialogModule, checkbox_clon_module_1.CheckboxClonModule, fi_mitarbeiter_editor_module_1.FiMitarbeiterEditorModule, fi_mitarbeiter_auswahl_module_1.FiMitarbeiterAuswahlModule],
  declarations: [common_urlaub_einstellungen_page_1.CommonUrlaubEinstellungenPage]
})], CommonUrlaubEinstellungenPageModule);

/***/ }),

/***/ 79444:
/*!***************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-einstellungen/common-urlaub-einstellungen.page.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonUrlaubEinstellungenPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment/moment */ 30816));
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ../../services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 15024);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 48044);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 22848);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
const lodash_es_1 = __webpack_require__(/*! lodash-es */ 55600);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const loadinganimation_1 = __webpack_require__(/*! ../../services/loadinganimation/loadinganimation */ 33940);
let CommonUrlaubEinstellungenPage = class CommonUrlaubEinstellungenPage {
  Basics;
  Pool;
  DB;
  DBMitarbeiter;
  Const;
  DBStandort;
  DBMitarbeiterstettings;
  Auswahlservice;
  Loadinganimation;
  Tools;
  Debug;
  PageHeader;
  PageFooter;
  Auswahlliste;
  Auswahlindex;
  Auswahltitel;
  ShowAuswahl;
  Auswahlhoehe;
  Auswahldialogorigin;
  ShowMitarbeiterauswahl;
  BlockCurrentMitarbeiter;
  AuswahlIDliste;
  MitarbeiterauswahlTitel;
  Projektbeteiligteliste;
  Urlaubsfreigeberliste;
  Homeofficefreigeberliste;
  MitarbeiterMultiselect;
  Ferienliste;
  Feiertageliste;
  DataSubscription;
  constructor(Basics, Pool, DB, DBMitarbeiter, Const, DBStandort, DBMitarbeiterstettings, Auswahlservice, Loadinganimation, Tools, Debug) {
    this.Basics = Basics;
    this.Pool = Pool;
    this.DB = DB;
    this.DBMitarbeiter = DBMitarbeiter;
    this.Const = Const;
    this.DBStandort = DBStandort;
    this.DBMitarbeiterstettings = DBMitarbeiterstettings;
    this.Auswahlservice = Auswahlservice;
    this.Loadinganimation = Loadinganimation;
    this.Tools = Tools;
    this.Debug = Debug;
    try {
      this.Auswahlliste = [{
        Index: 0,
        FirstColumn: '',
        SecoundColumn: '',
        Data: null
      }];
      this.Auswahlindex = 0;
      this.Auswahltitel = '';
      this.DataSubscription = null;
      this.Auswahldialogorigin = this.Const.NONE;
      this.ShowMitarbeiterauswahl = false;
      this.AuswahlIDliste = [];
      this.MitarbeiterauswahlTitel = '';
      this.MitarbeiterMultiselect = true;
      this.Ferienliste = [];
      this.Feiertageliste = [];
      this.Projektbeteiligteliste = [];
      this.Urlaubsfreigeberliste = [];
      this.Homeofficefreigeberliste = [];
      this.BlockCurrentMitarbeiter = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaub Einstellungen Page', 'constructor', this.Debug.Typen.Page);
    }
  }
  ngOnDestroy() {
    try {
      this.DataSubscription.unsubscribe();
      this.DataSubscription = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'OnDestroy', this.Debug.Typen.Page);
    }
  }
  ionViewDidEnter() {
    try {
      this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaub Einstellungen Page', 'ionViewDidEnter', this.Debug.Typen.Page);
    }
  }
  ngOnInit() {
    try {
      this.DataSubscription = this.Pool.LoadingAllDataFinished.subscribe(() => {
        this.PrepareData();
      });
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'OnInit', this.Debug.Typen.Page);
    }
  }
  PrepareData() {
    try {
      let Mitarbeiter;
      let Standort;
      this.DB.Init();
      this.DB.CheckSetup();
      this.DB.CountAnfragenanzahlen();
      this.Projektbeteiligteliste = [];
      for (let Eintrag of this.DB.CurrentUrlaub.Projektbeteiligteliste) {
        Mitarbeiter = this.DBMitarbeiter.GetMitarbeiterByID(Eintrag.MitarbeiterID);
        if (Mitarbeiter !== null) this.Projektbeteiligteliste.push(Mitarbeiter);
      }
      this.Projektbeteiligteliste.sort((a, b) => {
        if (a.Name < b.Name) return -1;
        if (a.Name > b.Name) return 1;
        return 0;
      });
      Standort = lodash.find(this.Pool.Standorteliste, {
        _id: this.DB.CurrentMitarbeiter.StandortID
      });
      this.Urlaubsfreigeberliste = [];
      for (let MitarbeterID of Standort.Urlaubfreigabepersonen) {
        Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
          _id: MitarbeterID
        });
        if (!lodash.isUndefined(Mitarbeiter)) this.Urlaubsfreigeberliste.push(Mitarbeiter);
      }
      this.Urlaubsfreigeberliste.sort((a, b) => {
        if (a.Name < b.Name) return -1;
        if (a.Name > b.Name) return 1;
        return 0;
      });
      this.Homeofficefreigeberliste = [];
      for (let MitarbeterID of Standort.Homeofficefreigabepersonen) {
        Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
          _id: MitarbeterID
        });
        if (!lodash.isUndefined(Mitarbeiter)) this.Homeofficefreigeberliste.push(Mitarbeiter);
      }
      this.Homeofficefreigeberliste.sort((a, b) => {
        if (a.Name < b.Name) return -1;
        if (a.Name > b.Name) return 1;
        return 0;
      });
      this.Ferienliste = [];
      if (!lodash.isUndefined(this.DB.Ferienliste[this.DB.Laendercode])) {
        this.Ferienliste = lodash.cloneDeep(this.DB.Ferienliste[this.DB.Laendercode]);
      }
      this.Feiertageliste = [];
      if (!lodash.isUndefined(this.DB.Feiertageliste[this.DB.Laendercode])) {
        this.Feiertageliste = lodash.cloneDeep(this.DB.Feiertageliste[this.DB.Laendercode]);
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'PrepareData', this.Debug.Typen.Page);
    }
  }
  MitarbeiterauswahlOkButtonClicked(idliste) {
    try {
      let Eintrag;
      let Mitarbeiter;
      let Index;
      switch (this.Auswahldialogorigin) {
        case this.Auswahlservice.Auswahloriginvarianten.UrlaubEinstellungen_Projektbeteiligte_Auswahl:
          // Projektbeteiligte auf die IDListe begrezen / gelöschte entfernen
          this.DB.CurrentUrlaub.Projektbeteiligteliste = lodash.filter(this.DB.CurrentUrlaub.Projektbeteiligteliste, beteiligt => {
            return idliste.indexOf(beteiligt.MitarbeiterID) !== -1;
          });
          // Neue Eintraege hinzufügen wenn nicht bereits vorhanden
          for (let id of idliste) {
            Eintrag = lodash.find(this.DB.CurrentUrlaub.Projektbeteiligteliste, {
              MitarbeiterID: id
            });
            if (lodash.isUndefined(Eintrag)) this.DB.CurrentUrlaub.Projektbeteiligteliste.push({
              MitarbeiterID: id,
              Display: false
            });
          }
          Index = lodash.findIndex(this.DB.CurrentMitarbeiter.Urlaubsliste, {
            Jahr: this.DB.CurrentUrlaub.Jahr
          });
          debugger;
          this.DB.CurrentMitarbeiter.Urlaubsliste[Index] = this.DB.CurrentUrlaub;
          this.DBMitarbeiter.UpdateMitarbeiterUrlaub(this.DB.CurrentMitarbeiter).then(() => {
            this.PrepareData();
          });
          break;
        case this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Mitarbeiter_Wechseln:
          Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
            _id: idliste[0]
          });
          this.DB.CurrentMitarbeiter = Mitarbeiter;
          this.PrepareData();
          break;
      }
      this.ShowMitarbeiterauswahl = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaub Einstellungen Page', 'MitarbeiterauswahlOkButtonClicked', this.Debug.Typen.Page);
    }
  }
  MitarebiterStandortfilterClickedHandler() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.UrlaubEinstellungen_Standort_Filter;
      let Index = 0;
      this.ShowAuswahl = true;
      this.Auswahltitel = 'Standort festlegen';
      this.Auswahlliste = [];
      this.Auswahlliste.push({
        Index: Index,
        FirstColumn: 'kein Filter',
        SecoundColumn: '',
        Data: null
      });
      Index++;
      for (let Eintrag of this.Pool.Standorteliste) {
        this.Auswahlliste.push({
          Index: Index,
          FirstColumn: Eintrag.Kuerzel,
          SecoundColumn: Eintrag.Standort,
          Data: Eintrag
        });
        Index++;
      }
      if (this.DBStandort.CurrentStandortfilter !== null) {
        this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, {
          _id: this.DBStandort.CurrentStandortfilter._id
        });
      } else this.Auswahlindex = 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaub Einstellungen Page', 'MitarebiterStandortfilterClickedHandler', this.Debug.Typen.Page);
    }
  }
  AuswahlOkButtonClicked(data) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        let Urlaub;
        debugger;
        switch (_this.Auswahldialogorigin) {
          case 'Urlaub':
            _this.DB.CurrentMitarbeiter.Urlaub = data;
            _this.DBMitarbeiter.UpdateMitarbeiterUrlaub(_this.DB.CurrentMitarbeiter);
            break;
          case _this.Auswahlservice.Auswahloriginvarianten.UrlaubEinstellungen_Standort_Filter:
            _this.DBStandort.CurrentStandortfilter = (0, lodash_es_1.cloneDeep)(data);
            _this.Pool.Mitarbeitersettings.StandortFilter = data !== null ? data._id : _this.Const.NONE;
            _this.DBMitarbeiterstettings.UpdateMitarbeitersettings(_this.Pool.Mitarbeitersettings, null).then(() => {
              _this.PrepareData();
              _this.DBStandort.StandortfilterChanged.emit();
            });
            break;
          case _this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Jahr_Aendern:
            _this.DB.CurrentJahr = data;
            yield _this.Loadinganimation.ShowLoadingAnimation('Hinweis', 'Daten werden geladen');
            yield _this.DB.ReadFeiertage('DE');
            yield _this.DB.ReadFeiertage('BG');
            yield _this.DB.ReadFerien('DE');
            yield _this.DB.ReadFerien('BG');
            yield _this.Loadinganimation.HideLoadingAnimation(true);
            break;
        }
        _this.ShowAuswahl = false;
        _this.PrepareData();
      } catch (error) {
        _this.Debug.ShowErrorMessage(error.message, 'Urlaub Einstellungen Page', 'AuswahlOkButtonClicked', _this.Debug.Typen.Page);
      }
    })();
  }
  MitarbeiterAuswahlClicked() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.UrlaubEinstellungen_Projektbeteiligte_Auswahl;
      this.MitarbeiterauswahlTitel = 'Mitarbeiter/innen auswählen';
      this.ShowMitarbeiterauswahl = true;
      this.BlockCurrentMitarbeiter = true;
      this.AuswahlIDliste = [];
      this.MitarbeiterMultiselect = true;
      for (let eintrag of this.DB.CurrentUrlaub.Projektbeteiligteliste) {
        this.AuswahlIDliste.push(eintrag.MitarbeiterID);
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'MitarbeiterWechselnClicked', this.Debug.Typen.Page);
    }
  }
  GetDatum(stempel) {
    try {
      return (0, moment_1.default)(stempel).format('DD.MM.YYYY');
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'GetDatum', this.Debug.Typen.Page);
    }
  }
  UrlaubClickedEvent() {
    try {
      this.Auswahldialogorigin = 'Urlaub';
      this.Auswahlhoehe = 600;
      this.Auswahltitel = 'Urlaubsanspruch festlegen';
      this.Auswahlliste = [];
      this.Auswahlliste.push({
        Index: 0,
        FirstColumn: '10',
        SecoundColumn: 'Tage',
        Data: 10
      });
      this.Auswahlliste.push({
        Index: 1,
        FirstColumn: '11',
        SecoundColumn: 'Tage',
        Data: 11
      });
      this.Auswahlliste.push({
        Index: 2,
        FirstColumn: '12',
        SecoundColumn: 'Tage',
        Data: 12
      });
      this.Auswahlliste.push({
        Index: 3,
        FirstColumn: '13',
        SecoundColumn: 'Tage',
        Data: 13
      });
      this.Auswahlliste.push({
        Index: 4,
        FirstColumn: '14',
        SecoundColumn: 'Tage',
        Data: 14
      });
      this.Auswahlliste.push({
        Index: 5,
        FirstColumn: '15',
        SecoundColumn: 'Tage',
        Data: 15
      });
      this.Auswahlliste.push({
        Index: 6,
        FirstColumn: '16',
        SecoundColumn: 'Tage',
        Data: 16
      });
      this.Auswahlliste.push({
        Index: 7,
        FirstColumn: '17',
        SecoundColumn: 'Tage',
        Data: 17
      });
      this.Auswahlliste.push({
        Index: 8,
        FirstColumn: '18',
        SecoundColumn: 'Tage',
        Data: 18
      });
      this.Auswahlliste.push({
        Index: 9,
        FirstColumn: '19',
        SecoundColumn: 'Tage',
        Data: 19
      });
      this.Auswahlliste.push({
        Index: 10,
        FirstColumn: '20',
        SecoundColumn: 'Tage',
        Data: 20
      });
      this.Auswahlliste.push({
        Index: 11,
        FirstColumn: '21',
        SecoundColumn: 'Tage',
        Data: 21
      });
      this.Auswahlliste.push({
        Index: 12,
        FirstColumn: '22',
        SecoundColumn: 'Tage',
        Data: 22
      });
      this.Auswahlliste.push({
        Index: 13,
        FirstColumn: '23',
        SecoundColumn: 'Tage',
        Data: 23
      });
      this.Auswahlliste.push({
        Index: 14,
        FirstColumn: '24',
        SecoundColumn: 'Tage',
        Data: 24
      });
      this.Auswahlliste.push({
        Index: 15,
        FirstColumn: '25',
        SecoundColumn: 'Tage',
        Data: 25
      });
      this.Auswahlliste.push({
        Index: 16,
        FirstColumn: '26',
        SecoundColumn: 'Tage',
        Data: 26
      });
      this.Auswahlliste.push({
        Index: 17,
        FirstColumn: '27',
        SecoundColumn: 'Tage',
        Data: 27
      });
      this.Auswahlliste.push({
        Index: 18,
        FirstColumn: '28',
        SecoundColumn: 'Tage',
        Data: 28
      });
      this.Auswahlliste.push({
        Index: 19,
        FirstColumn: '29',
        SecoundColumn: 'Tage',
        Data: 29
      });
      this.Auswahlliste.push({
        Index: 20,
        FirstColumn: '30',
        SecoundColumn: 'Tage',
        Data: 30
      });
      this.Auswahlliste.push({
        Index: 21,
        FirstColumn: '31',
        SecoundColumn: 'Tage',
        Data: 31
      });
      this.Auswahlliste.push({
        Index: 22,
        FirstColumn: '32',
        SecoundColumn: 'Tage',
        Data: 32
      });
      this.Auswahlliste.push({
        Index: 23,
        FirstColumn: '33',
        SecoundColumn: 'Tage',
        Data: 33
      });
      this.Auswahlliste.push({
        Index: 24,
        FirstColumn: '34',
        SecoundColumn: 'Tage',
        Data: 34
      });
      this.Auswahlliste.push({
        Index: 25,
        FirstColumn: '35',
        SecoundColumn: 'Tage',
        Data: 35
      });
      this.Auswahlliste.push({
        Index: 26,
        FirstColumn: '36',
        SecoundColumn: 'Tage',
        Data: 36
      });
      this.Auswahlindex = lodash.findIndex(this.Auswahlliste, Eintrag => {
        return Eintrag.Data === this.DB.CurrentMitarbeiter.Urlaub;
      });
      this.ShowAuswahl = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'ResturlaubClickedEvent', this.Debug.Typen.Page);
    }
  }
  CheckFerienBlocker(Anfangstempel) {
    try {
      return this.DB.CurrentUrlaub.Ferienblockerliste.indexOf(Anfangstempel) === -1;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'CheckFerienBlocker', this.Debug.Typen.Page);
    }
  }
  FerienBlockedChanged(event, Anfangstempel) {
    try {
      let Urlaub;
      if (event.status === false) {
        this.DB.CurrentUrlaub.Ferienblockerliste.push(Anfangstempel);
      } else {
        this.DB.CurrentUrlaub.Ferienblockerliste = lodash.filter(this.DB.CurrentUrlaub.Ferienblockerliste, stempel => {
          return stempel !== Anfangstempel;
        });
      }
      Urlaub = lodash.find(this.DB.CurrentMitarbeiter.Urlaubsliste, {
        Jahr: this.DB.CurrentUrlaub.Jahr
      });
      if (!lodash.isUndefined(Urlaub)) {
        Urlaub.Ferienblockerliste = this.DB.CurrentUrlaub.Ferienblockerliste;
        this.DBMitarbeiter.UpdateMitarbeiterUrlaub(this.DB.CurrentMitarbeiter);
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'FereinBlockedChanged', this.Debug.Typen.Page);
    }
  }
  CheckFeiertagBlocker(Anfangstempel) {
    try {
      return this.DB.CurrentUrlaub.Feiertageblockerliste.indexOf(Anfangstempel) === -1;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'CheckFeiertagBlocker', this.Debug.Typen.Page);
    }
  }
  FeiertagBlockedChanged(event, Anfangstempel) {
    try {
      let Urlaub;
      if (event.status === false) {
        this.DB.CurrentUrlaub.Feiertageblockerliste.push(Anfangstempel);
      } else {
        this.DB.CurrentUrlaub.Feiertageblockerliste = lodash.filter(this.DB.CurrentUrlaub.Feiertageblockerliste, stempel => {
          return stempel !== Anfangstempel;
        });
      }
      Urlaub = lodash.find(this.DB.CurrentMitarbeiter.Urlaubsliste, {
        Jahr: this.DB.CurrentUrlaub.Jahr
      });
      if (!lodash.isUndefined(Urlaub)) {
        Urlaub.Feiertageblockerliste = this.DB.CurrentUrlaub.Feiertageblockerliste;
        this.DBMitarbeiter.UpdateMitarbeiterUrlaub(this.DB.CurrentMitarbeiter);
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'FereinBlockedChanged', this.Debug.Typen.Page);
    }
  }
  MitarbeiterWechselnClicked() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Mitarbeiter_Wechseln;
      this.ShowMitarbeiterauswahl = true;
      this.BlockCurrentMitarbeiter = false;
      this.AuswahlIDliste = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'MitarbeiterWechselnClicked', this.Debug.Typen.Page);
    }
  }
  UrlaubMitarbeiterMeClickedHandler() {
    try {
      this.DB.CurrentMitarbeiter = this.Pool.Mitarbeiterdaten;
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Einstellungen Page', 'UrlaubMitarbeiterMeClickedHandler', this.Debug.Typen.Page);
    }
  }
  JahrButtonClickedHandler() {
    try {
      let Index = 0;
      let Jahr = this.DB.Jahr;
      let Nextjahr = Jahr + 1;
      this.Auswahltitel = 'Jahr wechseln';
      this.Auswahlliste = [];
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Jahr_Aendern;
      for (let j = this.DB.Startjahr; j <= Nextjahr; j++) {
        this.Auswahlliste.push({
          Index: Index++,
          FirstColumn: j.toString(),
          SecoundColumn: '',
          Data: j
        });
      }
      this.ShowAuswahl = true;
      this.Auswahlindex = lodash.findIndex(this.Auswahlliste, {
        Data: this.DB.CurrentJahr
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Einstellungen', 'JahrButtonClickedHandler', this.Debug.Typen.Page);
    }
  }
  static ctorParameters = () => [{
    type: basics_1.BasicsProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }, {
    type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService
  }, {
    type: auswahl_dialog_service_1.AuswahlDialogService
  }, {
    type: loadinganimation_1.LoadingAnimationService
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: debug_1.DebugProvider
  }];
  static propDecorators = {
    PageHeader: [{
      type: core_1.ViewChild,
      args: ['PageHeader', {
        static: false
      }]
    }],
    PageFooter: [{
      type: core_1.ViewChild,
      args: ['PageFooter', {
        static: false
      }]
    }]
  };
};
exports.CommonUrlaubEinstellungenPage = CommonUrlaubEinstellungenPage;
exports.CommonUrlaubEinstellungenPage = CommonUrlaubEinstellungenPage = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'common-urlaub-einstellungen-page',
  template: __webpack_require__(/*! ./common-urlaub-einstellungen.page.html?ngResource */ 76980),
  styles: [__webpack_require__(/*! ./common-urlaub-einstellungen.page.scss?ngResource */ 52856)]
})], CommonUrlaubEinstellungenPage);

/***/ }),

/***/ 5884:
/*!*********************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-freigaben/common-urlaub-freigaben.module.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonUrlaubFreigabenPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const common_urlaub_freigaben_page_1 = __webpack_require__(/*! ./common-urlaub-freigaben.page */ 76052);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 6168);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const urlausplanung_kalender_module_1 = __webpack_require__(/*! ../../components/pj-urlaubsplanung-kalender/urlausplanung-kalender.module */ 6232);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 72284);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 10272);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const fi_mitarbeiter_editor_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.module */ 27328);
const fi_mitarbeiter_auswahl_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.module */ 26668);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 6512);
const routes = [{
  path: '',
  component: common_urlaub_freigaben_page_1.CommonUrlaubFreigabenPage
}];
let CommonUrlaubFreigabenPageModule = class CommonUrlaubFreigabenPageModule {};
exports.CommonUrlaubFreigabenPageModule = CommonUrlaubFreigabenPageModule;
exports.CommonUrlaubFreigabenPageModule = CommonUrlaubFreigabenPageModule = tslib_1.__decorate([(0, core_1.NgModule)({
  imports: [common_1.CommonModule, forms_1.FormsModule, angular_1.IonicModule, page_header_module_1.PageHeaderModule, router_1.RouterModule.forChild(routes), page_header_menu_module_1.PageHeaderMenuModule, page_footer_module_1.PageFooterModule, urlausplanung_kalender_module_1.UrlausplanungKalenderModule, button_value_module_1.ButtonValueModule, auswahl_dialog_module_1.AuswahlDialogModule, checkbox_clon_module_1.CheckboxClonModule, fi_mitarbeiter_editor_module_1.FiMitarbeiterEditorModule, fi_mitarbeiter_auswahl_module_1.FiMitarbeiterAuswahlModule, abstand_element_fixed_module_1.AbstandElementFixedModule],
  declarations: [common_urlaub_freigaben_page_1.CommonUrlaubFreigabenPage]
})], CommonUrlaubFreigabenPageModule);

/***/ }),

/***/ 76052:
/*!*******************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-freigaben/common-urlaub-freigaben.page.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonUrlaubFreigabenPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment/moment */ 30816));
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ../../services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 15024);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 48044);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 22848);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
const lodash_es_1 = __webpack_require__(/*! lodash-es */ 55600);
const environment_1 = __webpack_require__(/*! ../../../environments/environment */ 36716);
const loadinganimation_1 = __webpack_require__(/*! ../../services/loadinganimation/loadinganimation */ 33940);
let CommonUrlaubFreigabenPage = class CommonUrlaubFreigabenPage {
  Loadinganimation;
  Basics;
  DBMitarbeitersettings;
  Pool;
  DB;
  DBMitarbeiter;
  Const;
  DBStandort;
  DBMitarbeiterstettings;
  Auswahlservice;
  Debug;
  PageHeader;
  PageFooter;
  environment = environment_1.environment;
  Auswahlliste;
  Auswahlindex;
  Auswahltitel;
  ShowAuswahl;
  Auswahldialogorigin;
  DataSubscription;
  ShowMitarbeiterauswahl;
  AuswahlIDliste;
  MitarbeiterauswahlTitel;
  MitarbeiterMultiselect;
  Message;
  Flagsource;
  LegendeVisible;
  Legendehoehe;
  Legendebreite;
  constructor(Loadinganimation, Basics, DBMitarbeitersettings, Pool, DB, DBMitarbeiter, Const, DBStandort, DBMitarbeiterstettings, Auswahlservice, Debug) {
    this.Loadinganimation = Loadinganimation;
    this.Basics = Basics;
    this.DBMitarbeitersettings = DBMitarbeitersettings;
    this.Pool = Pool;
    this.DB = DB;
    this.DBMitarbeiter = DBMitarbeiter;
    this.Const = Const;
    this.DBStandort = DBStandort;
    this.DBMitarbeiterstettings = DBMitarbeiterstettings;
    this.Auswahlservice = Auswahlservice;
    this.Debug = Debug;
    try {
      this.Auswahlliste = [{
        Index: 0,
        FirstColumn: '',
        SecoundColumn: '',
        Data: null
      }];
      this.Auswahlindex = 0;
      this.Auswahltitel = '';
      this.DataSubscription = null;
      this.Auswahldialogorigin = this.Const.NONE;
      this.ShowMitarbeiterauswahl = false;
      this.AuswahlIDliste = [];
      this.MitarbeiterauswahlTitel = '';
      this.MitarbeiterMultiselect = true;
      this.Message = '';
      this.Flagsource = '';
      this.LegendeVisible = false;
      this.Legendehoehe = 0;
      this.Legendebreite = 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaub Freigaben Page', 'constructor', this.Debug.Typen.Page);
    }
  }
  ngOnDestroy() {
    try {
      let Urlaub;
      for (let Mitarbeiter of this.DB.Homeofficefreigabenliste) {
        Urlaub = lodash.find(Mitarbeiter.Urlaubsliste, {
          Jahr: this.DB.CurrentUrlaub.Jahr
        });
        for (let Zeitspanne of Urlaub.Homeofficezeitspannen) {
          if (Zeitspanne.FreigabeantwortSended === false) {
            Zeitspanne.Status = this.DB.Homeofficestatusvarianten.Freigabeanfrage;
          }
        }
        if (Mitarbeiter._id === this.DB.CurrentMitarbeiter._id && Urlaub.Jahr === this.DB.CurrentUrlaub.Jahr) {
          this.DB.CurrentUrlaub = Urlaub;
        }
        this.DB.CountAnfragenanzahlen();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'OnDestroy', this.Debug.Typen.Page);
    }
  }
  ngOnInit() {
    try {
      this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
      this.Legendebreite = 400;
      this.Legendehoehe = this.Basics.InnerContenthoehe + 20;
      this.DataSubscription = this.Pool.LoadingAllDataFinished.subscribe(() => {
        this.PrepareData();
      });
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'OnInit', this.Debug.Typen.Page);
    }
  }
  PrepareData() {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        _this.DB.Init();
        _this.DB.CheckSetup();
        _this.DB.SetPlanungsmonate();
        _this.DB.CountAnfragenanzahlen();
        _this.DB.UpdateKalenderRequestEvent.emit();
      } catch (error) {
        _this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'PrepareData', _this.Debug.Typen.Page);
      }
    })();
  }
  GetDatumlangtext(Startstempel) {
    try {
      return (0, moment_1.default)(Startstempel).locale('de').format('DD. MMMM YYYY');
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'GetDatumlangtext', this.Debug.Typen.Page);
    }
  }
  UrlaubMitarbeiterMeClickedHandler() {
    try {
      this.DB.CurrentMitarbeiter = this.Pool.Mitarbeiterdaten;
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'UrlaubMitarbeiterMeClickedHandler', this.Debug.Typen.Page);
    }
  }
  MitarbeiterauswahlOkButtonClicked(idliste) {
    try {
      let Mitarbeiter;
      switch (this.Auswahldialogorigin) {
        case this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Mitarbeiter_Wechseln:
          Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
            _id: idliste[0]
          });
          this.DB.CurrentMitarbeiter = Mitarbeiter;
          this.PrepareData();
          break;
      }
      this.ShowMitarbeiterauswahl = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaub Freigaben Page', 'MitarbeiterauswahlOkButtonClicked', this.Debug.Typen.Page);
    }
  }
  MitarebiterStandortfilterClickedHandler() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.UrlaubAnfargen_Standort_Filter;
      let Index = 0;
      this.ShowAuswahl = true;
      this.Auswahltitel = 'Standort festlegen';
      this.Auswahlliste = [];
      this.Auswahlliste.push({
        Index: Index,
        FirstColumn: 'kein Filter',
        SecoundColumn: '',
        Data: null
      });
      Index++;
      for (let Eintrag of this.Pool.Standorteliste) {
        this.Auswahlliste.push({
          Index: Index,
          FirstColumn: Eintrag.Kuerzel,
          SecoundColumn: Eintrag.Standort,
          Data: Eintrag
        });
        Index++;
      }
      if (this.DBStandort.CurrentStandortfilter !== null) {
        this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, {
          _id: this.DBStandort.CurrentStandortfilter._id
        });
      } else this.Auswahlindex = 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaub Freigaben Page', 'MitarebiterStandortfilterClickedHandler', this.Debug.Typen.Page);
    }
  }
  AuswahlOkButtonClicked(data) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        switch (_this2.Auswahldialogorigin) {
          case _this2.Auswahlservice.Auswahloriginvarianten.UrlaubAnfargen_Standort_Filter:
            _this2.DBStandort.CurrentStandortfilter = (0, lodash_es_1.cloneDeep)(data);
            _this2.Pool.Mitarbeitersettings.StandortFilter = data !== null ? data._id : _this2.Const.NONE;
            _this2.DBMitarbeitersettings.UpdateMitarbeitersettings(_this2.Pool.Mitarbeitersettings, null).then(() => {
              _this2.ShowAuswahl = false;
              _this2.PrepareData();
              _this2.DBStandort.StandortfilterChanged.emit();
            });
            break;
          case _this2.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Jahr_Aendern:
            _this2.DB.CurrentJahr = data;
            _this2.ShowAuswahl = false;
            yield _this2.Loadinganimation.ShowLoadingAnimation('Hinweis', 'Daten werden geladen');
            yield _this2.DB.ReadFeiertage('DE');
            yield _this2.DB.ReadFeiertage('BG');
            yield _this2.DB.ReadFerien('DE');
            yield _this2.DB.ReadFerien('BG');
            yield _this2.Loadinganimation.HideLoadingAnimation(true);
            _this2.PrepareData();
            break;
        }
      } catch (error) {
        _this2.Debug.ShowErrorMessage(error.message, 'Urlaub Freigaben Page', 'AuswahlOkButtonClicked', _this2.Debug.Typen.Page);
      }
    })();
  }
  MitarbeiterWechselnClicked() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Mitarbeiter_Wechseln;
      this.ShowMitarbeiterauswahl = true;
      this.AuswahlIDliste = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'MitarbeiterWechselnClicked', this.Debug.Typen.Page);
    }
  }
  GetDatum(stempel) {
    try {
      return (0, moment_1.default)(stempel).format('DD.MM.YYYY');
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'GetDatum', this.Debug.Typen.Page);
    }
  }
  VerteretungStatusChangedHandler(event, Zeitspanne, _id) {
    try {
      let Index = lodash.findIndex(Zeitspanne.Vertretungskonversationliste, {
        VertreterID: this.DB.CurrentMitarbeiter._id
      });
      Zeitspanne.Vertretungskonversationliste[Index].Status = event.detail.value;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'VerteretungStatusChangedHandler', this.Debug.Typen.Page);
    }
  }
  FreigabeStatusChangedHandler(event, Zeitspanne, _id) {
    try {
      Zeitspanne.Status = event.detail.value;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'FreigabeStatusChangedHandler', this.Debug.Typen.Page);
    }
  }
  CheckVertretungUpdateButtonEnabled(Mitareiter, Urlaub) {
    try {
      let Available = false;
      let Standort = lodash.find(this.Pool.Standorteliste, {
        _id: Mitareiter.StandortID
      });
      let Konversation;
      for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
        Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
          VertreterID: this.DB.CurrentMitarbeiter._id
        });
        if (!lodash.isUndefined(Konversation)) {
          //Zeitspanne.UrlaubsvertreterID === this.DB.CurrentMitarbeiter._id &&
          if (Standort.Urlaubfreigabepersonen.length > 0 && Konversation.VertreterantwortSended === false && (Konversation.Status === this.DB.Urlaubstatusvarianten.Vertreterablehnung || Konversation.Status === this.DB.Urlaubstatusvarianten.Vertreterfreigabe)) Available = true;
        }
      }
      return Available;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'CheckVertretungUpdateButtonEnabled', this.Debug.Typen.Page);
    }
  }
  UrlaubSuchen(Zeitspanne, Mitarbeiter) {
    try {
      let Datum = (0, moment_1.default)(Zeitspanne.Startstempel);
      this.DB.CurrentMonatindex = Datum.month();
      this.DB.SetPlanungsmonate();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'UrlaubSuchen', this.Debug.Typen.Page);
    }
  }
  CheckFreigabeUpdateButtonEnabled(Mitareiter, Urlaub) {
    try {
      let Available = false;
      for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
        if (lodash.isUndefined(Zeitspanne.FreigabeantwortSended)) Zeitspanne.FreigabeantwortSended = false;
        if (Zeitspanne.FreigabeantwortSended === false && (Zeitspanne.Status === this.DB.Urlaubstatusvarianten.Genehmigt || Zeitspanne.Status === this.DB.Urlaubstatusvarianten.Abgelehnt)) Available = true;
      }
      return Available;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'CheckFreigabeUpdateButtonEnabled', this.Debug.Typen.Page);
    }
  }
  SendVertretungUpdate(Mitarbeiter, Urlaub) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        yield _this3.DB.UpdateVertreterantworten(Mitarbeiter, Urlaub);
        yield _this3.PrepareData();
        _this3.DB.ExterneUrlaubeChanged.emit();
      } catch (error) {
        _this3.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'SendVertretungUpdate', _this3.Debug.Typen.Page);
      }
    })();
  }
  FerientagCrossedEventHandler(Daten) {
    try {
      this.Message = Daten.Name;
      if (Daten.Laendercode !== '') {
        this.Flagsource = 'assets/images/';
        this.Flagsource += Daten.Laendercode === 'DE' ? 'de.png' : 'bg.png';
      } else {
        this.Flagsource = '';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'FerientagCrossedEventHandler', this.Debug.Typen.Page);
    }
  }
  DisplayExternCheckChanged(event, Urlaub, i) {
    try {
      let Beteiligt = lodash.find(this.DB.CurrentUrlaub.Projektbeteiligteliste, {
        MitarbeiterID: Urlaub.MitarbeiterIDExtern
      });
      if (!lodash.isUndefined(Beteiligt)) Beteiligt.Display = event.status;
      let Urlaubindex = lodash.findIndex(this.DB.CurrentMitarbeiter.Urlaubsliste, {
        Jahr: this.DB.CurrentJahr
      });
      this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = this.DB.CurrentUrlaub;
      this.DBMitarbeiter.UpdateMitarbeiterUrlaub(this.DB.CurrentMitarbeiter).then(() => {
        this.DB.ExterneUrlaubeChanged.emit();
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'DisplayExternCheckChanged', this.Debug.Typen.Page);
    }
  }
  DisplayMeinenUrlaubCheckChanged(event) {
    try {
      this.Pool.Mitarbeitersettings.UrlaubShowMeinenUrlaub = event.status;
      this.DBMitarbeiterstettings.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings, null).then(() => {
        this.DB.ExterneUrlaubeChanged.emit();
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'DisplayMeinenUrlaubCheckChanged', this.Debug.Typen.Page);
    }
  }
  MonatBackButtonClicked() {
    try {
      if (this.DB.CurrentMonatindex > 0) {
        this.DB.CurrentMonatindex--;
        this.DB.SetPlanungsmonate();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'MonatBackButtonClicked', this.Debug.Typen.Page);
    }
  }
  MonatForwardButtonClicked() {
    try {
      if (this.DB.CurrentMonatindex < 11) {
        this.DB.CurrentMonatindex++;
        this.DB.SetPlanungsmonate();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'MonatForwardButtonClicked', this.Debug.Typen.Page);
    }
  }
  FeiertagCrossedEventHandler(Daten) {
    try {
      this.Message = Daten.Name;
      if (Daten.Laendercode !== '') {
        this.Flagsource = 'assets/images/';
        this.Flagsource += Daten.Laendercode === 'DE' ? 'de.png' : 'bg.png';
      } else {
        this.Flagsource = '';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'FeiertagCrossedEventHandler', this.Debug.Typen.Page);
    }
  }
  MonatButtonClicked(Monatindex) {
    try {
      this.DB.CurrentMonatindex = Monatindex;
      this.DB.SetPlanungsmonate();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'MonatButtonClicked', this.Debug.Typen.Page);
    }
  }
  GetMonatButtonColor(Monatindex) {
    try {
      if (this.DB.CurrentMonatindex === Monatindex) return 'orange';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'GetMonatButtonColor', this.Debug.Typen.Page);
    }
  }
  AnsichtFerientageCheckChanged(event, landcode) {
    try {
      switch (landcode) {
        case 'DE':
          this.Pool.Mitarbeitersettings.UrlaubShowFerien_DE = event.status;
          this.DB.ShowFerientage_DE = event.status;
          break;
        case 'BG':
          this.Pool.Mitarbeitersettings.UrlaubShowFerien_BG = event.status;
          this.DB.ShowFerientage_BG = event.status;
          break;
      }
      this.DBMitarbeitersettings.SaveMitarbeitersettings().then(() => {});
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'AnsichtFerientageCheckChanged', this.Debug.Typen.Page);
    }
  }
  AnsichtFeiertageCheckChanged(event, landcode) {
    try {
      switch (landcode) {
        case 'DE':
          this.Pool.Mitarbeitersettings.UrlaubShowFeiertage_DE = event.status;
          this.DB.ShowFeiertage_DE = event.status;
          break;
        case 'BG':
          this.Pool.Mitarbeitersettings.UrlaubShowFeiertage_BG = event.status;
          this.DB.ShowFeiertage_BG = event.status;
          break;
      }
      this.DBMitarbeitersettings.SaveMitarbeitersettings().then(() => {});
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'AnsichtFeiertageCheckChanged', this.Debug.Typen.Page);
    }
  }
  GetStellvertretername(MitarbeieterID) {
    try {
      let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
        _id: MitarbeieterID
      });
      if (lodash.isUndefined(Mitarbeiter)) return 'unbekannt';else return Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'GetStellvertretername', this.Debug.Typen.Page);
    }
  }
  SendFreigabeUpdate(Mitarbeiter, Urlaub) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        yield _this4.DB.UpdateFreigabenantworten(Mitarbeiter, Urlaub);
        yield _this4.PrepareData();
        _this4.DB.ExterneUrlaubeChanged.emit();
      } catch (error) {
        _this4.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'SendFreigabeUpdate', _this4.Debug.Typen.Page);
      }
    })();
  }
  HomeofficeStatusChanged(event, Zeitspanne, Urlaub) {
    try {
      debugger;
      let Status = event.detail.value;
      Zeitspanne.Status = Status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'HomeofficeStatusChanged', this.Debug.Typen.Page);
    }
  }
  HomeofficeGenehmigeAll(Urlaub) {
    try {
      for (let Zeitspanne of Urlaub.Homeofficezeitspannen) {
        if (Zeitspanne.FreigabeantwortSended === false) {
          Zeitspanne.Status = this.DB.Homeofficestatusvarianten.Genehmigt;
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'HomeofficeGenehmigeAll', this.Debug.Typen.Page);
    }
  }
  HomeofficeAblehnenAll(Urlaub) {
    try {
      for (let Zeitspanne of Urlaub.Homeofficezeitspannen) {
        if (Zeitspanne.FreigabeantwortSended === false) {
          Zeitspanne.Status = this.DB.Homeofficestatusvarianten.Abgelehnt;
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'HomeofficeAblehnenAll', this.Debug.Typen.Page);
    }
  }
  SendHomeofficeUpdate(Urlaub, Mitarbeiter) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        yield _this5.DB.SendHomeofficeFreigabeantworten(Mitarbeiter, Urlaub);
        yield _this5.PrepareData();
        _this5.DB.ExterneHomeofficeChanged.emit();
      } catch (error) {
        _this5.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'SendHomeofficeUpdate', _this5.Debug.Typen.Page);
      }
    })();
  }
  CheckHomeofficeUpdateButtonEnabled(Urlaub) {
    try {
      let Enabled = false;
      for (let Zeitspanne of Urlaub.Homeofficezeitspannen) {
        if (Zeitspanne.FreigabeantwortSended === false) {
          if (Zeitspanne.Status === this.DB.Homeofficestatusvarianten.Abgelehnt || Zeitspanne.Status === this.DB.Homeofficestatusvarianten.Genehmigt) Enabled = true;
        }
      }
      return Enabled;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'CheckHomeofficeUpdateButtonEnabled', this.Debug.Typen.Page);
    }
  }
  GetPlanungmeldung(Zeitspanne, Mitarbeiter) {
    try {
      let Text;
      let Datum;
      let Konversation;
      switch (Zeitspanne.Status) {
        case this.DB.Urlaubstatusvarianten.Vertreteranfrage:
          Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
            VertreterID: this.DB.CurrentMitarbeiter._id
          });
          if (lodash.isUndefined(Konversation)) Datum = (0, moment_1.default)();else Datum = (0, moment_1.default)(Konversation.Vertretunganfragezeitstempel);
          Text = 'Vertretungsanfrage von ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' vom ' + Datum.format('DD.MM.YYYY');
          break;
        case this.DB.Urlaubstatusvarianten.Vertreterablehnung:
          Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
            VertreterID: this.DB.CurrentMitarbeiter._id
          });
          if (lodash.isUndefined(Konversation)) Datum = (0, moment_1.default)();else Datum = (0, moment_1.default)(Konversation.Vertretungantwortzeitstempel);
          Text = 'Vertretungsanfrage von ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' wurde am ' + Datum.format('DD.MM.YYYY') + ' abgelehnt';
          break;
        case this.DB.Urlaubstatusvarianten.Vertreterfreigabe:
          Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
            VertreterID: this.DB.CurrentMitarbeiter._id
          });
          if (lodash.isUndefined(Konversation)) Datum = (0, moment_1.default)();else Datum = (0, moment_1.default)(Konversation.Vertretungantwortzeitstempel);
          Text = 'Vertretungsanfrage von ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' wurde am ' + Datum.format('DD.MM.YYYY') + ' zugestimmt.';
          break;
      }
      return Text;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'GetPlanungmeldung', this.Debug.Typen.Page);
    }
  }
  CheckHasAnfragen(Urlaub) {
    try {
      let HasAnfragen = false;
      for (let Zeitspanne of Urlaub.Homeofficezeitspannen) {
        if (Zeitspanne.FreigabeantwortSended === false) HasAnfragen = true;
      }
      return HasAnfragen;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'CheckHasAnfragen', this.Debug.Typen.Page);
    }
  }
  HomeofficeSuchen(Zeitspanne) {
    try {
      let Datum = (0, moment_1.default)(Zeitspanne.Startstempel);
      this.DB.CurrentMonatindex = Datum.month();
      this.DB.SetPlanungsmonate();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'HomeofficeSuchen', this.Debug.Typen.Page);
    }
  }
  ExternUrlaubstagClickedEventHandler(mitarbeiterid) {
    try {
      let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
        _id: mitarbeiterid
      });
      if (lodash.isUndefined(Mitarbeiter) === false) {
        this.DB.CurrentMitarbeiter = Mitarbeiter;
        this.PrepareData();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'ExternUrlaubstagClickedEventHandler', this.Debug.Typen.Page);
    }
  }
  ShowHomeofficeChanged(event) {
    try {
      this.Pool.Mitarbeitersettings.ShowHomeoffice = event.status;
      this.DBMitarbeitersettings.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings, null).then(() => {
        this.DB.UpdateKalenderRequestEvent.emit();
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'ShowHomeofficeChanged', this.Debug.Typen.Page);
    }
  }
  JahrButtonClickedHandler() {
    try {
      let Index = 0;
      let Jahr = this.DB.Jahr;
      let Nextjahr = Jahr + 1;
      this.Auswahltitel = 'Jahr wechseln';
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Jahr_Aendern;
      this.Auswahlliste = [];
      for (let j = this.DB.Startjahr; j <= Nextjahr; j++) {
        this.Auswahlliste.push({
          Index: Index++,
          FirstColumn: j.toString(),
          SecoundColumn: '',
          Data: j
        });
      }
      this.ShowAuswahl = true;
      this.Auswahlindex = lodash.findIndex(this.Auswahlliste, {
        Data: this.DB.CurrentJahr
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaub Freigaben Page', 'JahrButtonClickedHandler', this.Debug.Typen.Page);
    }
  }
  static ctorParameters = () => [{
    type: loadinganimation_1.LoadingAnimationService
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }, {
    type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService
  }, {
    type: auswahl_dialog_service_1.AuswahlDialogService
  }, {
    type: debug_1.DebugProvider
  }];
  static propDecorators = {
    PageHeader: [{
      type: core_1.ViewChild,
      args: ['PageHeader', {
        static: false
      }]
    }],
    PageFooter: [{
      type: core_1.ViewChild,
      args: ['PageFooter', {
        static: false
      }]
    }]
  };
};
exports.CommonUrlaubFreigabenPage = CommonUrlaubFreigabenPage;
exports.CommonUrlaubFreigabenPage = CommonUrlaubFreigabenPage = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'common-urlaub-freigaben-page',
  template: __webpack_require__(/*! ./common-urlaub-freigaben.page.html?ngResource */ 95912),
  styles: [__webpack_require__(/*! ./common-urlaub-freigaben.page.scss?ngResource */ 95552)]
})], CommonUrlaubFreigabenPage);

/***/ }),

/***/ 98348:
/*!***********************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-gesamtuebersicht/common-urlaub-gesamtuebersicht.module.ts ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonUrlaubsgesamtuebersichtPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const common_urlaub_gesamtuebersicht_page_1 = __webpack_require__(/*! ./common-urlaub-gesamtuebersicht.page */ 26372);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 6168);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const urlausplanung_kalender_module_1 = __webpack_require__(/*! ../../components/pj-urlaubsplanung-kalender/urlausplanung-kalender.module */ 6232);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 72284);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 10272);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const fi_mitarbeiter_editor_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.module */ 27328);
const fi_mitarbeiter_auswahl_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.module */ 26668);
const routes = [{
  path: '',
  component: common_urlaub_gesamtuebersicht_page_1.CommonUrlaubGesamtuebersichtPage
}];
let CommonUrlaubsgesamtuebersichtPageModule = class CommonUrlaubsgesamtuebersichtPageModule {};
exports.CommonUrlaubsgesamtuebersichtPageModule = CommonUrlaubsgesamtuebersichtPageModule;
exports.CommonUrlaubsgesamtuebersichtPageModule = CommonUrlaubsgesamtuebersichtPageModule = tslib_1.__decorate([(0, core_1.NgModule)({
  imports: [common_1.CommonModule, forms_1.FormsModule, angular_1.IonicModule, page_header_module_1.PageHeaderModule, router_1.RouterModule.forChild(routes), page_header_menu_module_1.PageHeaderMenuModule, page_footer_module_1.PageFooterModule, urlausplanung_kalender_module_1.UrlausplanungKalenderModule, button_value_module_1.ButtonValueModule, auswahl_dialog_module_1.AuswahlDialogModule, checkbox_clon_module_1.CheckboxClonModule, fi_mitarbeiter_editor_module_1.FiMitarbeiterEditorModule, fi_mitarbeiter_auswahl_module_1.FiMitarbeiterAuswahlModule],
  declarations: [common_urlaub_gesamtuebersicht_page_1.CommonUrlaubGesamtuebersichtPage]
})], CommonUrlaubsgesamtuebersichtPageModule);

/***/ }),

/***/ 26372:
/*!*********************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-gesamtuebersicht/common-urlaub-gesamtuebersicht.page.ts ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonUrlaubGesamtuebersichtPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment/moment */ 30816));
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 48044);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
const lodash_es_1 = __webpack_require__(/*! lodash-es */ 55600);
const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ../../services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 15024);
const loadinganimation_1 = __webpack_require__(/*! ../../services/loadinganimation/loadinganimation */ 33940);
let CommonUrlaubGesamtuebersichtPage = class CommonUrlaubGesamtuebersichtPage {
  Loadinganimation;
  Basics;
  Pool;
  DB;
  Const;
  DBMitarbeitersettings;
  DBStandort;
  Auswahlservice;
  Debug;
  PageHeader;
  PageFooter;
  Ansichtenvarinaten = {
    Gesamtjahr: 'Gesamtjahr',
    HalbjahrEins: 'HalbjahrEins',
    HalbjahrZwei: 'HalbjahrZwei'
  };
  Ansichtvariante;
  Message;
  Auswahldialogorigin;
  DataSubscription;
  AuswahlIDliste;
  ShowMitarbeiterauswahl;
  LegendeVisible;
  Legendehoehe;
  Legendebreite;
  Flagsource;
  Standortliste;
  Mitrbeiterliste;
  Kalendertageliste;
  Kalenderwochenliste;
  Monatname;
  Tagesumme;
  Auswahlindex;
  Auswahltitel;
  Auswahlliste;
  ShowAuswahl;
  MitarbeiterauswahlTitel;
  Headerhoehe;
  Contenthoehe;
  constructor(Loadinganimation, Basics, Pool, DB, Const, DBMitarbeitersettings, DBStandort, Auswahlservice, Debug) {
    this.Loadinganimation = Loadinganimation;
    this.Basics = Basics;
    this.Pool = Pool;
    this.DB = DB;
    this.Const = Const;
    this.DBMitarbeitersettings = DBMitarbeitersettings;
    this.DBStandort = DBStandort;
    this.Auswahlservice = Auswahlservice;
    this.Debug = Debug;
    try {
      this.DataSubscription = null;
      this.Message = '';
      this.MitarbeiterauswahlTitel = '';
      this.Auswahldialogorigin = this.Const.NONE;
      this.AuswahlIDliste = [];
      this.Auswahlliste = [{
        Index: 0,
        FirstColumn: '',
        SecoundColumn: '',
        Data: null
      }];
      this.Auswahlindex = 0;
      this.Auswahltitel = '';
      this.ShowMitarbeiterauswahl = false;
      this.LegendeVisible = false;
      this.Legendehoehe = 0;
      this.Legendebreite = 0;
      this.Flagsource = '';
      this.Ansichtvariante = this.Ansichtenvarinaten.Gesamtjahr;
      this.Standortliste = [];
      this.Mitrbeiterliste = [];
      this.Kalendertageliste = [];
      this.Kalenderwochenliste = [];
      this.Mitrbeiterliste = [];
      this.Headerhoehe = 0;
      this.Contenthoehe = 0;
      this.Tagesumme = 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsuebersicht Page', 'constructor', this.Debug.Typen.Page);
    }
  }
  AuswahlOkButtonClicked(data) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        switch (_this.Auswahldialogorigin) {
          case _this.Auswahlservice.Auswahloriginvarianten.UrlaubPlanung_Standort_Filter:
            _this.DBStandort.CurrentStandortfilter = (0, lodash_es_1.cloneDeep)(data);
            _this.Pool.Mitarbeitersettings.StandortFilter = data !== null ? data._id : _this.Const.NONE;
            _this.DBMitarbeitersettings.UpdateMitarbeitersettings(_this.Pool.Mitarbeitersettings, null).then(() => {
              _this.ShowAuswahl = false;
              _this.DBStandort.StandortfilterChanged.emit();
            });
            break;
          case _this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Jahr_Aendern:
            _this.DB.CurrentJahr = data;
            _this.ShowAuswahl = false;
            yield _this.Loadinganimation.ShowLoadingAnimation('Hinweis', 'Daten werden geladen');
            yield _this.DB.ReadFeiertage('DE');
            yield _this.DB.ReadFeiertage('BG');
            yield _this.DB.ReadFerien('DE');
            yield _this.DB.ReadFerien('BG');
            yield _this.Loadinganimation.HideLoadingAnimation(true);
            _this.PrepareData();
            break;
        }
      } catch (error) {
        _this.Debug.ShowErrorMessage(error.message, 'Urlaubsplanung Page', 'AuswahlOkButtonClicked', _this.Debug.Typen.Page);
      }
    })();
  }
  MitarbeiterWechselnClicked() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Mitarbeiter_Wechseln;
      this.ShowMitarbeiterauswahl = true;
      this.AuswahlIDliste = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'MitarbeiterWechselnClicked', this.Debug.Typen.Page);
    }
  }
  ngOnDestroy() {
    try {
      this.DataSubscription.unsubscribe();
      this.DataSubscription = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'OnDestroy', this.Debug.Typen.Page);
    }
  }
  MitarbeiterauswahlOkButtonClicked(idliste) {
    try {
      let Mitarbeiter;
      switch (this.Auswahldialogorigin) {
        case this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Mitarbeiter_Wechseln:
          Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
            _id: idliste[0]
          });
          this.DB.CurrentMitarbeiter = Mitarbeiter;
          debugger;
          this.PrepareData();
          this.DB.PlanungsmonateChanged.emit();
          break;
      }
      this.ShowMitarbeiterauswahl = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsuebersicht Page', 'MitarbeiterauswahlOkButtonClicked', this.Debug.Typen.Page);
    }
  }
  MitarebiterStandortfilterClickedHandler() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.UrlaubPlanung_Standort_Filter;
      let Index = 0;
      this.ShowAuswahl = true;
      this.Auswahltitel = 'Standort festlegen';
      this.Auswahlliste = [];
      this.Auswahlliste.push({
        Index: Index,
        FirstColumn: 'kein Filter',
        SecoundColumn: '',
        Data: null
      });
      Index++;
      for (let Eintrag of this.Pool.Standorteliste) {
        this.Auswahlliste.push({
          Index: Index,
          FirstColumn: Eintrag.Kuerzel,
          SecoundColumn: Eintrag.Standort,
          Data: Eintrag
        });
        Index++;
      }
      if (this.DBStandort.CurrentStandortfilter !== null) {
        this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, {
          _id: this.DBStandort.CurrentStandortfilter._id
        });
      } else this.Auswahlindex = 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsplanung Page', 'MitarebiterStandortfilterClickedHandler', this.Debug.Typen.Page);
    }
  }
  ngOnInit() {
    try {
      let Heute = (0, moment_1.default)().locale('de');
      let Monat = Heute.month() + 1;
      if (Monat <= 6) this.Ansichtvariante = this.Ansichtenvarinaten.HalbjahrEins;else this.Ansichtvariante = this.Ansichtenvarinaten.HalbjahrZwei;
      this.DataSubscription = this.Pool.LoadingAllDataFinished.subscribe(() => {
        this.PrepareData();
      });
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'OnInit', this.Debug.Typen.Page);
    }
  }
  PrepareData() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        let Tageanzahl;
        let Tagindex;
        let Tage;
        let Monattext = _this2.DB.CurrentMonatindex + 1;
        let Tag;
        let Startdatum;
        let Standort;
        let NextStandort;
        let Datum;
        let CurrentKW;
        _this2.DB.Init();
        _this2.DB.CheckSetup();
        _this2.DB.CountAnfragenanzahlen();
        _this2.Monatname = _this2.DB.Monateliste[_this2.DB.CurrentMonatindex];
        if (Monattext < 10) Monattext = '0' + Monattext.toString();else Monattext = Monattext.toString();
        Tageanzahl = (0, moment_1.default)(_this2.DB.CurrentJahr.toString() + '-' + Monattext, "YYYY-MM").daysInMonth(); // 31
        _this2.Tagesumme = Tageanzahl;
        let MonatStartdatum = (0, moment_1.default)().set({
          date: 1,
          month: _this2.DB.CurrentMonatindex,
          year: _this2.DB.CurrentJahr,
          hour: 8,
          minute: 0
        }).locale('de');
        let MonatEndedatum = (0, moment_1.default)().set({
          date: Tageanzahl,
          month: _this2.DB.CurrentMonatindex,
          year: _this2.DB.CurrentJahr,
          hour: 8,
          minute: 0
        }).locale('de');
        Tagindex = MonatStartdatum.isoWeekday();
        Tage = Tagindex - 1;
        _this2.Tagesumme = _this2.Tagesumme + Tage;
        Startdatum = MonatStartdatum.clone().subtract(Tage, 'day');
        Datum = Startdatum.clone();
        Tagindex = MonatEndedatum.isoWeekday();
        Tage = 7 - Tagindex;
        _this2.Tagesumme = _this2.Tagesumme + Tage;
        CurrentKW = {
          Nummer: Datum.isoWeek(),
          Tageanzahl: 0
        };
        _this2.Kalendertageliste = [];
        _this2.Kalenderwochenliste = [];
        for (let i = 0; i < _this2.Tagesumme; i++) {
          Tag = {
            Tagnummer: Datum.date(),
            Tag: Datum.format('dd'),
            Datumstring: Datum.format('DD.MM.YYYY'),
            Hauptmonat: Datum.isSameOrAfter(MonatStartdatum, 'day') && Datum.isSameOrBefore(MonatEndedatum, 'day'),
            Kalenderwoche: Datum.isoWeek(),
            Tagstempel: Datum.valueOf(),
            Datum: Datum
          };
          _this2.Kalendertageliste.push(Tag);
          if (Tag.Kalenderwoche === CurrentKW.Nummer) CurrentKW.Tageanzahl++;else {
            _this2.Kalenderwochenliste.push(CurrentKW);
            CurrentKW = {
              Nummer: Tag.Kalenderwoche,
              Tageanzahl: 1
            };
          }
          Datum.add(1, 'day');
        }
        if (_this2.Kalenderwochenliste[_this2.Kalenderwochenliste.length - 1].Nummer != CurrentKW.Nummer) {
          _this2.Kalenderwochenliste.push(CurrentKW);
        }
        ;
        _this2.Standortliste = [];
        _this2.Mitrbeiterliste = [];
        for (let Mitarbeiter of _this2.Pool.Mitarbeiterliste) {
          if (Mitarbeiter.ShowInGesamtuebersicht && Mitarbeiter.Archiviert === false) {
            Standort = lodash.find(_this2.Pool.Standorteliste, {
              _id: Mitarbeiter.StandortID
            });
            if (!lodash.isUndefined(Standort)) {
              NextStandort = lodash.find(_this2.Standortliste, standort => {
                return Standort._id === standort._id;
              });
              if (lodash.isUndefined(NextStandort)) {
                _this2.Standortliste.push(Standort);
                _this2.Mitrbeiterliste[Standort._id] = [];
                _this2.Mitrbeiterliste[Standort._id].push(Mitarbeiter);
              } else {
                _this2.Mitrbeiterliste[Standort._id].push(Mitarbeiter);
              }
            }
          }
        }
      } catch (error) {
        _this2.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'PrepareData', _this2.Debug.Typen.Page);
      }
    })();
  }
  ionViewDidEnter() {
    try {
      this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
      this.Legendebreite = 320;
      this.Legendehoehe = this.Basics.InnerContenthoehe;
      this.Headerhoehe = 160;
      this.Contenthoehe = this.Basics.InnerContenthoehe - this.Headerhoehe;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsuebersicht Page', 'ionViewDidEnter', this.Debug.Typen.Page);
    }
  }
  StandortCheckChanged(event) {
    try {
      let Standort = lodash.find(this.Pool.Standorteliste, {
        _id: event.value
      });
      Standort.ShowInGesamtuebersicht = event.status;
      for (let Mitarbeiter of this.Pool.Mitarbeiterliste) {
        if (Mitarbeiter.StandortID === Standort._id) {
          Mitarbeiter.ShowInGesamtuebersicht = event.status;
        }
      }
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'StandortCheckChanged', this.Debug.Typen.Page);
    }
  }
  MitarbeiterCheckChanged(event) {
    try {
      let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
        _id: event.value
      });
      Mitarbeiter.ShowInGesamtuebersicht = event.status;
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'MitarbeiterCheckChanged', this.Debug.Typen.Page);
    }
  }
  MonatBackButtonClicked() {
    try {
      if (this.DB.CurrentMonatindex > 0) {
        this.DB.CurrentMonatindex--;
        this.PrepareData();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'MonatBackButtonClicked', this.Debug.Typen.Page);
    }
  }
  GetMonatButtonColor(Monatindex) {
    try {
      if (this.DB.CurrentMonatindex === Monatindex) return 'orange';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'GetMonatButtonColor', this.Debug.Typen.Page);
    }
  }
  MonatForwardButtonClicked() {
    try {
      if (this.DB.CurrentMonatindex < 11) {
        this.DB.CurrentMonatindex++;
        this.PrepareData();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'MonatForwardButtonClicked', this.Debug.Typen.Page);
    }
  }
  MonatButtonClicked(Monatindex) {
    try {
      this.DB.CurrentMonatindex = Monatindex;
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'MonatButtonClicked', this.Debug.Typen.Page);
    }
  }
  SettingsCheckedChanged(event) {
    try {
      switch (event.value) {
        case this.DB.Urlaubstatusvarianten.Geplant:
          this.DB.GesamtuebersichtSetting.ShowGeplant = event.status;
          break;
        case this.DB.Urlaubstatusvarianten.Vertreteranfrage:
          this.DB.GesamtuebersichtSetting.ShowVertreteranfragen = event.status;
          break;
        case this.DB.Urlaubstatusvarianten.Vertreterfreigabe:
          this.DB.GesamtuebersichtSetting.ShowVertreterfreigaben = event.status;
          break;
        case this.DB.Urlaubstatusvarianten.Vertreterablehnung:
          this.DB.GesamtuebersichtSetting.ShowVertreterablehnungen = event.status;
          break;
        case this.DB.Urlaubstatusvarianten.Genehmigt:
          this.DB.GesamtuebersichtSetting.ShowUrlaubsgenehmigungen = event.status;
          break;
        case this.DB.Urlaubstatusvarianten.Abgelehnt:
          this.DB.GesamtuebersichtSetting.ShowUrlaubsablehnungen = event.status;
          break;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'SettingsCheckedChanged', this.Debug.Typen.Page);
    }
  }
  SettingsHomeofficeCheckedChanged(event) {
    try {
      switch (event.value) {
        case this.DB.Homeofficestatusvarianten.Geplant:
          this.DB.GesamtuebersichtSetting.ShowHomeofficeGeplant = event.status;
          break;
        case this.DB.Homeofficestatusvarianten.Freigabeanfrage:
          this.DB.GesamtuebersichtSetting.ShowHomeofficeAnfrage = event.status;
          break;
        case this.DB.Homeofficestatusvarianten.Genehmigt:
          this.DB.GesamtuebersichtSetting.ShowHomeofficeGenehmigt = event.status;
          break;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'SettingsHomeofficeCheckedChanged', this.Debug.Typen.Page);
    }
  }
  UrlaubMitarbeiterMeClickedHandler() {
    try {
      this.DB.CurrentMitarbeiter = this.Pool.Mitarbeiterdaten;
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'UrlaubMitarbeiterMeClickedHandler', this.Debug.Typen.Page);
    }
  }
  JahrButtonClickedHandler() {
    try {
      let Index = 0;
      let Jahr = this.DB.Jahr;
      let Nextjahr = Jahr + 1;
      this.Auswahltitel = 'Jahr wechseln';
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Jahr_Aendern;
      this.Auswahlliste = [];
      for (let j = this.DB.Startjahr; j <= Nextjahr; j++) {
        this.Auswahlliste.push({
          Index: Index++,
          FirstColumn: j.toString(),
          SecoundColumn: '',
          Data: j
        });
      }
      this.ShowAuswahl = true;
      this.Auswahlindex = lodash.findIndex(this.Auswahlliste, {
        Data: this.DB.CurrentJahr
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'JahrButtonClickedHandler', this.Debug.Typen.Page);
    }
  }
  static ctorParameters = () => [{
    type: loadinganimation_1.LoadingAnimationService
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }, {
    type: auswahl_dialog_service_1.AuswahlDialogService
  }, {
    type: debug_1.DebugProvider
  }];
  static propDecorators = {
    PageHeader: [{
      type: core_1.ViewChild,
      args: ['PageHeader', {
        static: false
      }]
    }],
    PageFooter: [{
      type: core_1.ViewChild,
      args: ['PageFooter', {
        static: false
      }]
    }]
  };
};
exports.CommonUrlaubGesamtuebersichtPage = CommonUrlaubGesamtuebersichtPage;
exports.CommonUrlaubGesamtuebersichtPage = CommonUrlaubGesamtuebersichtPage = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'common-urlaub-gesamtuebersicht-page',
  template: __webpack_require__(/*! ./common-urlaub-gesamtuebersicht.page.html?ngResource */ 60800),
  styles: [__webpack_require__(/*! ./common-urlaub-gesamtuebersicht.page.scss?ngResource */ 46841)]
})], CommonUrlaubGesamtuebersichtPage);

/***/ }),

/***/ 74484:
/*!*****************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-planung/common-urlaub-planung.module.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonUrlaubsplanungPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const common_urlaub_planung_page_1 = __webpack_require__(/*! ./common-urlaub-planung.page */ 75908);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 6168);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const urlausplanung_kalender_module_1 = __webpack_require__(/*! ../../components/pj-urlaubsplanung-kalender/urlausplanung-kalender.module */ 6232);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 72284);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 10272);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const fi_mitarbeiter_editor_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.module */ 27328);
const fi_mitarbeiter_auswahl_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.module */ 26668);
const routes = [{
  path: '',
  component: common_urlaub_planung_page_1.CommonUrlaubPlanungPage
}];
let CommonUrlaubsplanungPageModule = class CommonUrlaubsplanungPageModule {};
exports.CommonUrlaubsplanungPageModule = CommonUrlaubsplanungPageModule;
exports.CommonUrlaubsplanungPageModule = CommonUrlaubsplanungPageModule = tslib_1.__decorate([(0, core_1.NgModule)({
  imports: [common_1.CommonModule, forms_1.FormsModule, angular_1.IonicModule, page_header_module_1.PageHeaderModule, router_1.RouterModule.forChild(routes), page_header_menu_module_1.PageHeaderMenuModule, page_footer_module_1.PageFooterModule, urlausplanung_kalender_module_1.UrlausplanungKalenderModule, button_value_module_1.ButtonValueModule, auswahl_dialog_module_1.AuswahlDialogModule, checkbox_clon_module_1.CheckboxClonModule, fi_mitarbeiter_editor_module_1.FiMitarbeiterEditorModule, fi_mitarbeiter_auswahl_module_1.FiMitarbeiterAuswahlModule],
  declarations: [common_urlaub_planung_page_1.CommonUrlaubPlanungPage]
})], CommonUrlaubsplanungPageModule);

/***/ }),

/***/ 75908:
/*!***************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-planung/common-urlaub-planung.page.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonUrlaubPlanungPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment/moment */ 30816));
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ../../services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 15024);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 48044);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 22848);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const lodash_es_1 = __webpack_require__(/*! lodash-es */ 55600);
const loadinganimation_1 = __webpack_require__(/*! ../../services/loadinganimation/loadinganimation */ 33940);
let CommonUrlaubPlanungPage = class CommonUrlaubPlanungPage {
  Loadinganimation;
  Basics;
  DBMitarbeitersettings;
  Pool;
  DB;
  DBMitarbeiter;
  Const;
  DBStandort;
  Auswahlservice;
  Tools;
  Debug;
  PageHeader;
  PageFooter;
  Monateliste_Uebersicht;
  Monateliste_Mounseover;
  Auswahlliste;
  BundeslandAuswahlliste;
  Auswahlindex;
  Auswahltitel;
  ShowAuswahl;
  Auswahlhoehe;
  Message;
  ShowMitarbeitereditor;
  AddUrlaubRunning;
  AddHalberUrlaubstagRunning;
  AddHomeofficeRunning;
  Auswahldialogorigin;
  DataSubscription;
  ShowMitarbeiterauswahl;
  AuswahlIDliste;
  MitarbeiterauswahlTitel;
  LegendeVisible;
  Legendehoehe;
  Legendebreite;
  Flagsource;
  MitarbeiterMultiselect;
  constructor(Loadinganimation, Basics, DBMitarbeitersettings, Pool, DB, DBMitarbeiter, Const, DBStandort, Auswahlservice, Tools, Debug) {
    this.Loadinganimation = Loadinganimation;
    this.Basics = Basics;
    this.DBMitarbeitersettings = DBMitarbeitersettings;
    this.Pool = Pool;
    this.DB = DB;
    this.DBMitarbeiter = DBMitarbeiter;
    this.Const = Const;
    this.DBStandort = DBStandort;
    this.Auswahlservice = Auswahlservice;
    this.Tools = Tools;
    this.Debug = Debug;
    try {
      this.Monateliste_Uebersicht = [];
      this.Monateliste_Uebersicht.push(['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni']);
      this.Monateliste_Uebersicht.push(['Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']);
      this.Monateliste_Mounseover = [false, false, false, false, false, false, false, false, false, false, false, false];
      this.Auswahlliste = [{
        Index: 0,
        FirstColumn: '',
        SecoundColumn: '',
        Data: null
      }];
      this.Auswahlindex = 0;
      this.Auswahltitel = '';
      this.DataSubscription = null;
      this.Message = '';
      this.ShowMitarbeitereditor = false;
      this.Auswahldialogorigin = this.Const.NONE;
      this.AddUrlaubRunning = false;
      this.AddHomeofficeRunning = false;
      this.ShowMitarbeiterauswahl = false;
      this.AuswahlIDliste = [];
      this.MitarbeiterauswahlTitel = 'Mitarbeiter wechseln';
      this.LegendeVisible = false;
      this.Legendehoehe = 0;
      this.Legendebreite = 0;
      this.Flagsource = '';
      this.AddHalberUrlaubstagRunning = false;
      this.MitarbeiterMultiselect = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsplanung Page', 'constructor', this.Debug.Typen.Page);
    }
  }
  ngOnDestroy() {
    try {
      this.DataSubscription.unsubscribe();
      this.DataSubscription = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'OnDestroy', this.Debug.Typen.Page);
    }
  }
  ionViewDidEnter() {
    try {
      this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
      this.Legendebreite = 400;
      this.Legendehoehe = this.Basics.InnerContenthoehe;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaub Einstellungen Page', 'ionViewDidEnter', this.Debug.Typen.Page);
    }
  }
  ngOnInit() {
    try {
      this.DataSubscription = this.Pool.LoadingAllDataFinished.subscribe(() => {
        this.PrepareData();
      });
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'OnInit', this.Debug.Typen.Page);
    }
  }
  AuswahlOkButtonClicked(data) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        let Zeitspanne;
        let Urlaubindex;
        let Konversation;
        switch (_this.Auswahldialogorigin) {
          case _this.Auswahlservice.Auswahloriginvarianten.Urlaubsliste_Bundesland:
            _this.DB.Bundeslandkuerzel = data;
            let landcode = _this.DB.Bundeslandkuerzel.substring(0, 2);
            _this.DB.ReadFeiertage(landcode).then(() => {
              _this.ShowAuswahl = false;
              _this.PrepareData();
            });
            break;
          case _this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Status_Aendern:
            if (data !== null && data !== _this.DB.CurrentUrlaubzeitspanne.Status) {
              Zeitspanne = lodash.find(_this.DB.CurrentUrlaub.Urlaubzeitspannen, {
                ZeitspannenID: _this.DB.CurrentUrlaubzeitspanne.ZeitspannenID
              });
              Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
                VertreterID: _this.DB.CurrentMitarbeiter._id
              });
              switch (data) {
                case _this.DB.Urlaubstatusvarianten.Geplant:
                  Zeitspanne.Status = data;
                  Zeitspanne.FreigabeanfrageSended = false;
                  Zeitspanne.FreigabeantwortSended = false;
                  Zeitspanne.FreigabeantwortOfficeSended = false;
                  Zeitspanne.Freigabeantwortzeitstempel = null;
                  Zeitspanne.FreigabeantwortOfficezeitstempel = null;
                  if (lodash.isUndefined(Konversation) === false) {
                    Konversation.VertreteranfrageSended = false;
                    Konversation.VertreterantwortSended = false;
                    Konversation.Vertretunganfragezeitstempel = null;
                    Konversation.Vertretungantwortzeitstempel = null;
                    Konversation.Vertretungantwortzeitstempel = null;
                  }
                  Urlaubindex = lodash.findIndex(_this.DB.CurrentMitarbeiter.Urlaubsliste, {
                    Jahr: _this.DB.CurrentJahr
                  });
                  _this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = _this.DB.CurrentUrlaub;
                  yield _this.DBMitarbeiter.UpdateMitarbeiterUrlaub(_this.DB.CurrentMitarbeiter).then(() => {
                    _this.ShowAuswahl = false;
                  });
                  break;
                case _this.DB.Urlaubstatusvarianten.Vertreteranfrage:
                  if (Zeitspanne.UrlaubsvertreterIDListe.length > 0) {
                    Zeitspanne.Status = data;
                    _this.DB.UpdateVertreteranfragen();
                  } else {
                    Zeitspanne.Status = _this.DB.Urlaubstatusvarianten.Geplant;
                    Urlaubindex = lodash.findIndex(_this.DB.CurrentMitarbeiter.Urlaubsliste, {
                      Jahr: _this.DB.CurrentJahr
                    });
                    _this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = _this.DB.CurrentUrlaub;
                    yield _this.DBMitarbeiter.UpdateMitarbeiterUrlaub(_this.DB.CurrentMitarbeiter).then(() => {
                      _this.ShowAuswahl = false;
                    });
                  }
                  break;
                case _this.DB.Urlaubstatusvarianten.Vertreterfreigabe:
                  break;
                case _this.DB.Urlaubstatusvarianten.Vertreterablehnung:
                  Zeitspanne.Status = data;
                  Urlaubindex = lodash.findIndex(_this.DB.CurrentMitarbeiter.Urlaubsliste, {
                    Jahr: _this.DB.CurrentJahr
                  });
                  _this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = _this.DB.CurrentUrlaub;
                  yield _this.DBMitarbeiter.UpdateMitarbeiterUrlaub(_this.DB.CurrentMitarbeiter).then(() => {
                    _this.ShowAuswahl = false;
                  });
                  break;
                case _this.DB.Urlaubstatusvarianten.Abgelehnt:
                  Zeitspanne.Status = data;
                  Urlaubindex = lodash.findIndex(_this.DB.CurrentMitarbeiter.Urlaubsliste, {
                    Jahr: _this.DB.CurrentJahr
                  });
                  _this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = _this.DB.CurrentUrlaub;
                  yield _this.DBMitarbeiter.UpdateMitarbeiterUrlaub(_this.DB.CurrentMitarbeiter).then(() => {
                    _this.ShowAuswahl = false;
                  });
                  break;
                case _this.DB.Urlaubstatusvarianten.Genehmigt:
                  Zeitspanne.Status = data;
                  _this.DB.CurrentUrlaub = yield _this.DB.SendOfficeFreigabezusage(_this.DB.CurrentMitarbeiter, _this.Pool.Mitarbeiterdaten, _this.DB.CurrentUrlaub);
                  Urlaubindex = lodash.findIndex(_this.DB.CurrentMitarbeiter.Urlaubsliste, {
                    Jahr: _this.DB.CurrentJahr
                  });
                  _this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = _this.DB.CurrentUrlaub;
                  yield _this.DBMitarbeiter.UpdateMitarbeiterUrlaub(_this.DB.CurrentMitarbeiter).then(() => {
                    _this.ShowAuswahl = false;
                  });
                  break;
              }
            }
            break;
          case _this.Auswahlservice.Auswahloriginvarianten.UrlaubPlanung_Standort_Filter:
            _this.DBStandort.CurrentStandortfilter = (0, lodash_es_1.cloneDeep)(data);
            _this.Pool.Mitarbeitersettings.StandortFilter = data !== null ? data._id : _this.Const.NONE;
            _this.DBMitarbeitersettings.UpdateMitarbeitersettings(_this.Pool.Mitarbeitersettings, null).then(() => {
              _this.ShowAuswahl = false;
              _this.PrepareData();
              _this.DBStandort.StandortfilterChanged.emit();
            });
            break;
          case _this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Jahr_Aendern:
            _this.DB.CurrentJahr = data;
            _this.ShowAuswahl = false;
            yield _this.Loadinganimation.ShowLoadingAnimation('Hinweis', 'Daten werden geladen');
            yield _this.DB.ReadFeiertage('DE');
            yield _this.DB.ReadFeiertage('BG');
            yield _this.DB.ReadFerien('DE');
            yield _this.DB.ReadFerien('BG');
            yield _this.Loadinganimation.HideLoadingAnimation(true);
            _this.PrepareData();
            break;
        }
      } catch (error) {
        _this.Debug.ShowErrorMessage(error.message, 'Urlaubsplanung Page', 'AuswahlOkButtonClicked', _this.Debug.Typen.Page);
      }
    })();
  }
  PrepareData() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        let Index = 0;
        _this2.DB.Init();
        _this2.DB.CheckSetup();
        _this2.DB.SetPlanungsmonate();
        _this2.DB.CountAnfragenanzahlen();
        _this2.DB.UpdateKalenderRequestEvent.emit();
        _this2.BundeslandAuswahlliste = [];
        for (let Region of _this2.DB.Regionenliste) {
          _this2.BundeslandAuswahlliste.push({
            Index: Index,
            FirstColumn: Region.Name,
            SecoundColumn: Region.isoCode,
            Data: Region.isoCode
          });
          Index++;
        }
        _this2.DB.Bundesland = lodash.find(_this2.BundeslandAuswahlliste, {
          Data: _this2.DB.Bundeslandkuerzel
        }).FirstColumn;
      } catch (error) {
        _this2.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'PrepareData', _this2.Debug.Typen.Page);
      }
    })();
  }
  FeiertagCrossedEventHandler(Daten) {
    try {
      this.Message = Daten.Name;
      if (Daten.Laendercode !== '') {
        this.Flagsource = 'assets/images/';
        this.Flagsource += Daten.Laendercode === 'DE' ? 'de.png' : 'bg.png';
      } else {
        this.Flagsource = '';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'FeiertagCrossedEventHandler', this.Debug.Typen.Page);
    }
  }
  FerientagCrossedEventHandler(Daten) {
    try {
      this.Message = Daten.Name;
      if (Daten.Laendercode !== '') {
        this.Flagsource = 'assets/images/';
        this.Flagsource += Daten.Laendercode === 'DE' ? 'de.png' : 'bg.png';
      } else {
        this.Flagsource = '';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'FerientagCrossedEventHandler', this.Debug.Typen.Page);
    }
  }
  GetDatum(Anfangstempel) {
    return (0, moment_1.default)(Anfangstempel).format('DD.MM.YYYY');
  }
  AnsichtFerientageCheckChanged(event, landcode) {
    try {
      switch (landcode) {
        case 'DE':
          this.Pool.Mitarbeitersettings.UrlaubShowFerien_DE = event.status;
          this.DB.ShowFerientage_DE = event.status;
          break;
        case 'BG':
          this.Pool.Mitarbeitersettings.UrlaubShowFerien_BG = event.status;
          this.DB.ShowFerientage_BG = event.status;
          break;
      }
      this.DBMitarbeitersettings.SaveMitarbeitersettings().then(() => {});
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'AnsichtFerientageCheckChanged', this.Debug.Typen.Page);
    }
  }
  AnsichtFeiertageCheckChanged(event, landcode) {
    try {
      switch (landcode) {
        case 'DE':
          this.Pool.Mitarbeitersettings.UrlaubShowFeiertage_DE = event.status;
          this.DB.ShowFeiertage_DE = event.status;
          break;
        case 'BG':
          this.Pool.Mitarbeitersettings.UrlaubShowFeiertage_BG = event.status;
          this.DB.ShowFeiertage_BG = event.status;
          break;
      }
      this.DBMitarbeitersettings.SaveMitarbeitersettings().then(() => {});
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'AnsichtFeiertageCheckChanged', this.Debug.Typen.Page);
    }
  }
  GetMonatButtonColor(Monatindex) {
    try {
      if (this.DB.CurrentMonatindex === Monatindex) return 'orange';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'GetMonatButtonColor', this.Debug.Typen.Page);
    }
  }
  MonatButtonClicked(Monatindex) {
    try {
      this.DB.CurrentMonatindex = Monatindex;
      this.DB.SetPlanungsmonate();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'MonatButtonClicked', this.Debug.Typen.Page);
    }
  }
  MonatBackButtonClicked() {
    try {
      if (this.DB.CurrentMonatindex > 0) {
        this.DB.CurrentMonatindex--;
        this.DB.SetPlanungsmonate();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'MonatBackButtonClicked', this.Debug.Typen.Page);
    }
  }
  MonatForwardButtonClicked() {
    try {
      if (this.DB.CurrentMonatindex < 11) {
        this.DB.CurrentMonatindex++;
        this.DB.SetPlanungsmonate();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'MonatForwardButtonClicked', this.Debug.Typen.Page);
    }
  }
  AddUrlaub() {
    try {
      this.DB.CurrentUrlaubzeitspanne = null;
      this.AddUrlaubRunning = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'AddUrlaub', this.Debug.Typen.Page);
    }
  }
  AddHalbenUrlaubstag() {
    try {
      this.DB.CurrentUrlaubzeitspanne = null;
      this.AddHalberUrlaubstagRunning = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'AddHalbenUrlaubstag', this.Debug.Typen.Page);
    }
  }
  AddHomeofficeStart() {
    try {
      this.DB.CurrentHomeofficezeitspanne = null;
      this.AddHomeofficeRunning = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'AddHomeofficeStart', this.Debug.Typen.Page);
    }
  }
  AddUrlaubFinishedHandler() {
    try {
      this.AddUrlaubRunning = false;
      this.AddHalberUrlaubstagRunning = false;
      if (this.DB.CurrentUrlaubzeitspanne !== null) {
        this.DB.CurrentUrlaub.Urlaubzeitspannen.push(this.DB.CurrentUrlaubzeitspanne);
        let Urlaubindex = lodash.findIndex(this.DB.CurrentMitarbeiter.Urlaubsliste, {
          Jahr: this.DB.CurrentJahr
        });
        this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = this.DB.CurrentUrlaub;
        this.DBMitarbeiter.UpdateMitarbeiterUrlaub(this.DB.CurrentMitarbeiter).then(() => {});
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'AddUrlaubFinishedHandler', this.Debug.Typen.Page);
    }
  }
  UrlaubLoeschen(Zeitspanne) {
    try {
      let Zeitspannen = lodash.filter(this.DB.CurrentUrlaub.Urlaubzeitspannen, eintrag => {
        return eintrag.ZeitspannenID !== Zeitspanne.ZeitspannenID;
      });
      this.DB.CurrentUrlaub = lodash.find(this.DB.CurrentMitarbeiter.Urlaubsliste, {
        Jahr: this.DB.CurrentJahr
      });
      this.DB.CurrentUrlaub.Urlaubzeitspannen = Zeitspannen;
      let Urlaubindex = lodash.findIndex(this.DB.CurrentMitarbeiter.Urlaubsliste, {
        Jahr: this.DB.CurrentJahr
      });
      this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = this.DB.CurrentUrlaub;
      this.DBMitarbeiter.UpdateMitarbeiterUrlaub(this.DB.CurrentMitarbeiter).then(() => {
        this.DB.PlanungsmonateChanged.emit();
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'UrlaubLoeschen', this.Debug.Typen.Page);
    }
  }
  AnsichtCheckChanged(event, origin) {
    try {
      switch (origin) {
        case this.DB.Urlaubstatusvarianten.Geplant:
          this.Pool.Mitarbeitersettings.UrlaubShowBeantragt = event.status;
          break;
        case this.DB.Urlaubstatusvarianten.Vertreterfreigabe:
          this.Pool.Mitarbeitersettings.UrlaubShowVertreterfreigabe = event.status;
          break;
        case this.DB.Urlaubstatusvarianten.Genehmigt:
          this.Pool.Mitarbeitersettings.UrlaubShowGenehmigt = event.status;
          break;
        case this.DB.Urlaubstatusvarianten.Abgelehnt:
          this.Pool.Mitarbeitersettings.UrlaubShowAbgelehnt = event.status;
          break;
      }
      this.DBMitarbeitersettings.SaveMitarbeitersettings().then(() => {});
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'AnsichtCheckChanged', this.Debug.Typen.Page);
    }
  }
  UrlaubSuchen(Zeitspanne) {
    try {
      let Datum = (0, moment_1.default)(Zeitspanne.Startstempel);
      this.DB.CurrentMonatindex = Datum.month();
      this.DB.SetPlanungsmonate();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'UrlaubSuchen', this.Debug.Typen.Page);
    }
  }
  GetDatumlangtext(Startstempel) {
    try {
      return (0, moment_1.default)(Startstempel).locale('de').format('DD. MMMM YYYY');
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'GetDatumlangtext', this.Debug.Typen.Page);
    }
  }
  MitarbeiterauswahlOkButtonClicked(idliste) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        let Mitarbeiter;
        let Zeitspanne;
        let Urlaubindex;
        switch (_this3.Auswahldialogorigin) {
          case _this3.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Mitarbeiter_Wechseln:
            Mitarbeiter = lodash.find(_this3.Pool.Mitarbeiterliste, {
              _id: idliste[0]
            });
            _this3.DB.CurrentMitarbeiter = Mitarbeiter;
            _this3.PrepareData();
            _this3.DB.PlanungsmonateChanged.emit();
            break;
          case _this3.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Vertreter_Festlegen:
            Zeitspanne = lodash.find(_this3.DB.CurrentUrlaub.Urlaubzeitspannen, {
              ZeitspannenID: _this3.DB.CurrentUrlaubzeitspanne.ZeitspannenID
            });
            Zeitspanne.UrlaubsvertreterIDListe = idliste;
            Zeitspanne.Status = _this3.DB.Urlaubstatusvarianten.Geplant;
            Zeitspanne.FreigabeantwortSended = false;
            Zeitspanne.FreigabeanfrageSended = false;
            _this3.DB.InitVertreterkonversationen(Zeitspanne, true);
            Urlaubindex = lodash.findIndex(_this3.DB.CurrentMitarbeiter.Urlaubsliste, {
              Jahr: _this3.DB.CurrentJahr
            });
            _this3.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = _this3.DB.CurrentUrlaub;
            yield _this3.DBMitarbeiter.UpdateMitarbeiterUrlaub(_this3.DB.CurrentMitarbeiter).then(() => {
              _this3.DB.CurrentUrlaubzeitspanne.UrlaubsvertreterIDListe = idliste;
            });
            break;
        }
        _this3.ShowMitarbeiterauswahl = false;
      } catch (error) {
        _this3.Debug.ShowErrorMessage(error.message, 'Urlaubsplanung Page', 'MitarbeiterauswahlOkButtonClicked', _this3.Debug.Typen.Page);
      }
    })();
  }
  MitarebiterStandortfilterClickedHandler() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.UrlaubPlanung_Standort_Filter;
      let Index = 0;
      this.ShowAuswahl = true;
      this.Auswahltitel = 'Standort festlegen';
      this.Auswahlliste = [];
      this.Auswahlliste.push({
        Index: Index,
        FirstColumn: 'kein Filter',
        SecoundColumn: '',
        Data: null
      });
      Index++;
      for (let Eintrag of this.Pool.Standorteliste) {
        this.Auswahlliste.push({
          Index: Index,
          FirstColumn: Eintrag.Kuerzel,
          SecoundColumn: Eintrag.Standort,
          Data: Eintrag
        });
        Index++;
      }
      if (this.DBStandort.CurrentStandortfilter !== null) {
        this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, {
          _id: this.DBStandort.CurrentStandortfilter._id
        });
      } else this.Auswahlindex = 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsplanung Page', 'MitarebiterStandortfilterClickedHandler', this.Debug.Typen.Page);
    }
  }
  MitarbeiterWechselnClicked() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Mitarbeiter_Wechseln;
      this.ShowMitarbeiterauswahl = true;
      this.MitarbeiterMultiselect = false;
      this.AuswahlIDliste = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'MitarbeiterWechselnClicked', this.Debug.Typen.Page);
    }
  }
  StellvertreterFestlegenClicked(Zeitspanne) {
    try {
      // let Mitarbeiter: Mitarbeiterstruktur;
      // let Index: number;
      this.DB.CurrentUrlaubzeitspanne = Zeitspanne;
      this.MitarbeiterauswahlTitel = 'Vertretungen festlegen';
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Vertreter_Festlegen;
      this.ShowMitarbeiterauswahl = true;
      this.MitarbeiterMultiselect = true;
      this.AuswahlIDliste = this.DB.CurrentUrlaubzeitspanne.UrlaubsvertreterIDListe;
      /*
      Index = 0;
             this.Auswahlliste = [];
             for(let Eintrag of this.DB.CurrentUrlaub.Projektbeteiligteliste) {
               Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {_id: Eintrag.MitarbeiterID});
               if(!lodash.isUndefined(Mitarbeiter)) {
                 this.Auswahlliste.push({ Index: Index, FirstColumn: Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name, SecoundColumn: '', Data: Mitarbeiter._id });
                 Index++;
        }
      }
       
             this.Auswahltitel            = 'Stellvertreter/in festlegen';
      this.Auswahldialogorigin     = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Vertreter_Festlegen;
      this.ShowAuswahl             = true;
      this.Auswahlindex            = lodash.findIndex(this.DB.CurrentUrlaubzeitspanne, {MitarbeiterID: Zeitspanne.UrlaubsvertreterID});
              */
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'StellvertreterFestlegenClicked', this.Debug.Typen.Page);
    }
  }
  GetStellvertretername(MitarbeieterID) {
    try {
      let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
        _id: MitarbeieterID
      });
      if (lodash.isUndefined(Mitarbeiter)) return 'unbekannt';else return Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'GetStellvertretername', this.Debug.Typen.Page);
    }
  }
  DisplayExternCheckChanged(event, Urlaub, i) {
    try {
      let Beteiligt = lodash.find(this.DB.CurrentUrlaub.Projektbeteiligteliste, {
        MitarbeiterID: Urlaub.MitarbeiterIDExtern
      });
      if (!lodash.isUndefined(Beteiligt)) Beteiligt.Display = event.status;
      let Urlaubindex = lodash.findIndex(this.DB.CurrentMitarbeiter.Urlaubsliste, {
        Jahr: this.DB.CurrentJahr
      });
      this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = this.DB.CurrentUrlaub;
      this.DBMitarbeiter.UpdateMitarbeiterUrlaub(this.DB.CurrentMitarbeiter).then(() => {
        this.DB.ExterneUrlaubeChanged.emit();
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'DisplayExternCheckChanged', this.Debug.Typen.Page);
    }
  }
  CheckUrlaubUpdatesAvailable() {
    try {
      let Available = false;
      if (this.DB.CurrentUrlaub !== null) {
        for (let Zeitspanne of this.DB.CurrentUrlaub.Urlaubzeitspannen) {
          if (Zeitspanne.Status === this.DB.Urlaubstatusvarianten.Geplant && Zeitspanne.UrlaubsvertreterIDListe.length > 0) Available = true;
          if (Zeitspanne.Status === this.DB.Urlaubstatusvarianten.Geplant && Zeitspanne.Betriebsurlaub === true) Available = true;
        }
      }
      return Available;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'CheckUrlaubUpdatesAvailable', this.Debug.Typen.Page);
    }
  }
  CheckHomeofficeUpdatesAvailable() {
    try {
      let Available = false;
      let Standort = lodash.find(this.Pool.Standorteliste, {
        _id: this.DB.CurrentMitarbeiter.StandortID
      });
      if (this.DB.CurrentUrlaub !== null) {
        for (let Zeitspanne of this.DB.CurrentUrlaub.Homeofficezeitspannen) {
          if (Zeitspanne.Status === this.DB.Urlaubstatusvarianten.Geplant && Standort.Homeofficefreigabepersonen.length > 0) Available = true;
        }
      }
      return Available;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'CheckHomeofficeUpdatesAvailable', this.Debug.Typen.Page);
    }
  }
  CheckUrlaubLoschenEnabled(Zeitspanne) {
    try {
      if (this.Pool.Mitarbeiterdaten !== null && this.Pool.Mitarbeiterdaten.Urlaubsfreigaben === true) {
        return true;
      } else {
        return Zeitspanne.Status === this.DB.Urlaubstatusvarianten.Geplant || Zeitspanne.Status === this.DB.Urlaubstatusvarianten.Abgelehnt || Zeitspanne.Status === this.DB.Urlaubstatusvarianten.Vertreterablehnung;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'CheckUrlaubLoschenEnabled', this.Debug.Typen.Page);
    }
  }
  CheckHomeofficeLoschenEnabled(Satus) {
    try {
      let Enabled = false;
      let Liste = lodash.filter(this.DB.CurrentUrlaub.Homeofficezeitspannen, {
        Status: Satus
      });
      for (let Eintrag of Liste) {
        if (Eintrag.Checked) {
          Enabled = true;
          break;
        }
      }
      return Enabled;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'CheckHomeofficeLoschenEnabled', this.Debug.Typen.Page);
    }
  }
  CancelDatumClicked() {
    try {
      this.AddUrlaubRunning = false;
      this.AddHalberUrlaubstagRunning = false;
      this.DB.CurrentUrlaubzeitspanne = null;
      this.DB.AddUrlaubCancelEvent.emit(); // Kalenderkomponente den Abbruch mitteilen
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'CancelDatumClicked', this.Debug.Typen.Page);
    }
  }
  StatusClickedHandler(Zeitspanne) {
    try {
      let Index = 0;
      if (this.Pool.Mitarbeiterdaten !== null && (this.Pool.Mitarbeiterdaten.Planeradministrator === true || this.Pool.Mitarbeiterdaten.Urlaubsfreigaben === true)) {
        this.Auswahltitel = 'Status ändern';
        this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Status_Aendern;
        this.DB.CurrentUrlaubzeitspanne = Zeitspanne;
        this.Auswahlliste = [];
        this.Auswahlliste.push({
          Index: Index++,
          FirstColumn: this.DB.Urlaubstatusvarianten.Geplant,
          SecoundColumn: '',
          Data: this.DB.Urlaubstatusvarianten.Geplant
        });
        this.Auswahlliste.push({
          Index: Index++,
          FirstColumn: this.DB.Urlaubstatusvarianten.Vertreteranfrage,
          SecoundColumn: '',
          Data: this.DB.Urlaubstatusvarianten.Vertreteranfrage
        });
        this.Auswahlliste.push({
          Index: Index++,
          FirstColumn: this.DB.Urlaubstatusvarianten.Vertreterablehnung,
          SecoundColumn: '',
          Data: this.DB.Urlaubstatusvarianten.Vertreterablehnung
        });
        this.Auswahlliste.push({
          Index: Index++,
          FirstColumn: this.DB.Urlaubstatusvarianten.Vertreterfreigabe,
          SecoundColumn: '',
          Data: this.DB.Urlaubstatusvarianten.Vertreterfreigabe
        });
        this.Auswahlliste.push({
          Index: Index++,
          FirstColumn: this.DB.Urlaubstatusvarianten.Abgelehnt,
          SecoundColumn: '',
          Data: this.DB.Urlaubstatusvarianten.Abgelehnt
        });
        this.Auswahlliste.push({
          Index: Index++,
          FirstColumn: this.DB.Urlaubstatusvarianten.Genehmigt,
          SecoundColumn: '',
          Data: this.DB.Urlaubstatusvarianten.Genehmigt
        });
        this.ShowAuswahl = true;
        this.Auswahlindex = lodash.findIndex(this.Auswahlliste, {
          Data: Zeitspanne.Status
        });
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'StatusClickedHandler', this.Debug.Typen.Page);
    }
  }
  AddHomeofficeFinishedHandler() {
    try {
      if (this.DB.CurrentHomeofficezeitspanne !== null) {
        this.DB.CurrentUrlaub.Homeofficezeitspannen.push(this.DB.CurrentHomeofficezeitspanne);
        let Urlaubindex = lodash.findIndex(this.DB.CurrentMitarbeiter.Urlaubsliste, {
          Jahr: this.DB.CurrentJahr
        });
        this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = this.DB.CurrentUrlaub;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'AddHomeofficeFinishedHandler', this.Debug.Typen.Page);
    }
  }
  SaveHomeofficeEventHandler() {
    try {
      this.AddHomeofficeRunning = false;
      this.DB.CurrentHomeofficezeitspanne = null;
      this.DBMitarbeiter.UpdateMitarbeiterUrlaub(this.DB.CurrentMitarbeiter).then(() => {});
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'SaveHomeofficeEventHandler', this.Debug.Typen.Page);
    }
  }
  ZeitspanneCheckChanged(event, Zeitspanne) {
    try {
      Zeitspanne.Checked = event.status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'ZeitspanneCheckChanged', this.Debug.Typen.Page);
    }
  }
  BetriebsurlaubCheckedChanged(event, Zeitspanne) {
    try {
      let Konversation;
      let CurrentZeitspanne = lodash.find(this.DB.CurrentUrlaub.Urlaubzeitspannen, eintrag => {
        return eintrag.ZeitspannenID === Zeitspanne.ZeitspannenID;
      });
      Konversation = lodash.find(CurrentZeitspanne.Vertretungskonversationliste, {
        VertreterID: this.DB.CurrentMitarbeiter._id
      });
      CurrentZeitspanne.Betriebsurlaub = event.status;
      if (CurrentZeitspanne.Betriebsurlaub === false) {
        Konversation.VertreteranfrageSended = false;
        Konversation.VertreterantwortSended = false;
        CurrentZeitspanne.Status = this.DB.Urlaubstatusvarianten.Geplant;
        CurrentZeitspanne.Planungmeldung = '';
      } else {
        Konversation.VertreteranfrageSended = true;
        Konversation.VertreterantwortSended = true;
        CurrentZeitspanne.Status = this.DB.Urlaubstatusvarianten.Geplant;
        CurrentZeitspanne.Planungmeldung = 'keine Urlaubsvertretung notwendig :-)';
      }
      let Urlaubindex = lodash.findIndex(this.DB.CurrentMitarbeiter.Urlaubsliste, {
        Jahr: this.DB.CurrentJahr
      });
      this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = this.DB.CurrentUrlaub;
      this.DBMitarbeiter.UpdateMitarbeiterUrlaub(this.DB.CurrentMitarbeiter).then(() => {
        this.DB.PlanungsmonateChanged.emit();
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'BetriebsurlaubCheckedChanged', this.Debug.Typen.Page);
    }
  }
  GetPlanungmeldung(Zeitspanne) {
    try {
      let Text = '';
      let Index = 0;
      switch (Zeitspanne.Status) {
        case this.DB.Urlaubstatusvarianten.Geplant:
          break;
        case this.DB.Urlaubstatusvarianten.Vertreteranfrage:
          for (let Konversation of Zeitspanne.Vertretungskonversationliste) {
            if (Konversation.VertreteranfrageSended === true) {
              Text += Konversation.Vertretungmeldung;
              if (Index < Zeitspanne.Vertretungskonversationliste.length) Text += '<br>';
            }
          }
          break;
        case this.DB.Urlaubstatusvarianten.Vertreterfreigabe:
          Text += Zeitspanne.Planungmeldung;
          break;
        case this.DB.Urlaubstatusvarianten.Vertreterablehnung:
          for (let Konversation of Zeitspanne.Vertretungskonversationliste) {
            if (Konversation.VertreterantwortSended === true) {
              Text += Konversation.Vertretungmeldung;
              if (Index < Zeitspanne.Vertretungskonversationliste.length) Text += '<br>';
            }
          }
          break;
        case this.DB.Urlaubstatusvarianten.Genehmigt:
          Text += Zeitspanne.Planungmeldung;
          break;
      }
      return Text;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'GetPlanungmeldung', this.Debug.Typen.Page);
    }
  }
  MitarbeiterMeWechselnClickedHandler() {
    try {
      this.DB.CurrentMitarbeiter = this.Pool.Mitarbeiterdaten;
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'MitarbeiterMeWechselnClickedHandler', this.Debug.Typen.Page);
    }
  }
  ExternUrlaubstagClickedEventHandler(mitarbeiterid) {
    try {
      let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
        _id: mitarbeiterid
      });
      if (lodash.isUndefined(Mitarbeiter) === false) {
        this.DB.CurrentMitarbeiter = Mitarbeiter;
        this.PrepareData();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'ExternUrlaubstagClickedEventHandler', this.Debug.Typen.Page);
    }
  }
  ShowHomeofficeChanged(event) {
    try {
      this.Pool.Mitarbeitersettings.ShowHomeoffice = event.status;
      this.DBMitarbeitersettings.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings, null).then(() => {
        this.DB.UpdateKalenderRequestEvent.emit();
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'ShowHomeofficeChanged', this.Debug.Typen.Page);
    }
  }
  JahrButtonClickedHandler() {
    try {
      let Index = 0;
      let Jahr = this.DB.Jahr;
      let Nextjahr = Jahr + 1;
      this.Auswahltitel = 'Jahr ändern';
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Jahr_Aendern;
      this.Auswahlliste = [];
      for (let j = this.DB.Startjahr; j <= Nextjahr; j++) {
        this.Auswahlliste.push({
          Index: Index++,
          FirstColumn: j.toString(),
          SecoundColumn: '',
          Data: j
        });
      }
      this.ShowAuswahl = true;
      this.Auswahlindex = lodash.findIndex(this.Auswahlliste, {
        Data: this.DB.CurrentJahr
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsplanung Page', 'JahrButtonClickedHandler', this.Debug.Typen.Page);
    }
  }
  static ctorParameters = () => [{
    type: loadinganimation_1.LoadingAnimationService
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }, {
    type: auswahl_dialog_service_1.AuswahlDialogService
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: debug_1.DebugProvider
  }];
  static propDecorators = {
    PageHeader: [{
      type: core_1.ViewChild,
      args: ['PageHeader', {
        static: false
      }]
    }],
    PageFooter: [{
      type: core_1.ViewChild,
      args: ['PageFooter', {
        static: false
      }]
    }]
  };
};
exports.CommonUrlaubPlanungPage = CommonUrlaubPlanungPage;
exports.CommonUrlaubPlanungPage = CommonUrlaubPlanungPage = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'common-urlaub-planung-page',
  template: __webpack_require__(/*! ./common-urlaub-planung.page.html?ngResource */ 82852),
  styles: [__webpack_require__(/*! ./common-urlaub-planung.page.scss?ngResource */ 70192)]
})], CommonUrlaubPlanungPage);

/***/ }),

/***/ 19204:
/*!***********************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-uebersicht/common-urlaub-uebersicht.module.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonUrlaubsuebersichtPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const common_urlaub_uebersicht_page_1 = __webpack_require__(/*! ./common-urlaub-uebersicht.page */ 62364);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 6168);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const urlausplanung_kalender_module_1 = __webpack_require__(/*! ../../components/pj-urlaubsplanung-kalender/urlausplanung-kalender.module */ 6232);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 72284);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 10272);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const fi_mitarbeiter_editor_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.module */ 27328);
const fi_mitarbeiter_auswahl_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.module */ 26668);
const routes = [{
  path: '',
  component: common_urlaub_uebersicht_page_1.CommonUrlaubUebersichtPage
}];
let CommonUrlaubsuebersichtPageModule = class CommonUrlaubsuebersichtPageModule {};
exports.CommonUrlaubsuebersichtPageModule = CommonUrlaubsuebersichtPageModule;
exports.CommonUrlaubsuebersichtPageModule = CommonUrlaubsuebersichtPageModule = tslib_1.__decorate([(0, core_1.NgModule)({
  imports: [common_1.CommonModule, forms_1.FormsModule, angular_1.IonicModule, page_header_module_1.PageHeaderModule, router_1.RouterModule.forChild(routes), page_header_menu_module_1.PageHeaderMenuModule, page_footer_module_1.PageFooterModule, urlausplanung_kalender_module_1.UrlausplanungKalenderModule, button_value_module_1.ButtonValueModule, auswahl_dialog_module_1.AuswahlDialogModule, checkbox_clon_module_1.CheckboxClonModule, fi_mitarbeiter_editor_module_1.FiMitarbeiterEditorModule, fi_mitarbeiter_auswahl_module_1.FiMitarbeiterAuswahlModule],
  declarations: [common_urlaub_uebersicht_page_1.CommonUrlaubUebersichtPage]
})], CommonUrlaubsuebersichtPageModule);

/***/ }),

/***/ 62364:
/*!*********************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-uebersicht/common-urlaub-uebersicht.page.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonUrlaubUebersichtPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment/moment */ 30816));
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 48044);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
const lodash_es_1 = __webpack_require__(/*! lodash-es */ 55600);
const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ../../services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 15024);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 22848);
const loadinganimation_1 = __webpack_require__(/*! ../../services/loadinganimation/loadinganimation */ 33940);
let CommonUrlaubUebersichtPage = class CommonUrlaubUebersichtPage {
  Loadinganimation;
  Basics;
  Pool;
  DB;
  Const;
  DBMitarbeiter;
  DBMitarbeitersettings;
  DBStandort;
  Auswahlservice;
  Debug;
  PageHeader;
  PageFooter;
  Ansichtenvarinaten = {
    Gesamtjahr: 'Gesamtjahr',
    HalbjahrEins: 'HalbjahrEins',
    HalbjahrZwei: 'HalbjahrZwei'
  };
  Monateliste_Gesamtjahr;
  Auswahlliste;
  BundeslandAuswahlliste;
  Auswahlindex;
  Auswahltitel;
  ShowAuswahl;
  Auswahlhoehe;
  Ansichtvariante;
  Message;
  ShowMitarbeitereditor;
  AddUrlaubRunning;
  Auswahldialogorigin;
  DataSubscription;
  AuswahlIDliste;
  MitarbeiterauswahlTitel;
  ShowMitarbeiterauswahl;
  LegendeVisible;
  Legendehoehe;
  Legendebreite;
  Flagsource;
  Monateliste_HalbjahrEins;
  Monateliste_HalbjahrZwei;
  constructor(Loadinganimation, Basics, Pool, DB, Const, DBMitarbeiter, DBMitarbeitersettings, DBStandort, Auswahlservice, Debug) {
    this.Loadinganimation = Loadinganimation;
    this.Basics = Basics;
    this.Pool = Pool;
    this.DB = DB;
    this.Const = Const;
    this.DBMitarbeiter = DBMitarbeiter;
    this.DBMitarbeitersettings = DBMitarbeitersettings;
    this.DBStandort = DBStandort;
    this.Auswahlservice = Auswahlservice;
    this.Debug = Debug;
    try {
      this.Monateliste_Gesamtjahr = [];
      this.Monateliste_Gesamtjahr.push(['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni']);
      this.Monateliste_Gesamtjahr.push(['Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']);
      this.Monateliste_HalbjahrEins = ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni'];
      this.Monateliste_HalbjahrZwei = ['Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'];
      this.Auswahlliste = [{
        Index: 0,
        FirstColumn: '',
        SecoundColumn: '',
        Data: null
      }];
      this.Auswahlindex = 0;
      this.Auswahltitel = '';
      this.DataSubscription = null;
      this.Message = '';
      this.ShowMitarbeitereditor = false;
      this.Auswahldialogorigin = this.Const.NONE;
      this.AddUrlaubRunning = false;
      this.AuswahlIDliste = [];
      this.MitarbeiterauswahlTitel = '';
      this.ShowMitarbeiterauswahl = false;
      this.LegendeVisible = false;
      this.Legendehoehe = 0;
      this.Legendebreite = 0;
      this.Flagsource = '';
      this.Ansichtvariante = this.Ansichtenvarinaten.Gesamtjahr;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsuebersicht Page', 'constructor', this.Debug.Typen.Page);
    }
  }
  MitarbeiterWechselnClicked() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Mitarbeiter_Wechseln;
      this.ShowMitarbeiterauswahl = true;
      this.AuswahlIDliste = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'MitarbeiterWechselnClicked', this.Debug.Typen.Page);
    }
  }
  ngOnDestroy() {
    try {
      this.DataSubscription.unsubscribe();
      this.DataSubscription = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'OnDestroy', this.Debug.Typen.Page);
    }
  }
  ionViewDidEnter() {
    try {
      this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
      this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
      this.Legendebreite = 400;
      this.Legendehoehe = this.Basics.InnerContenthoehe;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsuebersicht Page', 'ionViewDidEnter', this.Debug.Typen.Page);
    }
  }
  ngOnInit() {
    try {
      let Heute = (0, moment_1.default)().locale('de');
      let Monat = Heute.month() + 1;
      if (Monat <= 6) this.Ansichtvariante = this.Ansichtenvarinaten.HalbjahrEins;else this.Ansichtvariante = this.Ansichtenvarinaten.HalbjahrZwei;
      this.DataSubscription = this.Pool.LoadingAllDataFinished.subscribe(() => {
        this.PrepareData();
      });
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'OnInit', this.Debug.Typen.Page);
    }
  }
  MitarbeiterauswahlOkButtonClicked(idliste) {
    try {
      let Mitarbeiter;
      switch (this.Auswahldialogorigin) {
        case this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Mitarbeiter_Wechseln:
          Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
            _id: idliste[0]
          });
          this.DB.CurrentMitarbeiter = Mitarbeiter;
          this.PrepareData();
          break;
      }
      this.ShowMitarbeiterauswahl = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsplanung Page', 'MitarbeiterauswahlOkButtonClicked', this.Debug.Typen.Page);
    }
  }
  AuswahlOkButtonClicked(data) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        switch (_this.Auswahldialogorigin) {
          case _this.Auswahlservice.Auswahloriginvarianten.Urlaubsliste_Bundesland:
            _this.DB.Bundeslandkuerzel = data;
            let landcode = _this.DB.Bundeslandkuerzel.substring(0, 2);
            _this.DB.ReadFeiertage(landcode);
            debugger;
            break;
          case _this.Auswahlservice.Auswahloriginvarianten.UrlaubUebersicht_Standort_Filter:
            _this.DBStandort.CurrentStandortfilter = (0, lodash_es_1.cloneDeep)(data);
            _this.Pool.Mitarbeitersettings.StandortFilter = data !== null ? data._id : _this.Const.NONE;
            _this.DBMitarbeitersettings.UpdateMitarbeitersettings(_this.Pool.Mitarbeitersettings, null).then(() => {
              _this.ShowAuswahl = false;
              _this.DBStandort.StandortfilterChanged.emit();
            });
            break;
          case _this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Jahr_Aendern:
            _this.DB.CurrentJahr = data;
            yield _this.Loadinganimation.ShowLoadingAnimation('Hinweis', 'Daten werden geladen');
            yield _this.DB.ReadFeiertage('DE');
            yield _this.DB.ReadFeiertage('BG');
            yield _this.DB.ReadFerien('DE');
            yield _this.DB.ReadFerien('BG');
            yield _this.Loadinganimation.HideLoadingAnimation(true);
            break;
        }
        _this.ShowAuswahl = false;
        _this.PrepareData();
      } catch (error) {
        _this.Debug.ShowErrorMessage(error.message, 'Urlaubsuebersicht Page', 'AuswahlOkButtonClicked', _this.Debug.Typen.Page);
      }
    })();
  }
  PrepareData() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        let Index = 0;
        _this2.DB.Init();
        _this2.DB.CheckSetup();
        _this2.DB.SetPlanungsmonate();
        _this2.DB.CountAnfragenanzahlen();
        _this2.BundeslandAuswahlliste = [];
        for (let Region of _this2.DB.Regionenliste) {
          _this2.BundeslandAuswahlliste.push({
            Index: Index,
            FirstColumn: Region.Name,
            SecoundColumn: Region.isoCode,
            Data: Region.isoCode
          });
          Index++;
        }
        _this2.DB.Bundesland = lodash.find(_this2.BundeslandAuswahlliste, {
          Data: _this2.DB.Bundeslandkuerzel
        }).FirstColumn;
      } catch (error) {
        _this2.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'PrepareData', _this2.Debug.Typen.Page);
      }
    })();
  }
  FeiertagCrossedEventHandler(Daten) {
    try {
      this.Message = Daten.Name;
      if (Daten.Laendercode !== '') {
        this.Flagsource = 'assets/images/';
        this.Flagsource += Daten.Laendercode === 'DE' ? 'de.png' : 'bg.png';
      } else {
        this.Flagsource = '';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'FeiertagCrossedEventHandler', this.Debug.Typen.Page);
    }
  }
  FerientagCrossedEventHandler(Daten) {
    try {
      this.Message = Daten.Name;
      if (Daten.Laendercode !== '') {
        this.Flagsource = 'assets/images/';
        this.Flagsource += Daten.Laendercode === 'DE' ? 'de.png' : 'bg.png';
      } else {
        this.Flagsource = '';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'FerientagCrossedEventHandler', this.Debug.Typen.Page);
    }
  }
  GetDatum(Anfangstempel) {
    return (0, moment_1.default)(Anfangstempel).format('DD.MM.YYYY');
  }
  MitarebiterStandortfilterClickedHandler() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.UrlaubUebersicht_Standort_Filter;
      let Index = 0;
      this.ShowAuswahl = true;
      this.Auswahltitel = 'Standort festlegen';
      this.Auswahlliste = [];
      this.Auswahlliste.push({
        Index: Index,
        FirstColumn: 'kein Filter',
        SecoundColumn: '',
        Data: null
      });
      Index++;
      for (let Eintrag of this.Pool.Standorteliste) {
        this.Auswahlliste.push({
          Index: Index,
          FirstColumn: Eintrag.Kuerzel,
          SecoundColumn: Eintrag.Standort,
          Data: Eintrag
        });
        Index++;
      }
      if (this.DBStandort.CurrentStandortfilter !== null) {
        this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, {
          _id: this.DBStandort.CurrentStandortfilter._id
        });
      } else this.Auswahlindex = 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Urlaubsuebersicht Page', 'MitarebiterStandortfilterClickedHandler', this.Debug.Typen.Page);
    }
  }
  DisplayExternCheckChanged(event, Urlaub, i) {
    try {
      let Beteiligt = lodash.find(this.DB.CurrentUrlaub.Projektbeteiligteliste, {
        MitarbeiterID: Urlaub.MitarbeiterIDExtern
      });
      if (!lodash.isUndefined(Beteiligt)) Beteiligt.Display = event.status;
      let Urlaubindex = lodash.findIndex(this.DB.CurrentMitarbeiter.Urlaubsliste, {
        Jahr: this.DB.CurrentJahr
      });
      this.DB.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = this.DB.CurrentUrlaub;
      this.DBMitarbeiter.UpdateMitarbeiterUrlaub(this.DB.CurrentMitarbeiter).then(() => {
        this.DB.ExterneUrlaubeChanged.emit();
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'DisplayExternCheckChanged', this.Debug.Typen.Page);
    }
  }
  AnsichtFeiertageCheckChanged(event, landcode) {
    try {
      switch (landcode) {
        case 'DE':
          this.Pool.Mitarbeitersettings.UrlaubShowFeiertage_DE = event.status;
          this.DB.ShowFeiertage_DE = event.status;
          break;
        case 'BG':
          this.Pool.Mitarbeitersettings.UrlaubShowFeiertage_BG = event.status;
          this.DB.ShowFeiertage_BG = event.status;
          break;
      }
      this.DBMitarbeitersettings.SaveMitarbeitersettings().then(() => {});
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'AnsichtFeiertageCheckChanged', this.Debug.Typen.Page);
    }
  }
  AnsichtFerientageCheckChanged(event, landcode) {
    try {
      switch (landcode) {
        case 'DE':
          this.Pool.Mitarbeitersettings.UrlaubShowFerien_DE = event.status;
          this.DB.ShowFerientage_DE = event.status;
          break;
        case 'BG':
          this.Pool.Mitarbeitersettings.UrlaubShowFerien_BG = event.status;
          this.DB.ShowFerientage_BG = event.status;
          break;
      }
      this.DBMitarbeitersettings.SaveMitarbeitersettings().then(() => {});
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'AnsichtFerientageCheckChanged', this.Debug.Typen.Page);
    }
  }
  JahrButtonClicked() {
    try {
      this.Ansichtvariante = this.Ansichtenvarinaten.Gesamtjahr;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'JahrButtonClicked', this.Debug.Typen.Page);
    }
  }
  HalbjahrEinsButtonClicked() {
    try {
      this.Ansichtvariante = this.Ansichtenvarinaten.HalbjahrEins;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'HalbjahrEinsButtonClicked', this.Debug.Typen.Page);
    }
  }
  HalbjahrZweiButtonClicked() {
    try {
      this.Ansichtvariante = this.Ansichtenvarinaten.HalbjahrZwei;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'HalbjahrZweiButtonClicked', this.Debug.Typen.Page);
    }
  }
  UrlaubMitarbeiterMeClickedHandler() {
    try {
      this.DB.CurrentMitarbeiter = this.Pool.Mitarbeiterdaten;
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'UrlaubMitarbeiterMeClickedHandler', this.Debug.Typen.Page);
    }
  }
  JahrButtonClickedHandler() {
    try {
      let Index = 0;
      let Jahr = this.DB.Jahr;
      let Nextjahr = Jahr + 1;
      this.Auswahltitel = 'Jahr ändern';
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Urlaubsplanung_Jahr_Aendern;
      this.Auswahlliste = [];
      for (let j = this.DB.Startjahr; j <= Nextjahr; j++) {
        this.Auswahlliste.push({
          Index: Index++,
          FirstColumn: j.toString(),
          SecoundColumn: '',
          Data: j
        });
      }
      this.ShowAuswahl = true;
      this.Auswahlindex = lodash.findIndex(this.Auswahlliste, {
        Data: this.DB.CurrentJahr
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Urlaubsuebersicht Page', 'JahrButtonClickedHandler', this.Debug.Typen.Page);
    }
  }
  static ctorParameters = () => [{
    type: loadinganimation_1.LoadingAnimationService
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
  }, {
    type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }, {
    type: auswahl_dialog_service_1.AuswahlDialogService
  }, {
    type: debug_1.DebugProvider
  }];
  static propDecorators = {
    PageHeader: [{
      type: core_1.ViewChild,
      args: ['PageHeader', {
        static: false
      }]
    }],
    PageFooter: [{
      type: core_1.ViewChild,
      args: ['PageFooter', {
        static: false
      }]
    }]
  };
};
exports.CommonUrlaubUebersichtPage = CommonUrlaubUebersichtPage;
exports.CommonUrlaubUebersichtPage = CommonUrlaubUebersichtPage = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'common-urlaub-uebersicht-page',
  template: __webpack_require__(/*! ./common-urlaub-uebersicht.page.html?ngResource */ 2232),
  styles: [__webpack_require__(/*! ./common-urlaub-uebersicht.page.scss?ngResource */ 58680)]
})], CommonUrlaubUebersichtPage);

/***/ }),

/***/ 87848:
/*!***************************************************************!*\
  !*** ./src/app/pages/common-wartung/common-wartung.module.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonWartungPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const common_wartung_page_1 = __webpack_require__(/*! ./common-wartung.page */ 500);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 6168);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 72284);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 10272);
const safe_pipe_module_1 = __webpack_require__(/*! ../../pipes/safe.pipe.module */ 84104);
const routes = [{
  path: '',
  component: common_wartung_page_1.CommonWartungPage
}];
let CommonWartungPageModule = class CommonWartungPageModule {};
exports.CommonWartungPageModule = CommonWartungPageModule;
exports.CommonWartungPageModule = CommonWartungPageModule = tslib_1.__decorate([(0, core_1.NgModule)({
  imports: [common_1.CommonModule, forms_1.FormsModule, angular_1.IonicModule, page_header_module_1.PageHeaderModule, router_1.RouterModule.forChild(routes), page_header_menu_module_1.PageHeaderMenuModule, page_footer_module_1.PageFooterModule, checkbox_clon_module_1.CheckboxClonModule, button_value_module_1.ButtonValueModule, auswahl_dialog_module_1.AuswahlDialogModule, safe_pipe_module_1.SafePipeModule],
  declarations: [common_wartung_page_1.CommonWartungPage]
})], CommonWartungPageModule);

/***/ }),

/***/ 500:
/*!*************************************************************!*\
  !*** ./src/app/pages/common-wartung/common-wartung.page.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CommonWartungPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
let CommonWartungPage = class CommonWartungPage {
  Pool;
  Const;
  Basics;
  Debug;
  constructor(Pool, Const, Basics, Debug) {
    this.Pool = Pool;
    this.Const = Const;
    this.Basics = Basics;
    this.Debug = Debug;
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Wartung', 'constructor', this.Debug.Typen.Page);
    }
  }
  ngOnDestroy() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error, 'Wartung', 'OnDestroy', this.Debug.Typen.Page);
    }
  }
  ngOnInit() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error, 'Wartung', 'OnInit', this.Debug.Typen.Page);
    }
  }
  static ctorParameters = () => [{
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: const_1.ConstProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: debug_1.DebugProvider
  }];
};
exports.CommonWartungPage = CommonWartungPage;
exports.CommonWartungPage = CommonWartungPage = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'common-wartung-page',
  template: __webpack_require__(/*! ./common-wartung.page.html?ngResource */ 21168),
  styles: [__webpack_require__(/*! ./common-wartung.page.scss?ngResource */ 33200)]
})], CommonWartungPage);

/***/ }),

/***/ 99988:
/*!*************************************************************************!*\
  !*** ./src/app/pages/fi-mitarbeiterliste/fi-mitarbeiterliste.module.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FIMitarbeiterlistePageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const fi_mitarbeiterliste_1 = __webpack_require__(/*! ./fi-mitarbeiterliste */ 54780);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 6512);
const alphabet_module_1 = __webpack_require__(/*! ../../components/alphabet/alphabet.module */ 87143);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 6168);
const fi_mitarbeiter_editor_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.module */ 27328);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 10272);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 7388);
const routes = [{
  path: '',
  component: fi_mitarbeiterliste_1.FiMitarbeiterlistePage
}];
let FIMitarbeiterlistePageModule = class FIMitarbeiterlistePageModule {};
exports.FIMitarbeiterlistePageModule = FIMitarbeiterlistePageModule;
exports.FIMitarbeiterlistePageModule = FIMitarbeiterlistePageModule = tslib_1.__decorate([(0, core_1.NgModule)({
  imports: [common_1.CommonModule, forms_1.FormsModule, forms_1.ReactiveFormsModule, angular_1.IonicModule, router_1.RouterModule.forChild(routes), page_header_module_1.PageHeaderModule, page_footer_module_1.PageFooterModule, abstand_element_fixed_module_1.AbstandElementFixedModule, alphabet_module_1.AlphabetModule, page_header_menu_module_1.PageHeaderMenuModule, fi_mitarbeiter_editor_module_1.FiMitarbeiterEditorModule, auswahl_dialog_module_1.AuswahlDialogModule, checkbox_clon_module_1.CheckboxClonModule],
  declarations: [fi_mitarbeiterliste_1.FiMitarbeiterlistePage]
})], FIMitarbeiterlistePageModule);

/***/ }),

/***/ 54780:
/*!******************************************************************!*\
  !*** ./src/app/pages/fi-mitarbeiterliste/fi-mitarbeiterliste.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FiMitarbeiterlistePage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 22848);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 48044);
const security_service_1 = __webpack_require__(/*! ../../services/security/security.service */ 34636);
let FiMitarbeiterlistePage = class FiMitarbeiterlistePage {
  Basics;
  Debug;
  Tools;
  Const;
  Security;
  DB;
  DBStandort;
  Auswahlservice;
  Pool;
  Alphabetcomponent;
  PageHeader;
  PageFooter;
  ListeSubscription;
  Mitarbeiterliste;
  Mitarbeiteralphabet;
  Alphapetbreite;
  Mitarbeiteralphabetauswahl;
  HideAuswahl;
  Auswahlliste;
  Auswahlindex;
  Auswahltitel;
  Lastletter;
  Mitarbeiterbuchstabenliste;
  Standardalphabet;
  Zusatzbuttonliste;
  Mitarbeiterfiltertext;
  Listenbreite;
  ShowEditor;
  ShowAuswahl;
  Auswahldialogorigin;
  StandortfilterSubsciption;
  ShowMeOnly;
  ShowArchivierte;
  ShowAktuelle;
  Freigabefiltervarianten = {
    Keiner: 'keiner',
    Administrator: 'Administrator',
    Urlaubsfreigaben: 'Urlaubsfreigaben',
    Homeofficefreigaben: 'Homeofficefreigaben'
  };
  Freigabefilter;
  constructor(Basics, Debug, Tools, Const, Security, DB, DBStandort, Auswahlservice, Pool) {
    this.Basics = Basics;
    this.Debug = Debug;
    this.Tools = Tools;
    this.Const = Const;
    this.Security = Security;
    this.DB = DB;
    this.DBStandort = DBStandort;
    this.Auswahlservice = Auswahlservice;
    this.Pool = Pool;
    try {
      this.Standardalphabet = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
      this.Mitarbeiteralphabet = [];
      this.Mitarbeiteralphabetauswahl = 'Alle';
      this.Mitarbeiterliste = [];
      this.Alphapetbreite = 44;
      this.Zusatzbuttonliste = [];
      this.HideAuswahl = true;
      this.Mitarbeiteralphabet = this.Standardalphabet;
      this.Mitarbeiterbuchstabenliste = [];
      this.Mitarbeiterfiltertext = '';
      this.Listenbreite = 0;
      this.ShowEditor = false;
      this.ShowAuswahl = false;
      this.Auswahltitel = 'Standort festlegen';
      this.Auswahlliste = [];
      this.Auswahldialogorigin = this.Const.NONE;
      this.ListeSubscription = null;
      this.StandortfilterSubsciption = null;
      this.ShowMeOnly = false;
      this.ShowArchivierte = false;
      this.ShowAktuelle = true;
      this.Freigabefilter = this.Freigabefiltervarianten.Keiner;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'constructor', this.Debug.Typen.Page);
    }
  }
  ngOnDestroy() {
    try {
      if (this.ListeSubscription !== null) {
        this.ListeSubscription.unsubscribe();
        this.ListeSubscription = null;
      }
      if (this.StandortfilterSubsciption !== null) {
        this.StandortfilterSubsciption.unsubscribe();
        this.StandortfilterSubsciption = null;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'OnDestroy', this.Debug.Typen.Page);
    }
  }
  ngOnInit() {
    try {
      this.Security.CheckSecurity();
      this.ListeSubscription = this.Pool.MitarbeiterlisteChanged.subscribe(() => {
        this.PrepareDaten();
      });
      this.StandortfilterSubsciption = this.DBStandort.StandortfilterChanged.subscribe(() => {
        this.PrepareDaten();
      });
      this.PrepareDaten();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'OnInit', this.Debug.Typen.Page);
    }
  }
  ResetSucheButtonClicked() {
    try {
      this.Mitarbeiterfiltertext = '';
      this.Mitarbeiteralphabetauswahl = 'Alle';
      this.PrepareDaten();
      /*
      switch (this.Menueindex) {
               case 0:
       
          break;
               case 1:
                 this.Lieferantenfiltertext         = '';
          this.Lieferantenfilter             = '';
          this.Lieferantenalphabetauswahl    = 'Alle';
          this.Suchleiste.value              = '';
                 this.PrepareLieferantenDaten();
                 break;
      }
              */
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'ResetSucheButtonClicked', this.Debug.Typen.Page);
    }
  }
  ionViewDidEnter() {
    try {
      let Alphabetbreite = typeof this.Alphabetcomponent.Breite !== 'undefined' ? this.Alphabetcomponent.Breite : 40;
      this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
      this.Listenbreite = this.Basics.Contentbreite - Alphabetbreite - 4;
      this.Alphabetcomponent.InitScreen();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'ionViewDidEnter', this.Debug.Typen.Page);
    }
  }
  ionViewDidLeave() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'ionViewDidLeave', this.Debug.Typen.Page);
    }
  }
  MitrabeiterButtonClicked(eintrag) {
    try {
      this.DB.CurrentMitarbeiter = lodash.cloneDeep(eintrag);
      this.ShowEditor = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'MitrabeiterButtonClicked', this.Debug.Typen.Page);
    }
  }
  AddMitarbeiterButtonClicked() {
    try {
      this.DB.CurrentMitarbeiter = this.DB.GetEmptyMitarbeiter();
      this.ShowEditor = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'AddMitarbeiterButtonClicked', this.Debug.Typen.Page);
    }
  }
  AlphabetClicked(buchstabe) {
    try {
      this.Mitarbeiterfiltertext = '';
      this.Mitarbeiteralphabetauswahl = buchstabe;
      this.PrepareDaten();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'AlphabetClicked', this.Debug.Typen.Page);
    }
  }
  GetMitarbeiterAlphabetbuchstabe(value) {
    try {
      let Buchstabe = value.Name.substring(0, 1).toUpperCase();
      if (Buchstabe !== this.Lastletter) {
        this.Lastletter = Buchstabe;
        return Buchstabe;
      } else {
        return '';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'GetMitarbeiterAlphabetbuchstabe', this.Debug.Typen.Page);
    }
  }
  PrepareDaten() {
    try {
      let Liste;
      let Merker;
      let Buchstabe;
      let Quelle;
      let Laenge;
      let TeilA;
      let TeilB;
      let TeilC;
      let Teillaenge;
      let PosA;
      let Solltext;
      let Suchtext;
      if (this.Pool.Mitarbeiterliste !== null) {
        Quelle = lodash.cloneDeep(this.Pool.Mitarbeiterliste);
        this.Lastletter = '';
        // Nach Namen sortieren
        Quelle.sort((a, b) => {
          if (a.Name > b.Name) return -1;
          if (a.Name < b.Name) return 1;
          return 0;
        });
        // Filter
        Liste = lodash.cloneDeep(Quelle);
        if (this.ShowMeOnly) {
          Liste = lodash.filter(Liste, {
            _id: this.Pool.Mitarbeiterdaten._id
          });
        } else {
          if (this.ShowArchivierte === true && this.ShowAktuelle === true) {
            // do nothing
          } else if (this.ShowArchivierte) {
            Liste = lodash.filter(Liste, Eintrag => {
              return Eintrag.Archiviert;
            });
          } else if (this.ShowAktuelle) {
            Liste = lodash.filter(Liste, Eintrag => {
              return !Eintrag.Archiviert;
            });
          } else if (this.ShowArchivierte === false && this.ShowAktuelle === false) {
            Liste = [];
          }
        }
        // Freigabefilter
        if (this.Freigabefilter !== this.Freigabefiltervarianten.Keiner) {
          switch (this.Freigabefilter) {
            case this.Freigabefiltervarianten.Administrator:
              Liste = lodash.filter(Liste, {
                Planeradministrator: true
              });
              break;
            case this.Freigabefiltervarianten.Urlaubsfreigaben:
              Liste = lodash.filter(Liste, {
                Urlaubsfreigaben: true
              });
              break;
            case this.Freigabefiltervarianten.Homeofficefreigaben:
              Liste = lodash.filter(Liste, {
                Homeofficefreigaben: true
              });
              break;
          }
        }
        // Standortfilter anwenden
        if (this.DBStandort.CurrentStandortfilter !== null) {
          Liste = lodash.filter(Liste, eintrag => {
            return eintrag.StandortID === this.DBStandort.CurrentStandortfilter._id;
          });
        }
        Liste.sort((a, b) => {
          if (a.Name < b.Name) return -1;
          if (a.Name > b.Name) return 1;
          return 0;
        });
        // Mitarbeiteralphabetauswahl Buchstaben festlegen
        if (Liste.length > 6) {
          this.Mitarbeiteralphabet = ['Alle'];
          for (let Eintrag of Liste) {
            Buchstabe = Eintrag.Name.substring(0, 1).toUpperCase();
            if (this.Mitarbeiteralphabet.indexOf(Buchstabe) === -1) this.Mitarbeiteralphabet.push(Buchstabe);
          }
        } else {
          this.Mitarbeiteralphabet = this.Standardalphabet;
        }
        // Alphabetfilter anwenden
        if (this.Mitarbeiteralphabetauswahl !== 'Alle') {
          Merker = lodash.cloneDeep(Liste);
          Liste = [];
          for (let Eintrag of Merker) {
            Buchstabe = Eintrag.Name.substring(0, 1).toUpperCase();
            Buchstabe = Buchstabe === 'Ä' ? 'A' : Buchstabe;
            Buchstabe = Buchstabe === 'Ö' ? 'O' : Buchstabe;
            Buchstabe = Buchstabe === 'Ü' ? 'U' : Buchstabe;
            if (this.Mitarbeiteralphabetauswahl === Buchstabe) Liste.push(Eintrag);
          }
        }
        // Suche Mitarbeiterfilter anwenden
        if (this.Mitarbeiterfiltertext !== '') {
          Merker = lodash.cloneDeep(Liste);
          Liste = [];
          for (let Eintrag of Merker) {
            Solltext = this.Mitarbeiterfiltertext.toLowerCase();
            Suchtext = Eintrag.Name.toLowerCase();
            PosA = Suchtext.indexOf(Solltext);
            if (PosA !== -1) {
              Laenge = Eintrag.Name.length;
              Teillaenge = Solltext.length;
              TeilA = Eintrag.Name.substr(0, PosA);
              TeilB = Eintrag.Name.substr(PosA, Teillaenge);
              Teillaenge = Laenge - Teillaenge - PosA;
              TeilC = Eintrag.Name.substr(Laenge - Teillaenge, Teillaenge);
              Eintrag.Filtered = true;
              Eintrag.Text_A = TeilA;
              Eintrag.Text_B = TeilB;
              Eintrag.Text_C = TeilC;
              Liste.push(Eintrag);
            }
          }
        }
        // Buchstabenliste festlegen
        this.Mitarbeiterbuchstabenliste = [];
        for (let Eintrag of Liste) {
          this.Mitarbeiterbuchstabenliste.push(this.GetMitarbeiterAlphabetbuchstabe(Eintrag));
        }
        this.Mitarbeiterliste = lodash.cloneDeep(Liste);
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'PrepareDaten', this.Debug.Typen.Page);
    }
  }
  GetDialogTitel() {
    try {
      if (this.DB.CurrentMitarbeiter !== null) {
        return this.DB.CurrentMitarbeiter._id === null ? 'Neuen Mitarbeiter anlegen' : 'Mitarbeiter bearbeiten';
      } else {
        return 'Unbekannt';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'GetDialogTitel', this.Debug.Typen.Page);
    }
  }
  StandortClickedHandler() {
    try {
      let Index = 0;
      this.ShowAuswahl = true;
      this.Auswahltitel = 'Standort festlegen';
      this.Auswahlliste = [];
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Standort;
      for (let Eintrag of this.Pool.Standorteliste) {
        this.Auswahlliste.push({
          Index: Index,
          FirstColumn: Eintrag.Kuerzel,
          SecoundColumn: Eintrag.Ort,
          Data: Eintrag
        });
        Index++;
      }
      this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, {
        _id: this.DB.CurrentMitarbeiter.StandortID
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'StandortClickedHandler', this.Debug.Typen.Page);
    }
  }
  AuswahlOkButtonClicked(data) {
    try {
      switch (this.Auswahldialogorigin) {
        case this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Anrede:
          this.DB.CurrentMitarbeiter.Anrede = data;
          break;
        case this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Urlaub:
          this.DB.CurrentMitarbeiter.Urlaub = data;
          break;
        case this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Standort:
          this.DB.CurrentMitarbeiter.StandortID = data._id;
          break;
        case this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Liste_Position:
          this.DB.CurrentMitarbeiter.PositionID = data;
          break;
        case 'Resturlaub':
          this.DB.CurrentMitarbeiter.Resturlaub = data;
          break;
        case this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Liste_Standortfilter:
          this.DBStandort.CurrentStandortfilter = data;
          this.Pool.Mitarbeitersettings.StandortFilter = data !== null ? data._id : this.Const.NONE;
          this.Mitarbeiteralphabetauswahl = 'Alle';
          this.DB.UpdateMitarbeiter(this.Pool.Mitarbeiterdaten).then(() => {
            this.DBStandort.StandortfilterChanged.emit();
          }).catch(error => {
            this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'AuswahlOkButtonClicked', this.Debug.Typen.Page);
          });
          this.PrepareDaten();
          break;
      }
      this.ShowAuswahl = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'AuswahlOkButtonClicked', this.Debug.Typen.Page);
    }
  }
  GetDialogTitelicon() {
    try {
      if (this.DB.CurrentMitarbeiter || this.Pool.Mitarbeiterdaten) {
        switch (this.Auswahltitel) {
          case 'Standort festlegen':
            return 'location-outline';
            break;
          case 'Fachbereich festlegen':
            return 'hammer-outline';
            break;
          case 'Standortfilter festlegen':
            return 'location-outline';
            break;
          default:
            return 'help-outline';
            break;
        }
      } else return 'help-outline';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'GetDialogTitelicon', this.Debug.Typen.Page);
    }
  }
  SucheChanged(text) {
    try {
      this.Mitarbeiteralphabetauswahl = 'Alle';
      this.Mitarbeiterfiltertext = text;
      this.PrepareDaten();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'SucheChanged', this.Debug.Typen.Page);
    }
  }
  StandortFilterClickedHandler() {
    try {
      let Index = 0;
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Liste_Standortfilter;
      this.ShowAuswahl = true;
      this.Auswahltitel = 'Standortfilter festlegen';
      this.Auswahlliste = [];
      this.Auswahlliste.push({
        Index: Index,
        FirstColumn: '----',
        SecoundColumn: 'kein Filter',
        Data: null
      });
      Index++;
      for (let Eintrag of this.Pool.Standorteliste) {
        this.Auswahlliste.push({
          Index: Index,
          FirstColumn: Eintrag.Kuerzel,
          SecoundColumn: Eintrag.Ort,
          Data: Eintrag
        });
        Index++;
      }
      if (this.DBStandort.CurrentStandortfilter === null) {
        this.Auswahlindex = 0;
      } else {
        this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, {
          _id: this.DBStandort.CurrentStandortfilter._id
        });
        this.Auswahlindex++;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiterliste', 'StandortFilterClickedHandler', this.Debug.Typen.Page);
    }
  }
  ShowMeCheckedChanged(event) {
    try {
      this.ShowMeOnly = event.status;
      if (this.ShowMeOnly === true) {
        this.DBStandort.CurrentStandortfilter = null;
        this.Pool.Mitarbeitersettings.StandortFilter = this.Const.NONE;
        this.Mitarbeiteralphabetauswahl = 'Alle';
        this.DB.UpdateMitarbeiter(this.Pool.Mitarbeiterdaten).then(() => {
          this.DBStandort.StandortfilterChanged.emit();
        });
      }
      this.PrepareDaten();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'ShowMeCheckedChanged', this.Debug.Typen.Page);
    }
  }
  ShowArchivierteChanged(event) {
    try {
      this.ShowArchivierte = event.status;
      this.PrepareDaten();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'ShowArchivierteChanged', this.Debug.Typen.Page);
    }
  }
  AnredeClickedEventHandler() {
    try {
      this.ShowAuswahl = true;
      this.Auswahltitel = 'Anrede festlegen';
      this.Auswahlliste = [];
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Anrede;
      this.Auswahlliste.push({
        Index: 0,
        FirstColumn: 'Unbekannt',
        SecoundColumn: '',
        Data: this.Const.NONE
      });
      this.Auswahlliste.push({
        Index: 1,
        FirstColumn: 'Frau',
        SecoundColumn: '',
        Data: 'Frau'
      });
      this.Auswahlliste.push({
        Index: 2,
        FirstColumn: 'Herr',
        SecoundColumn: '',
        Data: 'Herr'
      });
      this.Auswahlindex = lodash.findIndex(this.Auswahlliste, {
        Data: this.DB.CurrentMitarbeiter.Anrede
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'AnredeClickedEventHandler', this.Debug.Typen.Page);
    }
  }
  UrlaubClickedEventHandler() {
    let Index = 0;
    this.ShowAuswahl = true;
    this.Auswahltitel = 'Urlaubstage festlegen';
    this.Auswahlliste = [];
    this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Urlaub;
    for (let i = 0; i <= 40; i = i + 0.5) {
      this.Auswahlliste.push({
        Index: Index,
        FirstColumn: i.toFixed(1),
        SecoundColumn: i === 1 ? 'Tag' : 'Tage',
        Data: i
      });
      Index++;
    }
    this.Auswahlindex = lodash.findIndex(this.Auswahlliste, {
      Data: this.DB.CurrentMitarbeiter.Urlaub
    });
  }
  catch(error) {
    this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'UrlaubClickedEventHandler', this.Debug.Typen.Page);
  }
  ShowAktuelleChanged(event) {
    try {
      this.ShowAktuelle = event.status;
      this.PrepareDaten();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'ShowAktuelleChanged', this.Debug.Typen.Page);
    }
  }
  GetStandortliste(Urlaubsfreigabeorte) {
    try {
      let Standort;
      let Standortliste = [];
      let Text = '';
      let Index = 0;
      for (let id of Urlaubsfreigabeorte) {
        Standort = lodash.find(this.Pool.Standorteliste, {
          _id: id
        });
        if (!lodash.isUndefined(Standort)) Standortliste.push(Standort);
      }
      Standortliste.sort((a, b) => {
        if (a.Ort < b.Ort) return -1;
        if (a.Ort > b.Ort) return 1;
        return 0;
      });
      for (Standort of Standortliste) {
        Text += Standort.Ort.substring(0, 3).toUpperCase();
        if (Index < Standortliste.length - 1) Text += ', ';
        Index++;
      }
      return Text;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'GetStandortliste', this.Debug.Typen.Page);
    }
  }
  FreigabefilterChanged(event) {
    try {
      this.Freigabefilter = event.detail.value;
      this.PrepareDaten();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'FreigabefilterChanged', this.Debug.Typen.Page);
    }
  }
  PositionClickedEventHandler() {
    try {
      let Index = 0;
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Liste_Position;
      this.ShowAuswahl = true;
      this.Auswahltitel = 'Position festlegen';
      this.Auswahlliste = [];
      for (let Eintrag of this.Pool.Mitarbeiterpositionenliste) {
        this.Auswahlliste.push({
          Index: Index,
          FirstColumn: Eintrag.Bezeichnung,
          SecoundColumn: '',
          Data: Eintrag._id
        });
        Index++;
      }
      debugger;
      this.Auswahlindex = lodash.findIndex(this.Pool.Mitarbeiterpositionenliste, {
        _id: this.DB.CurrentMitarbeiter.PositionID
      });
      this.Auswahlindex++;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'PositionClickedEventHandler', this.Debug.Typen.Page);
    }
  }
  ResturlaubClicked() {
    try {
      let Index = 0;
      this.Auswahldialogorigin = 'Resturlaub';
      this.Auswahltitel = 'Resturlaub festlegen';
      this.Auswahlliste = [];
      for (let i = -25; i < 0; i = i + 0.5) {
        this.Auswahlliste.push({
          Index: Index,
          FirstColumn: i.toFixed(1),
          SecoundColumn: i === -1 ? 'Tag' : 'Tage',
          Data: i
        });
        Index++;
      }
      for (let i = 0; i <= 25; i = i + 0.5) {
        this.Auswahlliste.push({
          Index: Index,
          FirstColumn: i.toFixed(1),
          SecoundColumn: i === 1 ? 'Tag' : 'Tage',
          Data: i
        });
        Index++;
      }
      this.Auswahlindex = lodash.findIndex(this.Auswahlliste, Eintrag => {
        return Eintrag.Data === this.DB.CurrentMitarbeiter.Resturlaub;
      });
      this.ShowAuswahl = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'ResturlaubClicked', this.Debug.Typen.Page);
    }
  }
  static ctorParameters = () => [{
    type: basics_1.BasicsProvider
  }, {
    type: debug_1.DebugProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: security_service_1.SecurityService
  }, {
    type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }, {
    type: auswahl_dialog_service_1.AuswahlDialogService
  }, {
    type: database_pool_service_1.DatabasePoolService
  }];
  static propDecorators = {
    Alphabetcomponent: [{
      type: core_1.ViewChild,
      args: ['Alphabet', {
        static: false
      }]
    }],
    PageHeader: [{
      type: core_1.ViewChild,
      args: ['PageHeader', {
        static: false
      }]
    }],
    PageFooter: [{
      type: core_1.ViewChild,
      args: ['PageFooter', {
        static: false
      }]
    }]
  };
};
exports.FiMitarbeiterlistePage = FiMitarbeiterlistePage;
exports.FiMitarbeiterlistePage = FiMitarbeiterlistePage = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'fi-mitarbeiterliste-page',
  template: __webpack_require__(/*! ./fi-mitarbeiterliste.html?ngResource */ 84440),
  styles: [__webpack_require__(/*! ./fi-mitarbeiterliste.scss?ngResource */ 19384)]
})], FiMitarbeiterlistePage);

/***/ }),

/***/ 96012:
/*!*********************************************************************!*\
  !*** ./src/app/pages/fi-standorteliste/fi-standorteliste.module.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FiStandortelistePageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const common_1 = __webpack_require__(/*! @angular/common */ 65056);
const forms_1 = __webpack_require__(/*! @angular/forms */ 71904);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const fi_standorteliste_1 = __webpack_require__(/*! ./fi-standorteliste */ 90756);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 6512);
const alphabet_module_1 = __webpack_require__(/*! ../../components/alphabet/alphabet.module */ 87143);
const fi_standort_editor_module_1 = __webpack_require__(/*! ../../components-page/fi-standort-editor/fi-standort-editor.module */ 79664);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 70216);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 90520);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 6168);
const page_modal_keeper_module_1 = __webpack_require__(/*! ../../components/page-modal-keeper/page-modal-keeper.module */ 54588);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 10272);
const routes = [{
  path: '',
  component: fi_standorteliste_1.FiStandortelistePage
}];
let FiStandortelistePageModule = class FiStandortelistePageModule {};
exports.FiStandortelistePageModule = FiStandortelistePageModule;
exports.FiStandortelistePageModule = FiStandortelistePageModule = tslib_1.__decorate([(0, core_1.NgModule)({
  imports: [common_1.CommonModule, forms_1.FormsModule, forms_1.ReactiveFormsModule, angular_1.IonicModule, router_1.RouterModule.forChild(routes), abstand_element_fixed_module_1.AbstandElementFixedModule, alphabet_module_1.AlphabetModule, fi_standort_editor_module_1.FiStandortEditorModule, page_header_module_1.PageHeaderModule, page_footer_module_1.PageFooterModule, page_header_menu_module_1.PageHeaderMenuModule, page_modal_keeper_module_1.PageModalKeepermodule, auswahl_dialog_module_1.AuswahlDialogModule],
  declarations: [fi_standorteliste_1.FiStandortelistePage]
})], FiStandortelistePageModule);

/***/ }),

/***/ 90756:
/*!**************************************************************!*\
  !*** ./src/app/pages/fi-standorteliste/fi-standorteliste.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FiStandortelistePage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 14652);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 34388);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 19668);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 29743);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 7992);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 58864);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 48044);
const database_urlaub_service_1 = __webpack_require__(/*! ../../services/database-urlaub/database-urlaub.service */ 9544);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 22848);
const security_service_1 = __webpack_require__(/*! ../../services/security/security.service */ 34636);
let FiStandortelistePage = class FiStandortelistePage {
  Basics;
  Debug;
  Tools;
  Const;
  DB;
  Security;
  DBMitarbeiter;
  DBUrlaub;
  Auswahlservice;
  Pool;
  Alphabetcomponent;
  PageHeader;
  PageFooter;
  Standorteliste;
  Standortealphabet;
  Alphapetbreite;
  Standortealphabetauswahl;
  HideAuswahl;
  Auswahlliste;
  Auswahlindex;
  Auswahltitel;
  Lastletter;
  Standortebuchstabenliste;
  Standardalphabet;
  Zusatzbuttonliste;
  Standortefiltertext;
  Standortefilter;
  Inputtimer;
  Listenbreite;
  ShowEditor;
  EditorValid;
  ListeSubscription;
  ShowAuswahl;
  Auswahlhoehe;
  Auswahldialogorigin;
  constructor(Basics, Debug, Tools, Const, DB, Security, DBMitarbeiter, DBUrlaub, Auswahlservice, Pool) {
    this.Basics = Basics;
    this.Debug = Debug;
    this.Tools = Tools;
    this.Const = Const;
    this.DB = DB;
    this.Security = Security;
    this.DBMitarbeiter = DBMitarbeiter;
    this.DBUrlaub = DBUrlaub;
    this.Auswahlservice = Auswahlservice;
    this.Pool = Pool;
    try {
      this.Standardalphabet = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
      this.Standortealphabet = [];
      this.Standortealphabetauswahl = 'Alle';
      this.Standorteliste = [];
      this.Zusatzbuttonliste = [];
      this.HideAuswahl = true;
      this.Inputtimer = null;
      this.Alphapetbreite = 44;
      this.Standortefilter = '';
      this.Standortealphabet = this.Standardalphabet;
      this.Standortebuchstabenliste = [];
      this.Listenbreite = 0;
      this.ShowEditor = false;
      this.EditorValid = false;
      this.ListeSubscription = null;
      this.Auswahlliste = [];
      this.Auswahlindex = 0;
      this.Auswahltitel = '';
      this.Auswahldialogorigin = '';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'constructor', this.Debug.Typen.Page);
    }
  }
  ngOnDestroy() {
    try {
      this.ListeSubscription.unsubscribe();
      this.ListeSubscription = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'OnDestroy', this.Debug.Typen.Page);
    }
  }
  ngOnInit() {
    try {
      this.ListeSubscription = this.Pool.StandortelisteChanged.subscribe(() => {
        this.PrepareDaten();
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'OnInit', this.Debug.Typen.Page);
    }
  }
  ionViewDidEnter() {
    try {
      let Alphabetbreite = typeof this.Alphabetcomponent.Breite !== 'undefined' ? this.Alphabetcomponent.Breite : 40;
      this.Listenbreite = this.Basics.Contentbreite - Alphabetbreite - 4;
      this.PrepareDaten();
      this.Alphabetcomponent.InitScreen();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'ionViewDidEnter', this.Debug.Typen.Page);
    }
  }
  ionViewDidLeave() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'ionViewDidLeave', this.Debug.Typen.Page);
    }
  }
  StandortButtonClicked(eintrag) {
    try {
      this.DB.CurrentStandort = lodash.cloneDeep(eintrag);
      this.ShowEditor = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'MitrabeiterButtonClicked', this.Debug.Typen.Page);
    }
  }
  AddStandorteButtonClicked() {
    try {
      this.DB.CurrentStandort = this.DB.GetEmptyStandort();
      this.ShowEditor = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'AddStandorteButtonClicked', this.Debug.Typen.Page);
    }
  }
  AlphabetClicked(buchstabe) {
    try {
      this.Standortefiltertext = '';
      this.Standortefilter = '';
      this.Standortealphabetauswahl = buchstabe;
      this.PrepareDaten();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'AlphabetClicked', this.Debug.Typen.Page);
    }
  }
  GetStandorteAlphabetbuchstabe(value) {
    try {
      let Buchstabe = value.Ort.substring(0, 1).toUpperCase();
      if (Buchstabe !== this.Lastletter) {
        this.Lastletter = Buchstabe;
        return Buchstabe;
      } else {
        return '';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'GetStandorteAlphabetbuchstabe', this.Debug.Typen.Page);
    }
  }
  PrepareDaten() {
    try {
      let Liste;
      let Merker;
      let Buchstabe;
      let Quelle;
      let Laenge;
      let TeilA;
      let TeilB;
      let TeilC;
      let Teillaenge;
      let PosA;
      let Solltext;
      let Suchtext;
      if (this.Pool.Standorteliste !== null) {
        Quelle = lodash.cloneDeep(this.Pool.Standorteliste);
        this.Lastletter = '';
        // Nach Namen sortieren
        Liste = lodash.cloneDeep(Quelle);
        Liste.sort((a, b) => {
          if (a.Ort < b.Ort) return -1;
          if (a.Ort > b.Ort) return 1;
          return 0;
        });
        // Standortfilter anwenden
        if (this.DB.CurrentStandortfilter !== null) {
          Merker = lodash.cloneDeep(Liste);
          Liste = [];
          for (let Eintrag of Merker) {
            Liste.push(Eintrag);
          }
        }
        // Standortealphabetauswahl Buchstaben festlegen
        if (Liste.length > 6) {
          this.Standortealphabet = ['Alle'];
          for (let Eintrag of Liste) {
            Buchstabe = Eintrag.Ort.substring(0, 1).toUpperCase();
            if (this.Standortealphabet.indexOf(Buchstabe) === -1) this.Standortealphabet.push(Buchstabe);
          }
        } else {
          this.Standortealphabet = this.Standardalphabet;
        }
        // Alphabetfilter anwenden
        if (this.Standortealphabetauswahl !== 'Alle') {
          Merker = lodash.cloneDeep(Liste);
          Liste = [];
          for (let Eintrag of Merker) {
            Buchstabe = Eintrag.Ort.substring(0, 1).toUpperCase();
            if (this.Standortealphabetauswahl === Buchstabe) Liste.push(Eintrag);
          }
        }
        // Suche Standortefilter anwenden
        if (this.Standortefilter !== '') {
          Merker = lodash.cloneDeep(Liste);
          Liste = [];
          for (let Eintrag of Merker) {
            Solltext = this.Standortefilter.toLowerCase();
            Suchtext = Eintrag.Ort.toLowerCase();
            PosA = Suchtext.indexOf(Solltext);
            if (PosA !== -1) {
              Laenge = Eintrag.Ort.length;
              Teillaenge = Solltext.length;
              TeilA = Eintrag.Ort.substr(0, PosA);
              TeilB = Eintrag.Ort.substr(PosA, Teillaenge);
              Teillaenge = Laenge - Teillaenge - PosA;
              TeilC = Eintrag.Ort.substr(Laenge - Teillaenge, Teillaenge);
              Eintrag.Filtered = true;
              Eintrag.Text_A = TeilA;
              Eintrag.Text_B = TeilB;
              Eintrag.Text_C = TeilC;
              Liste.push(Eintrag);
            }
          }
        }
        // Buchstabenliste festlegen
        this.Standortebuchstabenliste = [];
        for (let Eintrag of Liste) {
          this.Standortebuchstabenliste.push(this.GetStandorteAlphabetbuchstabe(Eintrag));
        }
        this.Standorteliste = lodash.cloneDeep(Liste);
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'PrepareDaten', this.Debug.Typen.Page);
    }
  }
  EditorValidChanged(event) {
    try {
      this.EditorValid = event;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'EditorValidChanged', this.Debug.Typen.Page);
    }
  }
  GetDialogTitel() {
    try {
      if (this.DB.CurrentStandort !== null) {
        return this.DB.CurrentStandort._id === null ? 'Neuen Standort anlegen' : 'Standort bearbeiten';
      } else {
        return 'Unbekannt';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'GetDialogTitel', this.Debug.Typen.Page);
    }
  }
  SucheChangedHandler(text) {
    try {
      this.Standortefiltertext = text;
      this.Standortefilter = this.Standortefiltertext;
      this.PrepareDaten();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'SucheChangedHandler', this.Debug.Typen.Page);
    }
  }
  AuswahlOkButtonClicked(data) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        switch (_this.Auswahldialogorigin) {
          case _this.Auswahlservice.Auswahloriginvarianten.Standorteeditor_Land:
            _this.DB.CurrentStandort.Land = data;
            break;
          case _this.Auswahlservice.Auswahloriginvarianten.Standorteeditor_Bundesland:
            _this.DB.CurrentStandort.Bundesland = data;
            break;
          case _this.Auswahlservice.Auswahloriginvarianten.Standorteeditor_Konfession:
            _this.DB.CurrentStandort.Konfession = data;
            break;
        }
        _this.ShowAuswahl = false;
      } catch (error) {
        _this.Debug.ShowErrorMessage(error.message, 'Standorteliste', 'AuswahlOkButtonClicked', _this.Debug.Typen.Page);
      }
    })();
  }
  LandClickedEventHandler() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Standorteeditor_Land;
      this.Auswahltitel = 'Land auswählen';
      this.Auswahlhoehe = 600;
      this.ShowAuswahl = true;
      this.Auswahlliste = [];
      this.Auswahlliste.push({
        Index: 0,
        FirstColumn: 'Deutschland',
        SecoundColumn: 'DE',
        Data: 'DE'
      });
      this.Auswahlliste.push({
        Index: 1,
        FirstColumn: 'Bulgarien',
        SecoundColumn: 'BG',
        Data: 'BG'
      });
      this.Auswahlindex = lodash.findIndex(this.Auswahlliste, {
        Data: this.DB.CurrentStandort.Land
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standorteliste', 'LandClickedEventHandler', this.Debug.Typen.Page);
    }
  }
  BundeslandClickedEventHandler() {
    try {
      let Index = 0;
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Standorteeditor_Bundesland;
      this.Auswahltitel = 'Bundesland auswählen';
      this.Auswahlhoehe = 600;
      this.ShowAuswahl = true;
      this.Auswahlliste = [];
      for (let Region of this.DBUrlaub.Regionenliste) {
        this.Auswahlliste.push({
          Index: Index,
          FirstColumn: Region.Name,
          SecoundColumn: Region.isoCode,
          Data: Region.isoCode
        });
        Index++;
      }
      this.Auswahlindex = lodash.findIndex(this.Auswahlliste, {
        Data: this.DB.CurrentStandort.Bundesland
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standorteliste', 'BundeslandClickedEventHandler', this.Debug.Typen.Page);
    }
  }
  KonfessionClickedEventHandler() {
    try {
      this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Standorteeditor_Konfession;
      this.Auswahltitel = 'Konfession auswählen';
      this.Auswahlhoehe = 600;
      this.ShowAuswahl = true;
      this.Auswahlliste = [];
      this.Auswahlliste.push({
        Index: 0,
        FirstColumn: 'Katholisch',
        SecoundColumn: 'RK',
        Data: 'RK'
      });
      this.Auswahlliste.push({
        Index: 1,
        FirstColumn: 'Evangelisch',
        SecoundColumn: 'EV',
        Data: 'EV'
      });
      this.Auswahlindex = lodash.findIndex(this.Auswahlliste, {
        Data: this.DB.CurrentStandort.Konfession
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standorteliste', 'KonfessionClickedEventHandler', this.Debug.Typen.Page);
    }
  }
  CheckMitarbeiterIsStandortUrlaubsfreigabe(id, Standort) {
    try {
      let Index = Standort.Urlaubfreigabepersonen.indexOf(id);
      return Index !== -1;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standorteliste', 'CheckMitarbeiterIsStandortUrlaubsfreigabe', this.Debug.Typen.Page);
    }
  }
  CheckMitarbeiterIsStandortHomeofficefreigabe(id, Standort) {
    try {
      let Index = Standort.Homeofficefreigabepersonen.indexOf(id);
      return Index !== -1;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standorteliste', 'CheckMitarbeiterIsStandortHomeofficefreigabe', this.Debug.Typen.Page);
    }
  }
  static ctorParameters = () => [{
    type: basics_1.BasicsProvider
  }, {
    type: debug_1.DebugProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_standorte_service_1.DatabaseStandorteService
  }, {
    type: security_service_1.SecurityService
  }, {
    type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
  }, {
    type: database_urlaub_service_1.DatabaseUrlaubService
  }, {
    type: auswahl_dialog_service_1.AuswahlDialogService
  }, {
    type: database_pool_service_1.DatabasePoolService
  }];
  static propDecorators = {
    Alphabetcomponent: [{
      type: core_1.ViewChild,
      args: ['Alphabet', {
        static: false
      }]
    }],
    PageHeader: [{
      type: core_1.ViewChild,
      args: ['PageHeader', {
        static: false
      }]
    }],
    PageFooter: [{
      type: core_1.ViewChild,
      args: ['PageFooter', {
        static: false
      }]
    }]
  };
};
exports.FiStandortelistePage = FiStandortelistePage;
exports.FiStandortelistePage = FiStandortelistePage = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'fi-standorteliste-page',
  template: __webpack_require__(/*! ./fi-standorteliste.html?ngResource */ 63844),
  styles: [__webpack_require__(/*! ./fi-standorteliste.scss?ngResource */ 19012)]
})], FiStandortelistePage);

/***/ }),

/***/ 84104:
/*!*******************************************!*\
  !*** ./src/app/pipes/safe.pipe.module.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SafePipeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const safe_pipe_1 = __webpack_require__(/*! ./safe.pipe */ 66144);
let SafePipeModule = class SafePipeModule {};
exports.SafePipeModule = SafePipeModule;
exports.SafePipeModule = SafePipeModule = tslib_1.__decorate([(0, core_1.NgModule)({
  declarations: [safe_pipe_1.SafePipe],
  exports: [safe_pipe_1.SafePipe],
  imports: [],
  providers: []
})], SafePipeModule);

/***/ }),

/***/ 66144:
/*!************************************!*\
  !*** ./src/app/pipes/safe.pipe.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SafePipe = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const platform_browser_1 = __webpack_require__(/*! @angular/platform-browser */ 50168);
let SafePipe = class SafePipe {
  sanitizer;
  constructor(sanitizer) {
    this.sanitizer = sanitizer;
  }
  transform(value, type) {
    switch (type) {
      case 'html':
        return this.sanitizer.bypassSecurityTrustHtml(value);
      case 'style':
        return this.sanitizer.bypassSecurityTrustStyle(value);
      case 'script':
        return this.sanitizer.bypassSecurityTrustScript(value);
      case 'url':
        return this.sanitizer.bypassSecurityTrustUrl(value);
      case 'resourceUrl':
        return this.sanitizer.bypassSecurityTrustResourceUrl(value);
      default:
        throw new Error(`Invalid safe type specified: ${type}`);
    }
  }
  static ctorParameters = () => [{
    type: platform_browser_1.DomSanitizer
  }];
};
exports.SafePipe = SafePipe;
exports.SafePipe = SafePipe = tslib_1.__decorate([(0, core_1.Pipe)({
  name: 'safe'
})], SafePipe);

/***/ }),

/***/ 48044:
/*!*******************************************************************!*\
  !*** ./src/app/services/auswahl-dialog/auswahl-dialog.service.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AuswahlDialogService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
let AuswahlDialogService = class AuswahlDialogService {
  Debug;
  Auswahloriginvarianten = {
    Standorteeditor_Land: 'Standorteeditor_Land',
    Standorteeditor_Bundesland: 'Standorteeditor_Bundesland',
    Standorteeditor_Konfession: 'Standorteeditor_Konfession',
    Projekteliste_Standortfiler: 'Projekteliste_Standortfiler',
    Projekteliste_Editor_Leistungsphase: 'Projekteliste_Editor_Leistungsphase',
    Projekte_Editor_Standort: 'Projekte_Editor_Standortfilter',
    Projekte_Editor_Mitarbeiterauswahl_Projektleiter: 'Projekte_Editor_Mitarbeiterauswahl_Projektleiter',
    Projekte_Editor_Mitarbeiterauswahl_Stellvertreter: 'Projekte_Editor_Mitarbeiterauswahl_Stellvertreter',
    Projekte_Editor_Mitarbeiterauswahl: 'Projekte_Editor_Mitarbeiterauswahl',
    Projekte_Editor_Mitarbeiterauswahl_Standortfilter: 'Projekte_Editor_Mitarbeiterauswahl_Standortfilter',
    Projekte_Editor_Projektstatus: 'Projekte_Editor_Projektstatus',
    // Projekte_Editor_Beteiligteneditor_Fachbereich:     'Projekte_Editor_Beteiligteneditor_Fachbereich',
    Projekte_Editor_Firmeneditor_Fachbereich: 'Projekte_Editor_Firmeneditor_Fachbereich',
    Projekte_Editor_Beteiligteneditor_Fachfirma: 'Projekte_Editor_Beteiligteneditor_Fachfirma',
    Favoriten_Editor_Projekteauswahl_Standortfilter: 'Favoriten_Editor_Projekteauswahl_Standortfilter',
    Mitarbeiter_Editor_Standort: 'Mitarbeiter_Editor_Standort',
    Mitarbeiter_Editor_Fachbereich: 'Mitarbeiter_Editor_Fachbereich',
    Mitarbeiter_Editor_Anrede: 'Mitarbeiter_Editor_Anrede',
    Mitarbeiter_Editor_Urlaub: 'Mitarbeiter_Editor_Urlaub',
    Mitarbeiter_Liste_Standortfilter: 'Mitarbeiter_Liste_Standortfilter',
    Mitarbeiter_Liste_Position: 'Mitarbeiter_Liste_Position',
    Aufgabenliste_ZustaendigExtern: 'Aufgabenliste_ZustaendigExtern',
    Aufgabenliste_ZustaendigIntern: 'Aufgabenliste_ZustaendigIntern',
    Aufgabenliste_Fortschritt: 'Aufgabenliste_Fortschritt',
    Aufgabenliste_Zeitfilter: 'Aufgabenliste_Zeitfilter',
    Aufgabenliste_Filter_Zeitspanne: 'Aufgabenliste_Filter_Zeitspanne',
    Aufgabenliste_Editor_Fachbereich: 'Aufgabenliste_Editor_Fachbereich',
    Aufgabenliste_Editor_Status: 'Aufgabenliste_Editor_Status',
    Aufgabenliste_Editor_Standortfilter: 'Aufgabenliste_Editor_Standortfilter',
    Aufgabenliste_Editor_ZustaendigExtern: 'Aufgabenliste_Editor_ZustaendigExtern',
    Aufgabenliste_Editor_ZustaendigIntern: 'Aufgabenliste_Editor_ZustaendigIntern',
    Aufgabenliste_Editor_Leistungsphase: 'Aufgabenliste_Editor_Kostengruppe',
    Aufgabenliste_Editor_Kostengruppe: 'Aufgabenliste_Editor_Leistungsphase',
    Aufgabenliste_Editor_Verfasser: 'Aufgabenliste_Editor_Verfasser',
    Aufgabenliste_Editor_AnmerkungenVerfasser: 'Aufgabenliste_Editor_AnmerkungenVerfasser',
    Aufgabenliste_Meintageintrag_Status: 'Aufgabenliste_Meintageintrag_Status',
    Aufgabenliste_Meintageintrag_Termin: 'Aufgabenliste_Meintageintrag_Termin',
    Festlegungsliste_Editor_Leistungsphase: 'Festlegungsliste_Editor_Leistungsphase',
    Festlegungsliste_Leistungsphasefilter: 'Festlegungsliste_Leistungsphasefilter',
    Festlegungliste_Emaileditor_Standortfilter: 'Festlegungliste_Emaileditor_Standortfilter',
    Festlegungliste_Editor_Status: 'Festlegungliste_Editor_Status',
    Festlegungliste_Editor_Fachbereich: 'Festlegungliste_Editor_Fachbereich',
    Festlegungliste_Editor_Kostengruppe: 'Festlegungliste_Editor_Kostengruppe',
    Festlegungliste_Editor_ZustaendigExtern: 'Festlegungliste_Editor_ZustaendigExtern',
    Festlegungliste_Editor_ZustaendigIntern: 'Festlegungliste_Editor_ZustaendigIntern',
    Festlegungliste_Emaileditor_Intern_Empfaenger: 'Festlegungliste_Emaileditor_Intern_Empfaenger',
    Festlegungliste_Emaileditor_Intern_CcEmpfaenger: 'Festlegungliste_Emaileditor_Intern_CcEmpfaenger',
    Festlegungliste_Emaileditor_Extern_Empfaenger: 'Festlegungliste_Emaileditor_Extern_Empfaenger',
    Festlegungliste_Emaileditor_Extern_CcEmpfaenger: 'Festlegungliste_Emaileditor_Extern_CcEmpfaenger',
    Bautagebuchliste_Emaileditor_Intern_Empfaenger: 'Bautagebuchliste_Emaileditor_Intern_Empfaenger',
    Bautagebuchliste_Emaileditor_Intern_CcEmpfaenger: 'Bautagebuchliste_Emaileditor_Intern_CcEmpfaenger',
    Bautagebuchliste_Emaileditor_Extern_Empfaenger: 'Bautagebuchliste_Emaileditor_Extern_Empfaenger',
    Bautagebuchliste_Emaileditor_Extern_CcEmpfaenger: 'Bautagebuchliste_Emaileditor_Extern_CcEmpfaenger',
    Bautagebuchliste_Bautagebucheditor: 'Bautagebuchliste_Bautagebucheditor',
    Protokollliste_Editor_Leistungsphase: 'Protokollliste_Editor_Leistungsphase',
    Protokollliste_Editor_Kostengruppe: 'Protokollliste_Editor_Kostengruppe',
    Protokollliste_Protokolleditor_Teamteilnehmer: 'Protokollliste_Protokolleditor_Teamteilnehmer',
    Protokollliste_Projektpunkteditor_Teamteilnehmer: 'Protokollliste_Projektpunkteditor_Teamteilnehmer',
    Protokollliste_Protokolleditor_Beteilgtenteilnehmer: 'Protokollliste_Protokolleditor_Beteilgtenteilnehmer',
    Protokollliste_Projektpunkteditor_Beteilgtenteilnehmer: 'Protokollliste_Projektpunkteditor_Beteilgtenteilnehmer',
    Urlaubsplanung_Mitarbeiter_Wechseln: 'Urlaubsplanung_Mitarbeiter_Wechseln',
    Urlaubsplanung_Vertreter_Festlegen: 'Urlaubsplanung_Vertreter_Festlegen',
    Urlaubsplanung_Status_Aendern: 'Urlaubsplanung_Status_Aendern',
    Urlaubsplanung_Jahr_Aendern: 'Urlaubsplanung_Jahr_Aendern',
    UrlaubEinstellungen_Projektbeteiligte_Auswahl: 'UrlaubEinstellungen_Projektbeteiligte_Auswahl',
    UrlaubEinstellungen_Freigeber_Auswahl: 'UrlaubEinstellungen_Freigeber_Auswahl',
    UrlaubEinstellungen_Standort_Filter: 'UrlaubEinstellungen_Standort_Filter',
    UrlaubPlanung_Standort_Filter: 'UrlaubPlanung_Standort_Filter',
    UrlaubUebersicht_Standort_Filter: 'UrlaubUebersicht_Standort_Filter',
    UrlaubAnfargen_Standort_Filter: 'UrlaubAnfargen_Standort_Filter',
    Protokollliste_Emaileditor_Extern_Empfaenger: 'Protokollliste_Emaileditor_Extern_Empfaenger',
    Protokollliste_Emaileditor_Extern_CcEmpfaenger: 'Protokollliste_Emaileditor_Extern_CcEmpfaenger',
    Protokollliste_Emaileditor_Intern_Empfaenger: 'Protokollliste_Emaileditor_Intern_Empfaenger',
    Protokollliste_Emaileditor_Intern_CcEmpfaenger: 'Protokollliste_Emaileditor_Intern_CcEmpfaenger',
    LOPliste_Emaileditor_Extern_Empfaenger: 'LOPliste_Emaileditor_Extern_Empfaenger',
    LOPliste_Emaileditor_Extern_CcEmpfaenger: 'LOPliste_Emaileditor_Extern_CcEmpfaenger',
    LOPliste_Emaileditor_Intern_Empfaenger: 'LOPliste_Emaileditor_Intern_Empfaenger',
    LOPliste_Emaileditor_Intern_CcEmpfaenger: 'LOPliste_Emaileditor_Intern_CcEmpfaenger',
    Protokollliste_Editor_Standortfilter: 'Protokollliste_Editor_Standortfilter',
    Protokollliste_Projektpunkteditor_Status: 'Protokollliste_Projektpunkteditor_Status',
    Protokollliste_Projektpunkteditor_Fachbereich: 'Protokollliste_Projektpunkteditor_Fachbereich',
    Simontabelle_Editor_Emailempfaenger: 'Simontabelle_Editor_Emailempfaenger',
    Emailliste_Projektpunkteditor_Fachbereich: 'Emailliste_Projektpunkteditor_Fachbereich',
    Emailliste_Editor_ZustaendigIntern: 'Emailliste_Editor_ZustaendigIntern',
    Emailliste_Editor_ZustaendigExtern: 'Emailliste_Editor_ZustaendigExtern',
    Emailliste_Beteiligteneditor_Projektauswahl: 'Emailliste_Beteiligteneditor_Projektauswahl',
    Protokollliste_Filter_Leistungsphase: 'Protokollliste_Filter_Leistungsphase',
    Protokollliste_Filter_Zeitspanne: 'Protokollliste_Filter_Zeitspanne',
    LOPListe_LOPListeeditor_InternTeilnehmer: 'LOPListe_LOPListeeditor_InternTeilnehmer',
    LOPListe_LOPListeeditor_ExternTeilnehmer: 'LOPListe_LOPListeeditor_ExternTeilnehmer',
    LOPListe: 'LOPListe',
    LOPListe_Thumnailsize: 'LOPListe_Thumnailsize',
    LOPListe_Eintrageditor_ZustaendigExtern: 'LOPListe_Eintrageditor_ZustaendigExtern',
    LOPListe_Eintrageditor_ZustaendigIntern: 'LOPListe_Eintrageditor_ZustaendigIntern',
    LOPListe_Eintrageditor_Standortfilter: 'LOPListe_Eintrageditor_Standortfilter',
    LOPListe_Eintrageditor_Fachbereich: 'LOPListe_Eintrageditor_Fachbereich',
    LOPListe_Eintrageditor_Status: 'LOPListe_Eintrageditor_Status',
    LOPListe_Eintrageditor_Prioritaet: 'LOPListe_Eintrageditor_Prioritaet',
    LOPListe_Eintrageditor_AnmerkungVerfasser: 'LOPListe_Eintrageditor_AnmerkungVerfasser',
    LOPListe_Eintrageditor_Verfasser: 'LOPListe_Eintrageditor_Verfasser',
    LOPListe_Emaileditor_Intern_Empfaenger: 'LOPListe_Emaileditor_Intern_Empfaenger',
    LOPListe_Emaileditor_Intern_CcEmpfaenger: 'LOPListe_Emaileditor_Intern_CcEmpfaenger',
    LOPListe_Emaileditor_Extern_Empfaenger: 'LOPListe_Emaileditor_Extern_Empfaenger',
    LOPListe_Emaileditor_Extern_CcEmpfaenger: 'LOPListe_Emaileditor_Extern_CcEmpfaenger',
    Urlaubsliste_Bundesland: 'Urlaubsliste_Bundesland'
  };
  constructor(Debug) {
    this.Debug = Debug;
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Dialog Auswahl', 'constructor', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }];
};
exports.AuswahlDialogService = AuswahlDialogService;
exports.AuswahlDialogService = AuswahlDialogService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], AuswahlDialogService);

/***/ }),

/***/ 14652:
/*!*******************************************!*\
  !*** ./src/app/services/basics/basics.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.BasicsProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
let BasicsProvider = class BasicsProvider {
  platform;
  Const;
  Headerhoehe = 0;
  Footerhoehe = 0;
  Contenthoehe = 0;
  Contentbreite = 0;
  InnerContenthoehe = 0;
  Waittime = 300;
  Svgpath = 'assets/svgs/';
  AppBuild = '05.06.2024 07:00';
  AppVersionName = '1.19';
  AppVersionDatum = '05.06.2024';
  WebAppUrl = 'https://polite-cliff-084832d03.4.azurestaticapps.net/';
  Farben = {
    BAEBlau: '#307ac1',
    BAEHellgrau: '#dfe5eb',
    Gruen: '#006400',
    Burnicklgruen: '#c7d304',
    Grau: '#454545',
    Buttoncolor: '#444444',
    Blau: '#00008B',
    Orange: '#FF8C00',
    Bordercolor: '#3880ff',
    Burnicklbraun: '#7b6a58',
    Burnicklgrau: '#354547',
    ButtongrauDisabled: '#444444'
  };
  Ionicfarben = {
    BurnicklGruen: 'burnicklgruen',
    BAEBlau: 'baeblau',
    BurnicklGrau: 'burnicklgrau',
    BurnicklBraun: 'burnicklbraun',
    Gruen: 'gruen',
    Orange: 'orange',
    Grau: 'grau',
    Silber: 'silber',
    Schwarz: 'schwarz',
    Weiss: 'weiss',
    Rot: 'rot',
    Blau: 'blau',
    Dunkelblau: 'dunkelblau',
    Braun: 'braun',
    Teal: 'teal',
    Gelb: 'gelb'
  };
  constructor(platform, Const) {
    this.platform = platform;
    this.Const = Const;
  }
  MeassureInnercontent(header, footer) {
    try {
      if (typeof header !== 'undefined' && header !== null) {
        this.Headerhoehe = header.PageHeaderDiv.nativeElement.clientHeight;
      } else this.Headerhoehe = 56;
      if (typeof footer !== 'undefined' && footer !== null) {
        this.Footerhoehe = footer.PageFooterFrameDiv.nativeElement.clientHeight;
      } else this.Footerhoehe = 55;
      this.InnerContenthoehe = this.Contenthoehe - this.Headerhoehe - this.Footerhoehe;
      console.log('Basics MeassureScreen -> Screenbreite: ' + this.platform.width() + ' / Screenhoehe: ' + this.platform.height());
      console.log('Basics MeassureScreen -> Headerhoehe: ' + this.Headerhoehe + ' / Footerhoehe: ' + this.Footerhoehe);
      console.log('Basics MeassureScreen -> InnerContenthoehe: ' + this.InnerContenthoehe);
    } catch (error) {
      window.console.log(error + ' / Basics ' + ' / MeassureInnercontent ');
    }
  }
  static ctorParameters = () => [{
    type: angular_1.Platform
  }, {
    type: const_1.ConstProvider
  }];
};
exports.BasicsProvider = BasicsProvider;
exports.BasicsProvider = BasicsProvider = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], BasicsProvider);

/***/ }),

/***/ 29743:
/*!*****************************************!*\
  !*** ./src/app/services/const/const.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ConstProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const _MitarbeiterdatenKeys = {
  MitarbeiterID: 'MitarbeiterID',
  Typ: 'Typ',
  Name: 'Name',
  Vorname: 'Vorname',
  Strasse: 'Strasse',
  PLZ: 'PLZ',
  Ort: 'Ort',
  Telefon: 'Telefon',
  Mobil: 'Mobil',
  Email: 'Email',
  Position: 'Position',
  Zeit: 'Zeit',
  Zeitstempel: 'Zeitstempel',
  Aktiviert: 'Aktiviert',
  Verified: 'Verified',
  OS: 'OS',
  Passwort: 'Passwort',
  UserID: 'UserID',
  Rechte: 'Rechte',
  Working: 'Working',
  KolonnenfuehrerID: 'KolonnenfuehrerID',
  Settings: 'Settings',
  Startseitensetup: 'Startseitensetup',
  Zeitmonatsuebersichtsetup: 'Zeitmonatsuebersichtsetup',
  Zeitjahresuebersichtsetup: 'Zeitjahresuebersichtsetup',
  KolonnenmitgliederIDListe: 'KolonnenmitgliederIDListe',
  Regelarbeitszeit: 'Regelarbeitszeit',
  Datastatus: 'Datastatus',
  Formelsammlung: 'Formelsammlung',
  Schaltplaene: 'Schaltplaene',
  Steckerbelegungen: 'Steckerbelegungen',
  Shortcuts: 'Shortcuts',
  Baustelle: 'Baustelle',
  Aufgaben: 'Aufgaben',
  Material: 'Material',
  Notizen: 'Notizen',
  Arbeitstag: 'Arbeitstag',
  Tagebuch: 'Tagebuch',
  News: 'News',
  Zeiterfassung: 'Zeiterfassung',
  Zeituebersicht: 'Zeituebersicht',
  Zeiterfassungsetup: 'Zeiterfassungsetup',
  Kamerasettings: 'Kamerasettings',
  LastDokumentID: 'LastDokumentID',
  Tagebuchsetup: 'Tagebuchsetup'
};
const _Loginstatusvarianten = {
  ok: 'ok',
  out: 'out'
};
const _Playermodus = {
  Stopped: 'Stopped',
  Running: 'Running',
  Paused: 'Paused'
};
const _Dialogmessages = {
  ok: 'ok',
  no: 'no',
  cancel: 'cancel',
  delete: 'delete',
  wahla: 'wahla',
  wahlb: 'wahlb'
};
const _Mitarbeiterpossitionen = {
  Administrator: 'Administrator',
  Mitarbeiter: 'Mitarbeiter',
  Teamleiter: 'Teamleiter',
  Keine: 'Keine'
};
const _Nachrichtentypen = {
  Text: 'Text',
  Aufgabe: 'Aufgabe',
  AufgabeFinished: 'AufgabeFinished',
  Material: 'Material',
  MaterialFinished: 'MaterialFinished',
  Notiz: 'Notiz',
  Zeitmarke: 'Zeitmarke',
  Teambeitritt: 'Teambeitritt',
  Teamaustritt: 'Teamaustritt',
  Zeitdaten: 'Zeitdaten',
  Tagebuchbildrequest: 'Tagebuchbildrequest',
  TagebuchbildrequestFinished: 'TagebuchbildrequestFinished'
};
const _Nachrichtendirections = {
  OUT: 'OUT',
  IN: 'IN',
  NONE: 'NONE'
};
const _Adressbuchtypen = {
  Firma: 'Firma',
  Mitarbeiter: 'Mitarbeiter',
  Solo: 'Solo'
};
const _Mitarbeitertypen = {
  Firmengruender: 'Firmengruender',
  Mitarbeiter: 'Mitarbeiter',
  Solo: 'Solo'
};
const _Projektpunktdetailtyp = {
  Statusmeldung: 'Statusmeldung',
  Nextstep: 'Nextstep'
};
const _Platformliste = {
  WEB: 'web',
  ANDROID: 'android',
  IOS: 'ios'
};
const _Startseitensetupvarianten = {
  Shortcuts: 'Shortcuts',
  Baustelle: 'Baustelle',
  Aufgaben: 'Aufgaben',
  Material: 'Material',
  Notizen: 'Notizen',
  Tagebuch: 'Tagebuch',
  News: 'News',
  Arbeitstag: 'Arbeitstag'
};
const _Orientationvarianten = {
  Landscape: 'Landscape',
  Portrait: 'Portrait'
};
const _Virtualitemvarianten = {
  Eintrag: 'Eintrag',
  Alphabet: 'Alphabet',
  Abstand: 'Abstand',
  Button: 'Button'
};
const _Kartenadressentyp = {
  Kontakte: 'Kontakt',
  Firma: 'Firma',
  Mitarbeiter_Arbeit: 'Mitarbeiter_Arbeit',
  Mitarbeiter_Privat: 'Mitarbeiter_Privat'
};
const _Pages = {
  // Allgemein
  HomePage: 'HomePage',
  WartungPage: 'WartungPage',
  RegistrierungPage: 'RegistrierungPage',
  EinstellungenPage: 'EinstellungenPage',
  StartseitePage: 'StartseitePage',
  IntroPage: 'IntroPage',
  ShortcutsEditorPage: 'ShortcutsEditorPage',
  EmailzentralePage: 'EmailzentralePage',
  PasswortVergessenPage: 'PasswortVergessenPage',
  TestPage: 'TestPage',
  ErrorPage: 'ErrorPage',
  DebugPage: 'DebugPage',
  PDFViewerPage: 'PDFViewerPage',
  EmaillistePage: 'EmaillistePage',
  UrlaubPlanungPage: 'UrlaubPlanungPage',
  UrlaubEinstellungenPage: 'UrlaubEinstellungenPage',
  UrlaubUebersichtPage: 'UrlaubUebersichtPage',
  UrlaubFreigabenPage: 'UrlaubFreigabenPage',
  UrlaubsgesamtuebersichtPage: 'UrlaubsgesamtuebersichtPage',
  // Firma
  FiMitarbeiterlistePage: 'FiMitarbeiterlistePage',
  FiMitarbeiterauswahlPage: 'FiMitarbeiterauswahlPage',
  FiMitarbeiterSettingsPage: 'FiMitarbeiterSettingsPage',
  FiStandortelistePage: 'FiStandortelistePage',
  // Projekt
  PjListePage: 'PjListePage',
  PjGebaeudestrukturBearbeitenPage: 'PjGebaeudestrukturBearbeitenPage',
  PjGebaeudestrukturBauteilBearbeitenPage: 'PjGebaeudestrukturBauteilBearbeitenPage',
  PjGebaeudestrukturGeschossBearbeitenPage: 'PjGebaeudestrukturGeschossBearbeitenPage',
  PjGebaeudestrukturRaumBearbeitenPage: 'PjGebaeudestrukturRaumBearbeitenPage',
  PjGebaeudestrukturRaumMarkierenPage: 'PjGebaeudestrukturRaumMarkierenPage',
  PjFavoritenlistePage: 'PjFavoritenlistePage',
  PJProjektbeteiligtelistePage: 'PJProjektbeteiligtelistePage',
  PjEmailzentralePage: 'PjEmailzentralePage',
  PjProtokollSendeberichtPage: 'PjProtokollSendeberichtPage',
  PjFestlegungkategorieeditorPage: 'PjFestlegungkategorieeditorPage',
  PjNotizenListePage: 'PjNotizenListePage',
  PjAufgabenlistePage: 'PjAufgabenlistePage',
  PjProtokolleListePage: 'PjProtokolleListePage',
  PjFilebrowserPage: 'PjFilebrowserPage',
  PjBaustelleLoplistePage: 'PjBaustelleLoplistePage',
  PjBaustelleTagebuchlistePage: 'PjBaustelleTagebuchlistePage',
  PjFestlegungslistePage: 'PjFestlegungslistePage',
  PjPlanungsmatrixPage: 'PjPlanungsmatrixPage',
  PjSimontabellelistePage: 'PjSimontabellelistePage'
};
const _Treeitemtypvarianten = {
  Strukturknoten: 'Strukturknoten',
  Struktureintrag: 'Struktureintrag',
  Strukturchild: 'Strukturchild',
  Dateneintrag: 'Dateneintrag',
  Datenchild: 'Datenchild',
  Datenknoten: 'Datenknoten'
};
const _Planlistentyp = {
  Gesamtgebaeude: 'Gesamtgebaeude',
  Bauteil: 'Bauteil',
  Geschoss: 'Geschoss'
};
const _Dokumentelementtypen = {
  Betriebsmittel: 'Betriebsmittel',
  Anmerkung: 'Anmerkung',
  Markierung: 'Markierung'
};
const _Planmodusvarianten = {
  RaumMarkieren: 'RaumMarkieren',
  RaumMarkierenZoomen: 'RaumMarkierenZoomen',
  SkalierePlan: 'SkalierePlan',
  ViewPlan: 'ViewPlan',
  PlanMessen: 'PlanMessen',
  RaumbuchUebersicht: 'RaumbuchUebersicht',
  RaumbuchEditorZoom: 'RaumbuchEditorZoom',
  RaumbuchEditorPlaceBetriebsmittel: 'RaumbuchEditorPlaceBetriebsmittel',
  RaumbuchEditorReplaceBetriebsmittel: 'RaumbuchEditorReplaceBetriebsmittel',
  RaumbuchEditorBearbeiteBetriebsmittel: 'RaumbuchEditorBearbeiteBetriebsmittel',
  RaumbuchEditorResizeAnmerkung: 'RaumbuchEditorResizeAnmerkung',
  RaumbuchEditorPlaceAnmerkung: 'RaumbuchEditorPlaceAnmerkung',
  RaumbuchEditorReplaceAnmerkung: 'RaumbuchEditorReplaceAnmerkung',
  RaumbuchEditorSetAnmerkungLocation: 'RaumbuchEditorSetAnmerkungLocation'
};
const _Zeiteintraegetypen = {
  Platzhalter: 'Platzhalter',
  Externtag: 'Externtag',
  Freizeit: 'Freizeit',
  Abwesenheit: 'Abwesenheit',
  Arbeitszeit: 'Arbeitszeit',
  Regiearbeitszeit: 'Regiearbeitszeit',
  Urlaub: 'Urlaub',
  Feiertag: 'Feiertag',
  Krankenstand: 'Krankenstand',
  Ueberstunden: 'Ueberstunden',
  Zeitrahmendaten: 'Zeitrahmendaten',
  Leerzeit: 'Leerzeit',
  Zusatzzeit: 'Zusatzzeit',
  Leer: 'Leeer',
  Titel: 'Titel',
  Ungenutzt: 'Ungenutzt',
  Kalenderwoche: 'Kalenderwoche',
  Summe: 'Summe'
};
const _Tagtypen = {
  Arbeitstag: 'Arbeitstag',
  Urlaubstag: 'Urlaub',
  Feiertag: 'Feiertag',
  Krankenstandtag: 'Krankenstandtag',
  Keintag: 'Keintag'
};
const _Tageseditormodus = {
  Eintrag: 'Eintrag',
  Tag: 'Tag',
  Urlaub: 'Urlaub',
  Krankenstand: 'Krankenstand',
  Feiertag: 'Feiertag'
};
const _Devicenamen = {
  iPhone: 'iPhone',
  iPhone_XsMax_Xr: 'iPhone_XsMax_Xr',
  iPhone_X_Xs: 'iPhone_X_Xs',
  iPhone_6p_6sp_7p_8p: 'iPhone_6p_6sp_7p_8p',
  iPhone_6_6s_7_8: 'iPhone_6_6s_7_8',
  iPhone_5_5s_5c_SE: 'iPhone_5_5s_5c_SE',
  iPad: 'iPad',
  iPad_9_Zoll: 'iPad_9_Zoll',
  iPad_10_Zoll: 'iPad_10_Zoll',
  iPad_12_Zoll: 'iPad_12_Zoll',
  Unbekannt: 'Unbekannt'
};
const _Beteiligteneintragtypen = {
  Person: 'Person',
  Firma: 'Firma'
};
const _Fachfirmentypen = {
  Unbekannt: {
    Typnummer: 0,
    Name: 'Unbekannt',
    Color: '#ff6600'
  },
  Elektroinstallateur: {
    Typnummer: 1,
    Name: 'Elektroinstallateur',
    Color: '#ff6600'
  },
  Heizungsinstallateur: {
    Typnummer: 2,
    Name: 'Heizungsinstallateur',
    Color: '#ff6600'
  },
  Lueftungsinstallateur: {
    Typnummer: 3,
    Name: 'Lüftungsinstallateur',
    Color: '#ff6600'
  },
  Sanitaerinstallateur: {
    Typnummer: 4,
    Name: 'Sanitärinstallateur',
    Color: '#ff6600'
  },
  Rohbaufirma: {
    Typnummer: 5,
    Name: 'Rohbaufirma',
    Color: '#ff6600'
  },
  Tiefbaufirma: {
    Typnummer: 6,
    Name: 'Tiefbaufirma',
    Color: '#ff6600'
  },
  Blitschutzbauer: {
    Typnummer: 7,
    Name: 'Blitschutzbauer',
    Color: '#ff6600'
  },
  Dachdecker: {
    Typnummer: 8,
    Name: 'Dachdecker',
    Color: '#ff6600'
  },
  Zimmerei: {
    Typnummer: 9,
    Name: 'Zimmerei',
    Color: '#ff6600'
  },
  Schreiner: {
    Typnummer: 10,
    Name: 'Schreiner',
    Color: '#ff6600'
  },
  Medientechnik: {
    Typnummer: 11,
    Name: 'Medientechnik',
    Color: '#ff6600'
  },
  Fussbodenlegen: {
    Typnummer: 12,
    Name: 'Fußbodenlegen',
    Color: '#ff6600'
  },
  Estrichleger: {
    Typnummer: 13,
    Name: 'Estrichleger',
    Color: '#ff6600'
  },
  Fliesenleger: {
    Typnummer: 14,
    Name: 'Fliesenleger',
    Color: '#ff6600'
  },
  Foerderanlagenbauer: {
    Typnummer: 15,
    Name: 'Förderanlagenbauer',
    Color: '#ff6600'
  }
};
const _Anlagengruppen = {
  Anlagengruppe_1: {
    Nummer: 1,
    Name: 'Abwasser-, Wasser-, Gasanlagen'
  },
  Anlagengruppe_2: {
    Nummer: 2,
    Name: 'Wärmeversorgungsanlagen'
  },
  Anlagengruppe_3: {
    Nummer: 3,
    Name: 'Luftechnische Anlagen'
  },
  Anlagengruppe_4: {
    Nummer: 4,
    Name: 'Starkstromanlage'
  },
  Anlagengruppe_5: {
    Nummer: 5,
    Name: 'Fernmelde- und informationstechnische Anlagen'
  },
  Anlagengruppe_6: {
    Nummer: 6,
    Name: 'Förderanlagen'
  },
  Anlagengruppe_7: {
    Nummer: 7,
    Name: 'Nutzerspezifische und verfahrenstechnische Anlagen'
  },
  Anlagengruppe_8: {
    Nummer: 8,
    Name: 'Gebäude- und Anlagenautomation'
  }
};
const _Leistungsphasenvarianten = {
  UNBEKANNT: 'unbekannt',
  LPH1: 'LPH1',
  LPH2: 'LPH2',
  LPH3: 'LPH3',
  LPH4: 'LPH4',
  LPH5: 'LPH5',
  LPH6: 'LPH6',
  LPH7: 'LPH7',
  LPH8: 'LPH8'
};
const _Beteiligtentypen = {
  Unbekannt: {
    Typnummer: 0,
    Name: 'Unbekannt',
    Kurzname: 'Unbekannt',
    Color: '#ff6600'
  },
  Architekt: {
    Typnummer: 1,
    Name: 'Architekt',
    Kurzname: 'Archtiekt',
    Color: '#ff6600'
  },
  Elektroplaner: {
    Typnummer: 2,
    Name: 'ELT Planungsbüro',
    Kurzname: 'ELT Planungsbüro',
    Color: '#3771c8'
  },
  HLSplaner: {
    Typnummer: 3,
    Name: 'HLS Planungsbüro',
    Kurzname: 'HLS Planungsbüro',
    Color: '#3771c8'
  },
  Fachplaner: {
    Typnummer: 4,
    Name: 'Fachplaner',
    Kurzname: 'Fachplaner',
    Color: '#3771c8'
  },
  Tragwerksplaner: {
    Typnummer: 5,
    Name: 'Tragwerksplaner',
    Kurzname: 'Tragwerksplaner',
    Color: '#3771c8'
  },
  Aussenanlagenarchitekt: {
    Typnummer: 6,
    Name: 'Außenanlagenarchitekt',
    Kurzname: 'Außenanlagenarchitekt',
    Color: '#3771c8'
  },
  Bauherr: {
    Typnummer: 7,
    Name: 'Bauherr',
    Kurzname: 'Bauherr',
    Color: '#008000'
  },
  Nutzer: {
    Typnummer: 8,
    Name: 'Nutzer',
    Kurzname: 'Nutzer',
    Color: '#008000'
  },
  Pruefsachverstaendiger: {
    Typnummer: 9,
    Name: 'Prüfsachverständiger',
    Kurzname: 'Prüfsachverständiger',
    Color: '#008000'
  },
  Projektsteurer: {
    Typnummer: 10,
    Name: 'Projektsteurer',
    Kurzname: 'Projektsteurer',
    Color: '#008000'
  },
  Ausfuehrungsfirma: {
    Typnummer: 11,
    Name: 'Ausführende Firma',
    Kurzname: 'Ausführende Firma',
    Color: '#008000'
  },
  Objektueberwacher: {
    Typnummer: 12,
    Name: 'Objektüberwacher',
    Kurzname: 'OÜ',
    Color: '#008000'
  },
  ITAbteilung: {
    Typnummer: 13,
    Name: 'IT - Abteilung',
    Kurzname: 'IT',
    Color: '#008000'
  },
  Ausfuehrungsfirma_HLS: {
    Typnummer: 14,
    Name: 'Ausführende Firma HLS',
    Kurzname: 'HLS',
    Color: '#008000'
  },
  Ausfuehrungsfirma_ELT: {
    Typnummer: 15,
    Name: 'Elektroinstallation',
    Kurzname: 'ELZ',
    Color: '#008000'
  },
  Ausfuehrungsfirma_BMA: {
    Typnummer: 16,
    Name: 'BMA Installation',
    Kurzname: 'BMA',
    Color: '#008000'
  },
  Ausfuehrungsfirma_Blitzschutz: {
    Typnummer: 17,
    Name: 'Blitzschutzbauer',
    Kurzname: 'Blitzschutzbaur',
    Color: '#008000'
  },
  Ausfuehrungsfirma_H: {
    Typnummer: 18,
    Name: 'Heizungsfirma',
    Kurzname: 'Heizungsfirma',
    Color: '#008000'
  },
  Ausfuehrungsfirma_L: {
    Typnummer: 19,
    Name: 'Lüftungsinstallation',
    Kurzname: 'Lüftung',
    Color: '#008000'
  },
  Ausfuehrungsfirma_S: {
    Typnummer: 20,
    Name: 'Sanitärinstallation',
    Kurzname: 'Sanitär',
    Color: '#008000'
  },
  Ausfuehrungsfirma_Rohbau: {
    Typnummer: 21,
    Name: 'Rohbaufirma',
    Kurzname: 'Rohbaufirma',
    Color: '#008000'
  },
  Ausfuehrungsfirma_Tiefbau: {
    Typnummer: 22,
    Name: 'Tiefbaufirma',
    Kurzname: 'Tiefbaufirma',
    Color: '#008000'
  },
  Ausfuehrungsfirma_GALA: {
    Typnummer: 23,
    Name: 'GALA Baufirma',
    Kurzname: 'GALA Baufirma',
    Color: '#008000'
  },
  Ausfuehrungsfirma_Aufzug: {
    Typnummer: 24,
    Name: 'Aufzugsfirma',
    Kurzname: 'Aufzugsfirma',
    Color: '#008000'
  }
};
const _Editormodusvarianten = {
  Neu: 'Neu',
  Bearbeiten: 'Bearbeiten',
  Liste: 'Liste',
  Anzeigen: 'Anzaeigen',
  Blocked: 'Blocked',
  Auswahl: 'Auswahl',
  Filter: 'Filter'
};
const _Eventvarianten = {
  Kontaktauswahl: 'Kontaktauswahl',
  Mitarbeiterauswahl: 'Mitarbeiterauswahl',
  Kontakteliste: 'Kontakteliste',
  Kontaktaenderung: 'Kontaktaenderung',
  Zeitdatenfavoriten: 'Zeitdatenfavoriten',
  ClearThumbnailmessage: 'ClearThumbnailmessage',
  BaustellenbereichWahl: 'BaustellenbereichWahl',
  BackButtonClicked: 'BackButtonClicked',
  TeamChanged: 'TeamChanged',
  AuthenticationReady: 'AuthenticationReady',
  BesprechungsteilnehmerExtern: 'BesprechungsteilnehmerExtern',
  BesprechungsteilnehmerIntern: 'BesprechungsteilnehmerIntern',
  ZustaendigkeitExtern: 'ZustaendigkeitExtern',
  ZustaendigkeitIntern: 'ZustaendigkeitIntern',
  Emailempfaenger: 'Emailempfaenger',
  Emailkopieempfaenger: 'Emailkopieempfaenger'
};
const _ZeiterfassungBerichttypen = {
  Jahresbericht: 'Jahresbericht',
  Monatsbericht: 'Monatsbericht',
  Wochenbericht: 'Wochenbericht',
  Tagesbericht: 'Tagesbericht'
};
const _Fehlermeldungtypen = {
  Script: 'Script',
  Sql: 'Sql',
  Transaction: 'Transaction',
  Firebase: 'Firebase'
};
const _Syncstatusvarianten = {
  Init: 'Init',
  Running: 'Running',
  Stopped: 'Stopped',
  Finished: 'Finished',
  Deviceeerror: 'Deviceerror',
  Interneterror: 'Interneterror',
  Datenerrror: 'Datenerrror',
  Synchron: 'Synchron',
  Asynchron: 'Asynchron',
  Uptodate: 'Uptodate',
  Servererror: 'Servererror',
  Databaseerror: 'Databaseerror',
  Unvollstaendig: 'Unvollstaendig'
};
const _Leistungsverzeichniskeys = {
  BoQBody: 'BoQBody',
  // LV-Hauptteil
  Award: 'Award',
  // Vergabe,
  AwardInfo: 'AwardInfo',
  // Informationen zur Vergabe,
  Remark: 'Remark',
  // Hinweistext
  BoQCtgy: 'BoQCtgy',
  BoQInfo: 'BoQInfo',
  LblTx: 'LblTx',
  // Bezeichnung des LV-Bereichs
  Itemlist: 'Itemlist',
  Item: 'Item',
  Description: 'Description',
  // Textorganisation
  CtlgAssign: 'CtlgAssign' // Katalogzuordnung
};
const _Screensizekategorien = {
  XS_0: 'XS',
  SM_1: 'SM',
  MD_2: 'MD',
  LG_3: 'LG',
  XL_4: 'XL'
};
const _Leistungsverzeichnisitemtypen = {
  Titel: 'Titel',
  Position: 'Position',
  Hinweistext: 'Hinweistext'
};
const _Dokumentersteller = {
  Unbekannt: 'Unbekannt',
  Intern: 'Intern',
  Architekt: 'Architekt',
  Hersteller: 'Hersteller',
  Bauherr: 'Bauherr',
  Planungsbuero: 'Planungsbüro'
};
const _Projektstatusvarianten = {
  Bearbeitung: 'Bearbeitung',
  Abgeschlossen: 'Abgeschlossen',
  Ruht: 'Ruht'
};
const _Faelligkeitsstatus = {
  Faellig: 'Faellig',
  Ueberfaellig: 'Uberfaellig',
  Nicht_faellig: 'nicht faellig'
};
const _Zeitfilter = {
  Alle: 'Alle',
  Heute: 'Heute',
  Morgen: 'Morgen',
  Zweitage: '2 Tage',
  Woche: 'Woche',
  Naechstewoche: 'Nächste Woche',
  Zweiwochen: '2 Wochen',
  Vierwochen: '4 Wochen',
  Monat: 'Monat',
  Gestern: 'Gestern',
  Vorgestern: 'Vorgestern',
  ZweitageVorher: 'Letzten 2 Tage',
  WocheVorher: 'Letzte Woche',
  ZweiwochenVorher: 'Letzten 2 Wochen',
  MonatVorher: 'Letzter Monat'
};
const _Dokumententyp = {
  Unbekannt: 'Unbekannt',
  Grundriss: 'Grundriss',
  Verteilerbereiche: 'Verteilerbereiche',
  Elektroinstallation: 'Elektroinstallation',
  Erdung_Blitzschutz: 'Erdung- und Blitzschutzanlage',
  Schema: 'Schema',
  Leerrohrplanung: 'Leerrohrplanung',
  HLS: 'HLS',
  S_und_D: 'Schlitz- und Durchbruchsplanung'
};
const _Faelligkeitsspannen = {
  Diese_Woche: 'Diese Woche',
  Naechste_Woche: 'Nächste Woche',
  Fuenf_Arbeitstage: '5 Arbeitstage',
  Zehn_Arbeitstage: '10 Arbeitstage',
  Fuenfzehn_Arbeitstage: '15 Arbeitstage'
};
const _Anredevariante = {
  'Herr': 'Herr',
  'Frau': 'Frau',
  'Unbekannt': 'Unbekannt'
};
const _Zeitansatzeinheitvarianten = {
  'Minuten': 'Minuten',
  'Stunden': 'Stunden',
  'Tage': 'Tage'
};
const _Projektpunktprioritaetstypen = {
  Niedrig: {
    Statusnummer: 0,
    Name: 'Niedrig',
    Displayname: 'Niedrig',
    Color: '#008000'
  },
  Mittel: {
    Statusnummer: 1,
    Name: 'Mittel',
    Displayname: 'Mittel',
    Color: 'orange'
  },
  Hoch: {
    Statusnummer: 2,
    Name: 'Hoch',
    Displayname: 'Hoch',
    Color: 'red'
  }
};
const _Projektpunktstatustypen = {
  Offen: {
    Statusnummer: 0,
    Name: 'Offen',
    Displayname: 'Offen',
    Color: '#008080',
    LOPColor: 'red'
  },
  Protokollpunkt: {
    Statusnummer: 0,
    Name: 'Protokollpunkt',
    Displayname: 'Info',
    Color: '#34495E',
    LOPColor: '#307ac1'
  },
  Geschlossen: {
    Statusnummer: 1,
    Name: 'Geschlossen',
    Displayname: 'Geschlossen',
    Color: '#008000',
    LOPColor: '#008000'
  },
  Bearbeitung: {
    Statusnummer: 2,
    Name: 'Bearbeitung',
    Displayname: 'Bearbeitung',
    Color: '#616A6B',
    LOPColor: '#616A6B'
  },
  Ruecklauf: {
    Statusnummer: 3,
    Name: 'Ruecklauf',
    Displayname: 'Rücklauf',
    Color: '#0020C2',
    LOPColor: '#0020C2'
  },
  Festlegung: {
    Statusnummer: 4,
    Name: 'Festlegung',
    Displayname: 'Festlegung',
    Color: '#FF9333'
  }
};
const _Startterminfiltervarianten = {
  Nur_diese_Woche: 'Nur diese Woche',
  Nur_diesen_Monat: 'Nur diesen Monat',
  Seit_dem_Zeitpunkt: 'Seit dem Zeitpunkt',
  Bis_zum_Zeitpunkt: 'Bis zum Zeitpunkt',
  Zeitspanne: 'Zeitspanne'
};
const _Faelligkeitsterminfiltervarianten = {
  Nur_diese_Woche: 'Nur diese Woche',
  Nur_diesen_Monat: 'Nur diesen Monat',
  Seit_dem_Zeitpunkt: 'Seit dem Zeitpunkt',
  Bis_zum_Zeitpunkt: 'Bis zum Zeitpunkt',
  Zeitspanne: 'Zeitspanne'
};
const _AufgabenSortiermodusvarianten = {
  TermineAbsteigend: 'TermineAbsteigend',
  TermineAufsteigend: 'TermineAufsteigend'
};
let ConstProvider = class ConstProvider {
  /*
  public readonly Editormodusvarianten      = _Editormodusvarianten;
  public readonly Eventvarianten            = _Eventvarianten;
  public readonly Zeiteintraegetypen        = _Zeiteintraegetypen;
  public readonly Tageseditormodus          = _Tageseditormodus;
  public readonly Startseitensetupvarianten = _Startseitensetupvarianten;
  public readonly Syncstatusvarianten       = _Syncstatusvarianten;
  public readonly Devicenamen               = _Devicenamen;
  public readonly Virtualitemvarianten      = _Virtualitemvarianten;
  public readonly Orientationvarianten      = _Orientationvarianten;
  public readonly Screensizekategorien      = _Screensizekategorien;
  public readonly Tagtypen                  = _Tagtypen;
  public readonly Platformliste             = _Platformliste;
  public Mitarbeiterpossitionen             = _Mitarbeiterpossitionen;
  public readonly Adressbuchtypen           = _Adressbuchtypen;
  public readonly Mitarbeitertypen          = _Mitarbeitertypen;
   
     public readonly DATABASE                  = 'Database';
  public readonly Nachrichtentypen          = _Nachrichtentypen;
  public readonly Nachrichtendirections     = _Nachrichtendirections;
  public readonly Playermodus               = _Playermodus;
     public readonly MitarbeiterdatenKeys      = _MitarbeiterdatenKeys;
  public readonly Loginstatusvarianten      = _Loginstatusvarianten;
  public readonly ZeiterfassungBerichttypen     = _ZeiterfassungBerichttypen;
  public readonly Kartenadressentyp             = _Kartenadressentyp;
  public readonly Treeitemtypvarianten          = _Treeitemtypvarianten;
  public readonly Planmodusvarianten        = _Planmodusvarianten;
  public readonly Leistungsverzeichniskeys      = _Leistungsverzeichniskeys;
  public readonly Leistungsverzeichnisitemtypen = _Leistungsverzeichnisitemtypen;
  public readonly Dokumentersteller             = _Dokumentersteller;
  public readonly Dokumententyp                 = _Dokumententyp;
  public readonly Dokumentelementtypen          = _Dokumentelementtypen;
  public readonly Planlistentyp                 = _Planlistentyp;
     public readonly Projektpunktdetailtyp         = _Projektpunktdetailtyp;
  public readonly Faelligkeitsspannen           = _Faelligkeitsspannen;
   
   */
  NONE = 'none';
  Pages = _Pages;
  Fehlermeldungtypen = _Fehlermeldungtypen;
  Dialogmessages = _Dialogmessages;
  Projektpunktstatustypen = _Projektpunktstatustypen;
  Zeitfilter = _Zeitfilter;
  Projektstatusvarianten = _Projektstatusvarianten;
  Faelligkeitsstatus = _Faelligkeitsstatus;
  Beteiligtentypen = _Beteiligtentypen;
  Fachfirmentypen = _Fachfirmentypen;
  Beteiligteneintragtypen = _Beteiligteneintragtypen;
  Anredevariante = _Anredevariante;
  Zeitansatzeinheitvarianten = _Zeitansatzeinheitvarianten;
  Faelligkeitsterminfiltervarianten = _Faelligkeitsterminfiltervarianten;
  AufgabenSortiermodusvarianten = _AufgabenSortiermodusvarianten;
  Projektpunktprioritaetstypen = _Projektpunktprioritaetstypen;
  Leistungsphasenvarianten = _Leistungsphasenvarianten;
  Anlagengruppen = _Anlagengruppen;
  constructor() {}
  static ctorParameters = () => [];
};
exports.ConstProvider = ConstProvider;
exports.ConstProvider = ConstProvider = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], ConstProvider);

/***/ }),

/***/ 96140:
/*!*****************************************************************************************!*\
  !*** ./src/app/services/database-appeinstellungen/database-appeinstellungen.service.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DatabaseAppeinstellungenService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 7992);
const http_1 = __webpack_require__(/*! @angular/common/http */ 33712);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
let DatabaseAppeinstellungenService = class DatabaseAppeinstellungenService {
  Debug;
  Pool;
  Const;
  http;
  // public Appeinstellungen: Appeinstellungenstruktur;
  ServerUrl;
  constructor(Debug, Pool, Const, http) {
    this.Debug = Debug;
    this.Pool = Pool;
    this.Const = Const;
    this.http = http;
    try {
      // this.Appeinstellungen    = null;
      this.ServerUrl = this.Pool.CockpitdockerURL + '/appeinstellungen';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Appeinstellungen', 'constructor', this.Debug.Typen.Service);
    }
  }
  ReadAppeinstellungen() {
    try {
      let Liste = [];
      let Appeinstellungen;
      this.Debug.ShowMessage('ReadAppeinstellungen', 'Database Appeinstellungen', 'ReadAppeinstellungen', this.Debug.Typen.Service);
      let headers = new http_1.HttpHeaders({
        'content-type': 'application/json'
      });
      return new Promise((resolve, reject) => {
        let AppeinstellungenObservable = this.http.get(this.ServerUrl, {
          headers: headers
        });
        AppeinstellungenObservable.subscribe({
          next: data => {
            Liste = data;
          },
          complete: () => {
            if (Liste.length > 0) {
              Appeinstellungen = Liste[0];
            } else {
              Appeinstellungen = this.GetEmptyAppeinstellungen();
            }
            if (lodash.isUndefined(Appeinstellungen.Wartungsmodus)) Appeinstellungen.Wartungsmodus = false;
            this.Pool.Appeinstellungen = Appeinstellungen;
            resolve(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadAppeinstellungen', this.Debug.Typen.Service);
    }
  }
  GetEmptyAppeinstellungen() {
    try {
      return {
        _id: null,
        ShowHomeScreenInfos: true,
        DebugNoExternalEmail: true,
        Wartungsmodus: false,
        AdminStartseite: this.Const.Pages.HomePage
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Appeinstellungen', 'GetEmptyAppeinstellungen', this.Debug.Typen.Service);
    }
  }
  SaveAppeinstellungen() {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        if (_this.Pool.Appeinstellungen._id === null) {
          yield _this.AddAppeinstellungen();
        } else {
          yield _this.UpdateAppeinstellungen();
        }
      } catch (error) {
        _this.Debug.ShowErrorMessage(error.message, 'Database Appeinstellungen', 'SaveAppeinstellungen', _this.Debug.Typen.Service);
      }
    })();
  }
  AddAppeinstellungen() {
    try {
      let Observer;
      let Appeinstellungen;
      return new Promise((resove, reject) => {
        // POST für neuen Eintrag
        Observer = this.http.post(this.ServerUrl, this.Pool.Appeinstellungen);
        Observer.subscribe({
          next: result => {
            Appeinstellungen = result.data;
          },
          complete: () => {
            this.Pool.Appeinstellungen = Appeinstellungen;
            resove(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Appeinstellungen', 'AddAppeinstellungen', this.Debug.Typen.Service);
    }
  }
  UpdateAppeinstellungen() {
    try {
      let Observer;
      let Appeinstellungen;
      return new Promise((resove, reject) => {
        // PUT für update
        Observer = this.http.put(this.ServerUrl, this.Pool.Appeinstellungen);
        Observer.subscribe({
          next: ne => {
            // Appeinstellungen = ne;
          },
          complete: () => {
            // this.Pool.Appeinstellungen = Appeinstellungen;
            resove(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Appeinstellungen', 'UpdateAppeinstellungen', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: const_1.ConstProvider
  }, {
    type: http_1.HttpClient
  }];
};
exports.DatabaseAppeinstellungenService = DatabaseAppeinstellungenService;
exports.DatabaseAppeinstellungenService = DatabaseAppeinstellungenService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], DatabaseAppeinstellungenService);

/***/ }),

/***/ 97092:
/*!*************************************************************************************!*\
  !*** ./src/app/services/database-authentication/database-authentication.service.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DatabaseAuthenticationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const msal_angular_1 = __webpack_require__(/*! @azure/msal-angular */ 38460);
const msal_browser_1 = __webpack_require__(/*! @azure/msal-browser */ 10892);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
const router_1 = __webpack_require__(/*! @angular/router */ 24040);
const rxjs_1 = __webpack_require__(/*! rxjs */ 90856);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
let DatabaseAuthenticationService = class DatabaseAuthenticationService {
  msalGuardConfig;
  Debug;
  authService;
  Const;
  router;
  MSALService;
  LoginSuccessEvent = new core_1.EventEmitter();
  ActiveUser;
  SecurityEnabled;
  DevelopmentUser;
  ShowLogin;
  constructor(msalGuardConfig, Debug, authService, Const, router, MSALService) {
    this.msalGuardConfig = msalGuardConfig;
    this.Debug = Debug;
    this.authService = authService;
    this.Const = Const;
    this.router = router;
    this.MSALService = MSALService;
    try {
      this.SecurityEnabled = true;
      this.ActiveUser = null;
      this.ShowLogin = false;
      this.DevelopmentUser = {
        environment: "",
        homeAccountId: "",
        localAccountId: "",
        tenantId: "",
        username: "peter.hornburger@b-a-e.eu",
        name: "Peter Hornburger"
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Authentication', 'constructor', this.Debug.Typen.Service);
    }
  }
  UnsetActiveUser() {
    try {
      this.Debug.ShowMessage('Unset Active User', 'Database Authentication', 'UnsetActiveUser', this.Debug.Typen.Service);
      this.ActiveUser = null;
      this.ShowLogin = true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Authentication', 'UnsetActiveUser', this.Debug.Typen.Service);
    }
  }
  SetActiveUser() {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        let Account;
        let Accounts;
        _this.Debug.ShowMessage('Set Active User started', 'Database Authentication', 'SetActiveUser', _this.Debug.Typen.Service);
        return new Promise(resolve => {
          if (_this.SecurityEnabled) {
            Account = _this.MSALService.instance.getActiveAccount();
            Accounts = _this.MSALService.instance.getAllAccounts();
            if (!lodash.isUndefined(Accounts) && Accounts !== null && Accounts.length > 0) {
              for (Account of Accounts) {
                console.log(Account.username);
              }
            }
            console.log(Account !== null ? Account.username : 'Account ist null');
            if (Account === null) {
              _this.Debug.ShowMessage('Active Account ist null', 'Database Authentication', 'SetActiveUser', _this.Debug.Typen.Service);
              if (!lodash.isUndefined(Accounts) && Accounts !== null && Accounts.length > 0) {
                _this.Debug.ShowMessage('Accountliste vorhanden', 'Database Authentication', 'SetActiveUser', _this.Debug.Typen.Service);
                Account = Accounts[0];
              } else {
                _this.Debug.ShowMessage('keine Accountlist vorhanden', 'Database Authentication', 'SetActiveUser', _this.Debug.Typen.Service);
              }
            }
            if (Account !== null) {
              _this.ActiveUser = Account;
              resolve(true);
            } else {
              _this.UnsetActiveUser();
              resolve(true);
            }
          } else {
            _this.ActiveUser = _this.DevelopmentUser;
            resolve(true);
          }
        });
      } catch (error) {
        _this.Debug.ShowErrorMessage(error, 'Database Authentication', 'SetActiveUser', _this.Debug.Typen.Service);
      }
    })();
  }
  SetShowLoginStatus() {
    try {
      let message = 'nothing';
      let acountliste = this.MSALService.instance.getAllAccounts();
      this.Debug.ShowMessage(message, 'SetShowLoginStatus gestartet', 'SetShowLogin', this.Debug.Typen.Service);
      if (acountliste.length === 0) {
        this.ShowLogin = true;
        console.log('Accountliste ist leer. LOGIN anzeigen.');
      } else {
        this.ShowLogin = false;
      }
      if (this.SecurityEnabled === false) this.ShowLogin = false;
      message = this.ShowLogin === true ? 'Anmeldung anzeigen' : 'Hauptmenu anzeigen';
      this.Debug.ShowMessage(message, 'Database Authentication', 'SetShowLogin', this.Debug.Typen.Service);
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Authentication', 'SetShowLoginStatus', this.Debug.Typen.Service);
    }
  }
  RequestToken(scope) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        const accessTokenRequest = {
          scopes: [scope],
          account: _this2.ActiveUser
        };
        // You must call and await the initialize function before attempting to call any other MSAL API.  For more visit: aka.ms/msaljs/browser-errors
        return new Promise((resolve, reject) => {
          _this2.authService.acquireTokenSilent(accessTokenRequest).pipe((0, rxjs_1.catchError)(err => {
            if (err) {
              debugger;
              switch (err.errorCode) {
                case 'login_required':
                  _this2.Login();
                  break;
                case 'monitor_window_timeout':
                  _this2.Login();
                  break;
              }
            }
            return (0, rxjs_1.of)(err != null);
          })).subscribe(response => {
            if (response.accessToken) {
              resolve(response.accessToken);
            } else resolve(null);
          });
        });
      } catch (error) {
        _this2.Debug.ShowErrorMessage(error, 'Database Authentication', 'RequestToken', _this2.Debug.Typen.Service);
      }
    })();
  }
  Login() {
    try {
      if (this.SecurityEnabled) {
        if (this.msalGuardConfig.interactionType === msal_browser_1.InteractionType.Popup) {
          if (this.msalGuardConfig.authRequest) {
            this.authService.loginPopup({
              ...this.msalGuardConfig.authRequest
            }).subscribe(response => {
              this.authService.instance.setActiveAccount(response.account);
            });
          } else {
            this.authService.loginPopup().subscribe(response => {
              // this.SaveAccessToken(response.accessToken);
              this.authService.instance.setActiveAccount(response.account);
            });
          }
        } else {
          if (this.msalGuardConfig.authRequest) {
            this.authService.loginRedirect({
              ...this.msalGuardConfig.authRequest
            });
          } else {
            this.authService.loginRedirect();
          }
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Authentication', 'Login', this.Debug.Typen.Service);
    }
  }
  Logout() {
    try {
      if (this.msalGuardConfig.interactionType === msal_browser_1.InteractionType.Popup) {
        this.authService.logoutPopup({
          postLogoutRedirectUri: "/",
          mainWindowRedirectUri: "/"
        });
      } else {
        this.authService.logoutRedirect({
          postLogoutRedirectUri: "/"
        });
      }
      this.ActiveUser = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Authentication', 'Logout', this.Debug.Typen.Service);
    }
  }
  canLoad(route) {
    try {
      if (this.CheckSecurity() === true) {
        this.Debug.ShowMessage('Database Authentication -> can load: ' + route.path, 'Security', 'canLoad', this.Debug.Typen.Service);
        return true;
      } else {
        this.Debug.ShowMessage('Database Authentication -> can not load: ' + route.path, 'Security', 'canLoad', this.Debug.Typen.Service);
        this.router.navigate([this.Const.Pages.HomePage]);
        return false;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Authentication', 'canLoad', this.Debug.Typen.Service);
    }
  }
  CheckSecurity() {
    try {
      return true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Authentication', 'CheckSecurity', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: undefined,
    decorators: [{
      type: core_1.Inject,
      args: [msal_angular_1.MSAL_GUARD_CONFIG]
    }]
  }, {
    type: debug_1.DebugProvider
  }, {
    type: msal_angular_1.MsalService
  }, {
    type: const_1.ConstProvider
  }, {
    type: router_1.Router
  }, {
    type: msal_angular_1.MsalService
  }];
};
exports.DatabaseAuthenticationService = DatabaseAuthenticationService;
exports.DatabaseAuthenticationService = DatabaseAuthenticationService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], DatabaseAuthenticationService);

/***/ }),

/***/ 51708:
/*!***************************************************************************!*\
  !*** ./src/app/services/database-changelog/database-changelog.service.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DatabaseChangelogService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 7992);
const http_1 = __webpack_require__(/*! @angular/common/http */ 33712);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
let DatabaseChangelogService = class DatabaseChangelogService {
  Debug;
  Pool;
  Const;
  http;
  ServerUrl;
  CurrentChangelog;
  constructor(Debug, Pool, Const, http) {
    this.Debug = Debug;
    this.Pool = Pool;
    this.Const = Const;
    this.http = http;
    try {
      this.ServerUrl = this.Pool.CockpitdockerURL + '/changelog';
      this.CurrentChangelog = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Chnagelog', 'constructor', this.Debug.Typen.Service);
    }
  }
  GetChangelog(id) {
    try {
      let Changelog;
      Changelog = lodash.find(this.Pool.Changlogliste, {
        _id: id
      });
      if (!lodash.isUndefined(Changelog)) {
        return Changelog.Beschreibung;
      } else return 'unbekannt';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'GetChangelog', this.Debug.Typen.Component);
    }
  }
  GetEmptyChangelog() {
    try {
      let Heute = (0, moment_1.default)();
      return {
        _id: null,
        Beschreibung: '',
        Version: '',
        Zeitstempel: Heute.valueOf(),
        Deleted: false
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Chnagelog', 'GetEmptyChangelog', this.Debug.Typen.Service);
    }
  }
  AddChangelog() {
    try {
      let Observer;
      let Changelog;
      debugger;
      return new Promise((resove, reject) => {
        // POST für neuen Eintrag
        Observer = this.http.post(this.ServerUrl, this.CurrentChangelog);
        Observer.subscribe({
          next: result => {
            debugger;
            Changelog = result.Changelog;
          },
          complete: () => {
            this.UpdateChangelogliste(Changelog);
            this.Pool.ChangeloglisteChanged.emit();
            resove(true);
          },
          error: error => {
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Chnagelog', 'AddChangelog', this.Debug.Typen.Service);
    }
  }
  UpdateChangelogliste(changelog) {
    try {
      let Index;
      Index = lodash.findIndex(this.Pool.Changlogliste, {
        _id: this.CurrentChangelog._id
      });
      if (Index !== -1) {
        this.Pool.Changlogliste[Index] = changelog; // aktualisieren
        this.Debug.ShowMessage('Changelogliste updated: ' + changelog.Version, 'Database Changelog', 'UpdateChangelogliste', this.Debug.Typen.Service);
      } else {
        this.Debug.ShowMessage('Chnagelog nicht gefunden -> neues Changlog hinzufügen', 'Database Chnagelog', 'UpdateChangelogliste', this.Debug.Typen.Service);
        this.Pool.Changlogliste.unshift(changelog); // neuen
      }
      // Gelöscht markiert Einträge entfernen
      this.Pool.Changlogliste = lodash.filter(this.Pool.Changlogliste, currentchangelog => {
        return currentchangelog.Deleted === false;
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Chnagelog', 'UpdateChangelogliste', this.Debug.Typen.Service);
    }
  }
  UpdateChangelog() {
    try {
      let Observer;
      let Params = new http_1.HttpParams();
      Params.set('id', this.CurrentChangelog._id);
      return new Promise((resove, reject) => {
        // PUT für update
        Observer = this.http.put(this.ServerUrl, this.CurrentChangelog);
        Observer.subscribe({
          next: ne => {
            debugger;
          },
          complete: () => {
            debugger;
            this.UpdateChangelogliste(this.CurrentChangelog);
            this.Pool.ChangeloglisteChanged.emit();
            resove(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Chnagelog', 'UpdateChangelog', this.Debug.Typen.Service);
    }
  }
  DeleteChangelog() {
    try {
      let Observer;
      this.CurrentChangelog.Deleted = true;
      return new Promise((resove, reject) => {
        // PUT für update
        Observer = this.http.put(this.ServerUrl, this.CurrentChangelog);
        Observer.subscribe({
          next: ne => {
            debugger;
          },
          complete: () => {
            debugger;
            this.UpdateChangelogliste(this.CurrentChangelog);
            this.Pool.ChangeloglisteChanged.emit();
            resove(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Chnagelog', 'DeleteChangelog', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: const_1.ConstProvider
  }, {
    type: http_1.HttpClient
  }];
};
exports.DatabaseChangelogService = DatabaseChangelogService;
exports.DatabaseChangelogService = DatabaseChangelogService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], DatabaseChangelogService);

/***/ }),

/***/ 22848:
/*!*******************************************************************************!*\
  !*** ./src/app/services/database-mitarbeiter/database-mitarbeiter.service.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DatabaseMitarbeiterService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 7992);
const http_1 = __webpack_require__(/*! @angular/common/http */ 33712);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
let DatabaseMitarbeiterService = class DatabaseMitarbeiterService {
  Debug;
  http;
  Const;
  Pool;
  CurrentMitarbeiter;
  CurrentPosition;
  ServerMitarbeiterUrl;
  ServerMitarbeiterpositionUrl;
  constructor(Debug, http, Const, Pool) {
    this.Debug = Debug;
    this.http = http;
    this.Const = Const;
    this.Pool = Pool;
    try {
      this.ServerMitarbeiterUrl = this.Pool.CockpitdockerURL + '/mitarbeiter';
      this.ServerMitarbeiterpositionUrl = this.Pool.CockpitdockerURL + '/mitarbeiterpositionen';
      this.CurrentMitarbeiter = null;
      this.CurrentPosition = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'constructor', this.Debug.Typen.Service);
    }
  }
  ConvertGraphuserToMitarbeiter(graphuser) {
    try {
      let Mitarbeiter;
      let Jobtitle;
      let Mobil;
      Mitarbeiter = this.GetEmptyMitarbeiter();
      if (graphuser.surname === null) graphuser.surname = '';
      if (graphuser.givenName === null) graphuser.givenName = '';
      if (graphuser.jobTitle === null) graphuser.jobTitle = '';
      if (graphuser.officeLocation === null) graphuser.officeLocation = '';
      if (graphuser.mobilePhone === null) graphuser.mobilePhone = '';
      Jobtitle = lodash.isUndefined(graphuser.jobTitle) ? "" : graphuser.jobTitle;
      Mobil = lodash.isUndefined(graphuser.mobilePhone) ? "" : graphuser.mobilePhone;
      Mitarbeiter.UserID = graphuser.id;
      Mitarbeiter.Email = graphuser.mail;
      Mitarbeiter.Vorname = lodash.isUndefined(graphuser.givenName) ? "" : graphuser.givenName;
      Mitarbeiter.Name = lodash.isUndefined(graphuser.surname) ? "" : graphuser.surname;
      Mitarbeiter.Mobil = Mobil === null ? "" : Mobil;
      Mitarbeiter.Jobtitel = Jobtitle === null ? "" : Jobtitle;
      if (lodash.isUndefined(graphuser.businessPhones) === false) {
        if (graphuser.businessPhones.length > 0) Mitarbeiter.Telefon = graphuser.businessPhones[0];
      }
      if (lodash.isUndefined(graphuser.officeLocation) === false && graphuser.officeLocation !== null) {
        Mitarbeiter.Location = graphuser.officeLocation !== null ? graphuser.officeLocation : "";
        for (let Standort of this.Pool.Standorteliste) {
          if (graphuser.officeLocation.indexOf(Standort.Ort) !== -1) {
            Mitarbeiter.StandortID = Standort._id;
          }
        }
      }
      if (Mitarbeiter.StandortID === '') {
        let Standort = lodash.find(this.Pool.Standorteliste, {
          Ort: 'Bamberg'
        });
        if (!lodash.isUndefined(Standort)) {
          Mitarbeiter.StandortID = Standort._id;
        }
      }
      let A = graphuser.surname !== null ? graphuser.surname.substring(0, 2).toUpperCase() : '';
      let B = graphuser.givenName !== null ? graphuser.givenName.substring(0, 1).toUpperCase() : '';
      Mitarbeiter.Kuerzel = A + '' + B;
      return Mitarbeiter;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Graph', 'ConvertGraphuserToMitarbeiter', this.Debug.Typen.Service);
    }
  }
  GetMeinewocheStunden(tag) {
    try {
      let Stunden = 0;
      let Minuten = 0;
      for (let Eintrag of this.Pool.Mitarbeiterdaten.Meinewocheliste) {
        switch (tag) {
          case 'Montag':
            if (Eintrag.Montagseinsatz) {
              Stunden += Eintrag.Montagsstunden;
              Minuten += Eintrag.Montagsminuten;
            }
            break;
          case 'Dienstag':
            if (Eintrag.Dienstagseinsatz) {
              Stunden += Eintrag.Dienstagsstunden;
              Minuten += Eintrag.Dienstagsminuten;
            }
            break;
          case 'Mittwoch':
            if (Eintrag.Mittwochseinsatz) {
              Stunden += Eintrag.Mittwochsstunden;
              Minuten += Eintrag.Mittwochsminuten;
            }
            break;
          case 'Donnerstag':
            if (Eintrag.Donnerstagseinsatz) {
              Stunden += Eintrag.Donnerstagsstunden;
              Minuten += Eintrag.Donnerstagsminuten;
            }
            break;
          case 'Freitag':
            if (Eintrag.Freitagseinsatz) {
              Stunden += Eintrag.Freitagsstunden;
              Minuten += Eintrag.Freitagsminuten;
            }
            break;
        }
      }
      Minuten = Minuten + 60 * Stunden;
      if (Minuten === 0) return '';else return '[' + (Minuten / 60).toFixed(2) + ' Std]';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'GetMeinewocheStunden', this.Debug.Typen.Service);
    }
  }
  GetEmptyMitarbeiterposition() {
    try {
      return {
        _id: null,
        Bezeichnung: ''
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'GetEmptyMitarbeiterposition', this.Debug.Typen.Service);
    }
  }
  GetEmptyMitarbeiter() {
    try {
      let Zeit = (0, moment_1.default)();
      return {
        _id: null,
        UserID: null,
        PositionID: null,
        Anrede: this.Const.NONE,
        Urlaub: 30,
        Resturlaub: 0,
        Location: "",
        Jobtitel: "",
        Vorname: "",
        Name: "",
        Kuerzel: "",
        Fachbereich: "Unbekannt",
        StandortID: "",
        Email: "",
        Mobil: "",
        SettingsID: null,
        Telefon: "",
        Zeitstring: Zeit.format('HH:mm DD.MM.YYYY'),
        Zeitstempel: Zeit.valueOf(),
        Deleted: false,
        Planeradministrator: false,
        Homeofficefreigaben: false,
        Homeofficefreigabestandorte: [],
        Urlaubsfreigabeorte: [],
        Urlaubsfreigaben: false,
        Favoritenliste: [],
        Meintagliste: [],
        Meinewocheliste: [],
        Archiviert: false,
        Urlaubsliste: []
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'GetEmptyMitarbeiter', this.Debug.Typen.Service);
    }
  }
  GetMitarbeitername(id) {
    try {
      let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
        _id: id
      });
      if (lodash.isUndefined(Mitarbeiter)) return 'Unbekannt';else {
        return Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'GetMitarbeitername', this.Debug.Typen.Service);
    }
  }
  InitService() {
    try {
      for (let Mitarbeiter of this.Pool.Mitarbeiterliste) {
        if (Mitarbeiter.StandortID === this.Pool.Mitarbeiterdaten.StandortID) Mitarbeiter.ShowInGesamtuebersicht = true;else Mitarbeiter.ShowInGesamtuebersicht = false;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'InitService', this.Debug.Typen.Service);
    }
  }
  FinishService() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'FinishService', this.Debug.Typen.Service);
    }
  }
  UpdateMitarbeiter(mitarbeiter) {
    try {
      let Observer;
      let Merker;
      // let Params = new HttpParams();
      delete mitarbeiter.__v;
      // Params.set('id', mitarbeiter._id);
      for (let Urlaubsliste of mitarbeiter.Urlaubsliste) {
        Urlaubsliste.Urlaubzeitspannen.sort((a, b) => {
          if (a.Startstempel < b.Startstempel) return -1;
          if (a.Startstempel > b.Startstempel) return 1;
          return 0;
        });
      }
      return new Promise((resove, reject) => {
        // PUT für update
        Observer = this.http.put(this.ServerMitarbeiterUrl, mitarbeiter);
        Observer.subscribe({
          next: ne => {
            Merker = ne.Mitarbeiter;
          },
          complete: () => {
            if (Merker !== null) {
              this.CurrentMitarbeiter = Merker;
              // this.Pool.Mitarbeiterdaten = Merker;
              // this.Pool.MitarbeiterdatenChanged.emit();
              this.UpdateMitarbeiterliste(this.CurrentMitarbeiter);
              this.Pool.MitarbeiterlisteChanged.emit();
            } else {
              reject(new Error('Mitarbeiter auf Server nicht gefunden.'));
            }
            resove(true);
          },
          error: error => {
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'UpdateMitarbeiter', this.Debug.Typen.Page);
    }
  }
  GetPositionsbezeichnung(id) {
    try {
      let Mitarbeiterposition;
      if (id !== null) {
        Mitarbeiterposition = lodash.find(this.Pool.Mitarbeiterpositionenliste, {
          _id: id
        });
        if (!lodash.isUndefined(Mitarbeiterposition)) {
          return Mitarbeiterposition.Bezeichnung;
        }
      } else return 'Unbekannt';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'GetPosition', this.Debug.Typen.Service);
    }
  }
  UpdateMitarbeiterposition(mitarbeiterposition) {
    try {
      let Observer;
      let Params = new http_1.HttpParams();
      let Merker;
      delete mitarbeiterposition.__v;
      Params.set('id', mitarbeiterposition._id);
      return new Promise((resove, reject) => {
        // PUT für update
        Observer = this.http.put(this.ServerMitarbeiterpositionUrl, mitarbeiterposition);
        Observer.subscribe({
          next: ne => {
            Merker = ne.Mitarbeiterposition;
          },
          complete: () => {
            if (Merker !== null) {
              this.CurrentPosition = Merker;
              this.UpdateMitarbeiterpositionliste(this.CurrentPosition);
              this.Pool.MitarbeiterpositionenlisteChanged.emit();
            } else {
              reject(new Error('Mitarbeiterposition auf Server nicht gefunden.'));
            }
            resove(true);
          },
          error: error => {
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'UpdateMitarbeiterposition', this.Debug.Typen.Page);
    }
  }
  UpdateMitarbeiterUrlaub(mitarbeiter) {
    try {
      let Observer;
      let Params = new http_1.HttpParams();
      let Merker;
      delete mitarbeiter.__v;
      Params.set('id', mitarbeiter._id);
      for (let Urlaubsliste of mitarbeiter.Urlaubsliste) {
        Urlaubsliste.Urlaubzeitspannen.sort((a, b) => {
          if (a.Startstempel < b.Startstempel) return -1;
          if (a.Startstempel > b.Startstempel) return 1;
          return 0;
        });
      }
      return new Promise((resove, reject) => {
        // PUT für update
        Observer = this.http.put(this.ServerMitarbeiterUrl, mitarbeiter);
        Observer.subscribe({
          next: ne => {
            Merker = ne.Mitarbeiter;
          },
          complete: () => {
            if (Merker !== null) {
              this.UpdateMitarbeiterliste(Merker);
              this.Pool.MitarbeiterlisteChanged.emit();
              resove(true);
            } else {
              reject(new Error('Mitarbeiter auf Server nicht gefunden.'));
            }
          },
          error: error => {
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'UpdateMitarbeiterUrlaub', this.Debug.Typen.Page);
    }
  }
  UpdateMitarbeiterliste(mitarbeiter) {
    try {
      let Index;
      Index = lodash.findIndex(this.Pool.Mitarbeiterliste, {
        _id: mitarbeiter._id
      });
      if (Index !== -1) {
        this.Pool.Mitarbeiterliste[Index] = mitarbeiter; // aktualisieren
        this.Debug.ShowMessage('Mitarbeiterliste updated: ' + mitarbeiter.Name, 'Database Mitarbeiter', 'UpdateMitarbeiter', this.Debug.Typen.Service);
      } else {
        this.Debug.ShowMessage('Mitarbeiter nicht gefunden -> neuen Mitarbeiter hinzufügen', 'Database Mitarbeiter', 'UpdateMitarbeiter', this.Debug.Typen.Service);
        this.Pool.Mitarbeiterliste.push(mitarbeiter); // neuen
      }
      // Gelöscht markiert Einträge entfernen
      this.Pool.Mitarbeiterliste = lodash.filter(this.Pool.Mitarbeiterliste, currentmitarbeiter => {
        return currentmitarbeiter.Deleted === false;
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'UpdateMitarbeiterliste', this.Debug.Typen.Service);
    }
  }
  UpdateMitarbeiterpositionliste(mitarbeiterposition) {
    try {
      let Index;
      Index = lodash.findIndex(this.Pool.Mitarbeiterpositionenliste, {
        _id: mitarbeiterposition._id
      });
      if (Index !== -1) {
        this.Pool.Mitarbeiterpositionenliste[Index] = mitarbeiterposition; // aktualisieren
        this.Debug.ShowMessage('Mitarbeiterliste updated: ' + mitarbeiterposition.Bezeichnung, 'Database Mitarbeiter', 'UpdateMitarbeiterpositionliste', this.Debug.Typen.Service);
      } else {
        this.Debug.ShowMessage('Mitarbeiterposition nicht gefunden -> neuen Mitarbeiter hinzufügen', 'Database Mitarbeiter', 'UpdateMitarbeiterpositionliste', this.Debug.Typen.Service);
        this.Pool.Mitarbeiterpositionenliste.push(mitarbeiterposition); // neuen
      }
      this.Pool.Mitarbeiterpositionenliste.sort((a, b) => {
        if (a.Bezeichnung < b.Bezeichnung) return -1;
        if (a.Bezeichnung > b.Bezeichnung) return 1;
        return 0;
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'UpdateMitarbeiterpositionliste', this.Debug.Typen.Service);
    }
  }
  AddMitarbeiter(mitarbeiter) {
    try {
      let Observer;
      let Mitarbeiter;
      return new Promise((resolve, reject) => {
        // POST für neuen Eintrag
        console.log('POST new Mitarbeiter:');
        console.log(mitarbeiter);
        Observer = this.http.post(this.ServerMitarbeiterUrl, mitarbeiter);
        Observer.subscribe({
          next: result => {
            Mitarbeiter = result.Mitarbeiter;
          },
          complete: () => {
            this.UpdateMitarbeiterliste(Mitarbeiter);
            this.Pool.MitarbeiterlisteChanged.emit();
            resolve(Mitarbeiter);
          },
          error: error => {
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'AddMitarbeiter', this.Debug.Typen.Service);
    }
  }
  AddMitarbeiterposition(mitarbeiterposition) {
    try {
      let Observer;
      let Mitarbeiterposition;
      return new Promise((resolve, reject) => {
        // POST für neuen Eintrag
        console.log('POST new Mitarbeiterposition:');
        console.log(mitarbeiterposition);
        Observer = this.http.post(this.ServerMitarbeiterpositionUrl, mitarbeiterposition);
        Observer.subscribe({
          next: result => {
            Mitarbeiterposition = result.Mitarbeiterposition;
          },
          complete: () => {
            this.UpdateMitarbeiterpositionliste(Mitarbeiterposition);
            this.Pool.MitarbeiterpositionenlisteChanged.emit();
            resolve(Mitarbeiterposition);
          },
          error: error => {
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'AddMitarbeiterposition', this.Debug.Typen.Service);
    }
  }
  CheckMitarbeiterExists(email) {
    try {
      let Index = lodash.findIndex(this.Pool.Mitarbeiterliste, {
        Email: email
      });
      return Index !== -1;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeiter', 'CheckMitarbeiterExists', this.Debug.Typen.Service);
    }
  }
  GetMitarbeiterByEmail(email) {
    try {
      let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
        Email: email
      });
      return lodash.isUndefined(Mitarbeiter) ? null : Mitarbeiter;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'GetMitarbeiterByEmail', this.Debug.Typen.Service);
    }
  }
  GetMitarbeiterByID(id) {
    try {
      let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
        _id: id
      });
      return lodash.isUndefined(Mitarbeiter) ? null : Mitarbeiter;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'GetMitarbeiterByEmail', this.Debug.Typen.Service);
    }
  }
  GetMitarbeiterByGraph(email) {
    try {
      let Observer;
      let Params = new http_1.HttpParams({
        fromObject: {
          email: email
        }
      });
      let Daten;
      return new Promise((resove, reject) => {
        Observer = this.http.get(this.ServerMitarbeiterUrl, {
          params: Params
        });
        Observer.subscribe({
          next: result => {
            Daten = result;
          },
          complete: () => {
            resove(Daten);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'SaveMitarbeiter', this.Debug.Typen.Service);
    }
  }
  DeleteMitarbeiter(mitarbeiter) {
    try {
      mitarbeiter.Deleted = true;
      return this.UpdateMitarbeiter(mitarbeiter);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'DeleteMitarbeiter', this.Debug.Typen.Service);
    }
  }
  GetHomeofficefreigeberliste(_id) {
    try {
      let Freigeberliste = lodash.filter(this.Pool.Mitarbeiterliste, mitarbeiter => {
        return mitarbeiter.Homeofficefreigaben === true;
      });
      Freigeberliste = lodash.filter(Freigeberliste, mitarbeiter => {
        return mitarbeiter.Homeofficefreigabestandorte.indexOf(_id) !== -1;
      });
      return Freigeberliste;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standorteliste', 'GetHomeofficefreigeberliste', this.Debug.Typen.Service);
    }
  }
  GetUrlausbsfreigeberliste(_id) {
    try {
      let Freigeberliste = lodash.filter(this.Pool.Mitarbeiterliste, mitarbeiter => {
        return mitarbeiter.Urlaubsfreigaben === true;
      });
      Freigeberliste = lodash.filter(Freigeberliste, mitarbeiter => {
        return mitarbeiter.Urlaubsfreigabeorte.indexOf(_id) !== -1;
      });
      return Freigeberliste;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Standorteliste', 'GetUrlausbsfreigeberliste', this.Debug.Typen.Component);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: http_1.HttpClient
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }];
};
exports.DatabaseMitarbeiterService = DatabaseMitarbeiterService;
exports.DatabaseMitarbeiterService = DatabaseMitarbeiterService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], DatabaseMitarbeiterService);

/***/ }),

/***/ 15024:
/*!***********************************************************************************************!*\
  !*** ./src/app/services/database-mitarbeitersettings/database-mitarbeitersettings.service.ts ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DatabaseMitarbeitersettingsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 7992);
const http_1 = __webpack_require__(/*! @angular/common/http */ 33712);
let DatabaseMitarbeitersettingsService = class DatabaseMitarbeitersettingsService {
  Debug;
  http;
  Pool;
  ServerSettingsUrl;
  constructor(Debug, http, Pool) {
    this.Debug = Debug;
    this.http = http;
    this.Pool = Pool;
    try {
      this.ServerSettingsUrl = this.Pool.CockpitdockerURL + '/settings/';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeitersettings', 'constructor', this.Debug.Typen.Service);
    }
  }
  InitService() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeitersettings', 'InitService', this.Debug.Typen.Service);
    }
  }
  FinishService() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeitersettings', 'FinishService', this.Debug.Typen.Service);
    }
  }
  SaveMitarbeitersettings() {
    let Observer;
    return new Promise((resolve, reject) => {
      if (this.Pool.Mitarbeitersettings._id === null) {
        // POST für neue Settings
        Observer = this.http.post(this.ServerSettingsUrl, this.Pool.Mitarbeitersettings);
        Observer.subscribe({
          next: result => {
            this.Pool.Mitarbeitersettings = result.Settings;
          },
          complete: () => {
            this.Pool.MitarbeitersettingslisteChanged.emit();
            resolve(this.Pool.Mitarbeitersettings);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      } else {
        // PUT für update Settings
        delete this.Pool.Mitarbeitersettings.__v;
        Observer = this.http.put(this.ServerSettingsUrl, this.Pool.Mitarbeitersettings);
        Observer.subscribe({
          next: ne => {
            this.Pool.Mitarbeitersettings = ne.Settings;
          },
          complete: () => {
            this.Pool.MitarbeitersettingslisteChanged.emit();
            resolve(this.Pool.Mitarbeitersettings);
          },
          error: error => {
            reject(error);
          }
        });
      }
    });
  }
  catch(error) {
    this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'SaveMitarbeitersettings', this.Debug.Typen.Service);
  }
  UpdateMitarbeitersettings(settings, ansicht) {
    try {
      let Observer;
      let Params = new http_1.HttpParams();
      let Index;
      Params.set('id', settings._id);
      if (ansicht !== null) {
        if (ansicht.ProjektID !== null) {
          Index = lodash.findIndex(settings.Aufgabenansicht, {
            ProjektID: ansicht.ProjektID
          });
          if (Index === -1) settings.Aufgabenansicht.push(ansicht);
        }
      }
      delete settings.__v;
      return new Promise((resove, reject) => {
        // PUT für update
        Observer = this.http.put(this.ServerSettingsUrl, settings);
        Observer.subscribe({
          next: ne => {
            this.Pool.Mitarbeitersettings = ne.Settings;
          },
          complete: () => {
            this.Pool.MitarbeitersettingsChanged.emit();
            this.UpdateMitarbeitersettingsliste(settings);
            resove(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeitersettings', 'UpdateMitarbeiter', this.Debug.Typen.Page);
    }
  }
  UpdateMitarbeitersettingsliste(settings) {
    try {
      let Index;
      Index = lodash.findIndex(this.Pool.Mitarbeitersettingsliste, {
        _id: settings._id
      });
      if (Index !== -1) {
        this.Pool.Mitarbeitersettingsliste[Index] = settings; // aktualisieren
        this.Debug.ShowMessage('Mitarbeitersettingsliste updated: ' + settings.MitarbeiterID, 'Database Mitarbeitersettings', 'UpdateMitarbeitersettingsliste', this.Debug.Typen.Service);
      } else {
        this.Debug.ShowMessage('Mitarbeitersetting nicht gefunden -> neuen Mitarbeiter hinzufügen', 'Database Mitarbeitersettings', 'UpdateMitarbeitersettingsliste', this.Debug.Typen.Service);
        this.Pool.Mitarbeitersettingsliste.push(settings); // neuen
      }
      // Gelöscht markiert Einträge entfernen
      this.Pool.Mitarbeitersettingsliste = lodash.filter(this.Pool.Mitarbeitersettingsliste, currentsetting => {
        return currentsetting.Deleted === false;
      });
      this.Pool.MitarbeitersettingslisteChanged.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeitersettings', 'UpdateMitarbeiterliste', this.Debug.Typen.Service);
    }
  }
  AddMitarbeitersetting(setting) {
    try {
      let Observer;
      let Mitarbeiter;
      return new Promise((resolve, reject) => {
        // POST für neuen Eintrag
        Observer = this.http.post(this.ServerSettingsUrl, setting);
        Observer.subscribe({
          next: result => {
            debugger;
            setting = result.Setting;
          },
          complete: () => {
            this.UpdateMitarbeitersettingsliste(setting);
            this.Pool.MitarbeitersettingslisteChanged.emit();
            resolve(Mitarbeiter);
          },
          error: error => {
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Mitarbeitersettings', 'AddMitarbeiter', this.Debug.Typen.Page);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: http_1.HttpClient
  }, {
    type: database_pool_service_1.DatabasePoolService
  }];
};
exports.DatabaseMitarbeitersettingsService = DatabaseMitarbeitersettingsService;
exports.DatabaseMitarbeitersettingsService = DatabaseMitarbeitersettingsService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], DatabaseMitarbeitersettingsService);

/***/ }),

/***/ 7992:
/*!*****************************************************************!*\
  !*** ./src/app/services/database-pool/database-pool.service.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DatabasePoolService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
const http_1 = __webpack_require__(/*! @angular/common/http */ 33712);
const uuid_1 = __webpack_require__(/*! uuid */ 21432);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const environment_1 = __webpack_require__(/*! ../../../environments/environment */ 36716);
const basics_1 = __webpack_require__(/*! ../basics/basics */ 14652);
let DatabasePoolService = class DatabasePoolService {
  Debug;
  Const;
  Basics;
  Http;
  Standorteliste;
  Mitarbeiterliste;
  Mitarbeiterpositionenliste;
  Mitarbeitersettingsliste;
  CockpitserverURL;
  CockpitdockerURL;
  Mitarbeiterdaten;
  Mitarbeiterstandort;
  Mitarbeitersettings;
  ShowProgress;
  MaxProgressValue;
  CurrentProgressValue;
  ProgressMessage;
  Changlogliste;
  MitarbeiterdatenHasError;
  Emailcontent;
  // public Outlookkatekorien: Outlookkategoriesstruktur[];
  // public Fachbereich: Fachbereiche;
  // public Festlegungskategorienliste: Festlegungskategoriestruktur[][];
  ProjektdatenLoaded;
  Emailcontentvarinaten;
  Appeinstellungen;
  // public Simontabellenliste: Simontabellestruktur[][];
  StandortelisteChanged = new core_1.EventEmitter();
  MitarbeiterlisteChanged = new core_1.EventEmitter();
  MitarbeiterpositionenlisteChanged = new core_1.EventEmitter();
  MitarbeiterdatenChanged = new core_1.EventEmitter();
  MitarbeitersettingslisteChanged = new core_1.EventEmitter();
  MitarbeitersettingsChanged = new core_1.EventEmitter();
  LoadingAllDataFinished = new core_1.EventEmitter();
  ChangeloglisteChanged = new core_1.EventEmitter();
  Signatur;
  ApplicationURL;
  constructor(Debug, Const, Basics, Http) {
    this.Debug = Debug;
    this.Const = Const;
    this.Basics = Basics;
    this.Http = Http;
    try {
      this.Emailcontentvarinaten = {
        NONE: this.Const.NONE,
        Protokoll: 'Protokoll',
        Bautagebuch: 'Bautagebuch',
        Festlegungen: 'Festlegungen',
        LOPListe: 'LOPListe',
        Aufgabenliste: 'Aufgabenliste',
        Simontabelle: 'Simontabelle'
      };
      this.Mitarbeiterdaten = null;
      this.MitarbeiterdatenHasError = true;
      this.Mitarbeitersettings = null;
      this.Mitarbeiterpositionenliste = [];
      this.Mitarbeiterstandort = null;
      this.ShowProgress = false;
      this.Mitarbeitersettingsliste = [];
      this.MaxProgressValue = 0;
      this.CurrentProgressValue = 0;
      this.Standorteliste = [];
      this.Mitarbeiterliste = [];
      this.Changlogliste = [];
      this.CockpitserverURL = environment_1.environment.production === true || environment_1.environment.useonlinedb === true ? 'https://bae-urlaubsplaner-server.azurewebsites.net' : 'http://localhost:8080';
      this.CockpitdockerURL = environment_1.environment.production === true || environment_1.environment.useonlinedb === true ? 'https://bae-urlaubsplaner-docker.azurewebsites.net' : 'http://localhost:80';
      this.ApplicationURL = environment_1.environment.production === true ? 'https://nice-glacier-0c9ec7703.3.azurestaticapps.net' : 'http://localhost:4200';
      this.Emailcontent = this.Emailcontentvarinaten.NONE;
      this.ProjektdatenLoaded = false;
      this.Appeinstellungen = null;
      this.Signatur = `<span style="font-size: 14px;">
        Beste Grüße,<br><br>
        [Name]<br>
        [Jobtitel]<br><br>
        </span>
        <span style="font-size: 14px; font-weight: bold;">
        BAE-GmbH<br>
        Ein Unternehmen der BAE GROUP
        </span>
        <table style="font-size: 12px;">
           <tr><td colspan="2">[Strasse]</td></tr>
           <tr><td colspan="2">[Ort]</td></tr>
           <tr><td>Telefon:</td><td>[Telefon]</td></tr>
           <tr><td>Mobil:</td><td>[Mobil]</td></tr>
           <tr><td>Email:</td><td><a href="mailto:[Email]">[Email]</a></td></tr>
           <tr><td>Web:</td><td><a href=https://www.bae-group.eu">www.bae-group.eu</a></td></tr>
        </table>
        <img src="[Image]" style="width: 200px;"><br><br>
        <span style="font-size: 12px; font-weight: bold;">
        BAE GmbH, Sitz: Coburg, Amtsgericht Coburg, HRB 6357.<br>
        Geschäftsführer Jürgen Kerscher, Michael Hölzle<br>
        Standorte BAE GROUP: Frankfurt, Berlin, München, Coburg, Bamberg, Deggendorf, Sofia, Varna<br>
        </span>
        <br>
        <table>
        <tr>
        <td style="font-size: 11px; text-align: justify; width: 100%">
        Der Inhalt dieser E-Mail ist ausschließlich für den bezeichneten Adressaten bestimmt. Wenn Sie nicht der vorgesehene Adressat dieser E-Mail oder dessen
        Vertreter sein sollten, so beachten Sie, dass jede Form der Kenntnis- und Vorteilsnahme, Veröffentlichung, Vervielfältigung oder Weitergabe des
        Inhalts dieser Mail unzulässig ist. Wir bitten Sie, sich in diesem Fall mit dem Absender der E-Mail in Verbindung zu setzen. Aussagen gegenüber
        dem Adressaten unterliegen den Regelungen des zugrundeliegenden Angebotes bzw. Auftrags, insbesondere den Allgemeinen Auftragsbedingungen und der
        individuellen Haftungsvereinbarung. Der Inhalt der E-Mail ist nur rechtsverbindlich, wenn er unsererseits durch einen Brief entsprechend bestätigt wird.
        Die Versendung von E-Mails an uns hat keine fristwahrende Wirkung. Wir möchten Sie außerdem darauf hinweisen, dass die Kommunikation per E-Mail über das
        Internet unsicher ist, da für unberechtigte Dritte grundsätzlich die Möglichkeit der Kenntnisnahme und Manipulation besteht.
        </td>
        </tr>
        <tr>
        <td style="font-size: 11px; text-align: justify;">
        The information contained in this email is intended exclusively for the addressee. Access to this email by anyone else is unauthorized. If you are not
        the intended recipient or his representative, any form of disclosure, reproduction, distribution or any action taken or refrained from in reliance on it,
        is prohibited. Please notify the sender immediately. All statements directed via this email to our clients are subject to the conditions of the submitted
        offer respectively order, in particular to the General Terms and Conditions and to the individual liability agreement between the parties. The content of
        this email is not legally binding unless confirmed by letter. The sending of emails to us will not constitute compliance with any time limits or deadlines.
        Please note that communication via email over the internet is insecure because third parties generally have the possibility to access and manipulate emails.
        </td>
        </tr>
        </table>
        <table>
          <tr>
            <td><b><span style='font-size:24.0pt;font-family:Webdings;color:#007F00;'>P</span></b></td>
            <td style='font-size:8.0pt;color:#00AF4F; padding: 4px; vertical-align: bottom;' valign="bottom">Think about Nature before you print!</td>
          </tr>
        </table>
    `;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'constructor', this.Debug.Typen.Service);
    }
  }
  GetFilledSignatur(Mitarbeiterdaten, local) {
    try {
      let Signatur = this.Signatur;
      let Telefon = Mitarbeiterdaten.Telefon;
      let Mobil = Mitarbeiterdaten.Mobil;
      let Email = Mitarbeiterdaten.Email;
      let Name = Mitarbeiterdaten.Vorname + ' ' + Mitarbeiterdaten.Name;
      let Jobtitel = Mitarbeiterdaten.Jobtitel;
      let Standort = lodash.find(this.Standorteliste, {
        _id: Mitarbeiterdaten.StandortID
      });
      let Strasse;
      let Ort;
      if (!lodash.isUndefined(Standort)) {
        Strasse = Standort.Strasse;
        Ort = Standort.PLZ + ' ' + Standort.Ort;
        Signatur = Signatur.replace('[Strasse]', Strasse);
        Signatur = Signatur.replace('[Ort]', Ort);
      }
      Signatur = Signatur.replace('[Name]', Name);
      Signatur = Signatur.replace('[Jobtitel]', Jobtitel);
      Signatur = Signatur.replace('[Telefon]', Telefon);
      Signatur = Signatur.replace('[Mobil]', Mobil);
      Signatur = Signatur.split('[Email]').join(Email);
      // debugger;
      if (local) {
        Signatur = Signatur.split('[Image]').join(this.Basics.WebAppUrl + '/assets/images/group_logo.png');
      } else {
        Signatur = Signatur.split('[Image]').join(this.Basics.WebAppUrl + '/assets/images/group_logo.png');
        debugger;
      }
      return Signatur;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'GetFilledSignatur', this.Debug.Typen.Service);
    }
  }
  /*
   
  public ReadProjektpunkteliste(projekt: Projektestruktur): Promise<any> {
       try {
         let Params: HttpParams;
      let Headers: HttpHeaders;
      let ProjektpunkteObservable: Observable<any>;
         this.Projektpunkteliste[projekt.Projektkey] = [];
         return new Promise((resolve, reject) => {
           Params  = new HttpParams({ fromObject: { projektkey: projekt.Projektkey, deleted: false }} );
        Headers = new HttpHeaders({
             'content-type': 'application/json',
        });
           ProjektpunkteObservable = this.Http.get(this.CockpitserverURL + '/projektpunkte', { headers: Headers, params: Params } );
           ProjektpunkteObservable.subscribe({
             next: (data) => {
               this.Projektpunkteliste[projekt.Projektkey] = <Projektpunktestruktur[]>data;
             },
          complete: () => {
               this.Debug.ShowMessage('Read Projektpunkte liste von ' + projekt.Projektkurzname + ' fertig.', 'Database Pool', 'ReadProjektpunkteliste', this.Debug.Typen.Service);
               this.Projektpunkteliste[projekt.Projektkey].forEach((Projektpunkt: Projektpunktestruktur) => {
                 if(lodash.isUndefined(Projektpunkt.Zeitansatz))             Projektpunkt.Zeitansatz             = 30;
              if(lodash.isUndefined(Projektpunkt.Zeitansatz))             Projektpunkt.Zeitansatz             = 30;
              if(lodash.isUndefined(Projektpunkt.Zeitansatzeinheit))      Projektpunkt.Zeitansatzeinheit      = this.Const.Zeitansatzeinheitvarianten.Minuten;
              if(lodash.isUndefined(Projektpunkt.Geschlossenzeitstempel)) Projektpunkt.Geschlossenzeitstempel = null;
              if(lodash.isUndefined(Projektpunkt.Geschlossenzeitstring))  Projektpunkt.Geschlossenzeitstring  = null;
              if(lodash.isUndefined(Projektpunkt.EndeKalenderwoche))      Projektpunkt.EndeKalenderwoche      = null;
              if(lodash.isUndefined(Projektpunkt.LOPListeID))             Projektpunkt.LOPListeID             = null;
              if(lodash.isUndefined(Projektpunkt.Prioritaet))             Projektpunkt.Prioritaet             = null;
              if(lodash.isUndefined(Projektpunkt.Thematik))               Projektpunkt.Thematik               = '';
              if(lodash.isUndefined(Projektpunkt.EmailID))                Projektpunkt.EmailID                = null;
              if(lodash.isUndefined(Projektpunkt.Leistungsphase))         Projektpunkt.Leistungsphase         = this.Const.Leistungsphasenvarianten.LPH3;
              if(lodash.isUndefined(Projektpunkt.OutlookkatgorieID))      Projektpunkt.OutlookkatgorieID      = this.Const.NONE;
              if(lodash.isUndefined(Projektpunkt.PlanungsmatrixID))       Projektpunkt.PlanungsmatrixID       = null;
              if(lodash.isUndefined(Projektpunkt.AufgabenbereichID))      Projektpunkt.AufgabenbereichID      = null;
              if(lodash.isUndefined(Projektpunkt.AufgabenteilbereichID))  Projektpunkt.AufgabenteilbereichID  = null;
              if(lodash.isUndefined(Projektpunkt.Matrixanwendung))        Projektpunkt.Matrixanwendung        = false;
              if(lodash.isUndefined(Projektpunkt.Bilderliste))            Projektpunkt.Bilderliste            = [];
              if(lodash.isUndefined(Projektpunkt.ProtokollShowBilder))    Projektpunkt.ProtokollShowBilder    = true;
              if(lodash.isUndefined(Projektpunkt.Thumbnailsize))          Projektpunkt.Thumbnailsize          = 'small';
              if(lodash.isUndefined(Projektpunkt.Ruecklaufreminderliste)) Projektpunkt.Ruecklaufreminderliste = [];
              if(lodash.isUndefined(Projektpunkt.LV_relevant))            Projektpunkt.LV_relevant            = true;
              if(lodash.isUndefined(Projektpunkt.Planung_relevant))       Projektpunkt.Planung_relevant       = true;
              if(lodash.isUndefined(Projektpunkt.LV_Eintrag))             Projektpunkt.LV_Eintrag             = false;
              if(lodash.isUndefined(Projektpunkt.Planung_Eintrag))        Projektpunkt.Planung_Eintrag        = false;
                 Projektpunkt.Anmerkungenliste.forEach((Anmerkung: Projektpunktanmerkungstruktur) => {
                   Anmerkung.LiveEditor = false;
              });
            });
               resolve(true);
          },
          error: (error: HttpErrorResponse) => {
               debugger;
               reject(error);
          }
        });
      });
    } catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadProjektpunkteliste', this.Debug.Typen.Service);
    }
  }
     public ReadDeletedProjektpunkteliste(projekt: Projektestruktur): Promise<any> {
       try {
         let Params: HttpParams;
      let Headers: HttpHeaders;
      let ProjektpunkteObservable: Observable<any>;
         this.DeletedProjektpunkteliste[projekt.Projektkey] = [];
         return new Promise((resolve, reject) => {
           Params  = new HttpParams({ fromObject: { projektkey: projekt.Projektkey, deleted: true }} );
        Headers = new HttpHeaders({
             'content-type': 'application/json',
        });
           ProjektpunkteObservable = this.Http.get(this.CockpitserverURL + '/projektpunkte', { headers: Headers, params: Params } );
           ProjektpunkteObservable.subscribe({
             next: (data) => {
   
            this.DeletedProjektpunkteliste[projekt.Projektkey] = <Projektpunktestruktur[]>data;
          },
          complete: () => {
               this.Debug.ShowMessage('Read gelöschte Projektpunkte liste von ' + projekt.Projektkurzname + ' fertig.', 'Database Pool', 'ReadDeletedProjektpunkteliste', this.Debug.Typen.Service);
               resolve(true);
          },
          error: (error: HttpErrorResponse) => {
               debugger;
               reject(error);
          }
        });
      });
    } catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadDeletedProjektpunkteliste', this.Debug.Typen.Service);
    }
  }
     public ReadProtokollliste(projekt: Projektestruktur): Promise<any> {
       try {
         let Params: HttpParams;
      let Headers: HttpHeaders;
      let ProtokollObservable: Observable<any>;
         this.Protokollliste[projekt.Projektkey] = [];
         return new Promise((resolve, reject) => {
           Params  = new HttpParams({ fromObject: { projektkey: projekt.Projektkey }} );
        Headers = new HttpHeaders({
             'content-type': 'application/json',
        });
           ProtokollObservable = this.Http.get(this.CockpitserverURL + '/protokolle', { headers: Headers, params: Params } );
           ProtokollObservable.subscribe({
             next: (data) => {
               // debugger;
               this.Protokollliste[projekt.Projektkey] = <Protokollstruktur[]>data;
             },
          complete: () => {
   
             // debugger;
               this.Debug.ShowMessage('Read Protokollliste von ' + projekt.Projektkurzname + ' fertig.', 'Database Pool', 'ReadProtokollliste', this.Debug.Typen.Service);
   
            resolve(true);
          },
          error: (error: HttpErrorResponse) => {
               debugger;
               reject(error);
          }
        });
      });
    } catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadProtokollliste', this.Debug.Typen.Service);
    }
  }
     public ReadLOPListe(projekt: Projektestruktur): Promise<any> {
       try {
         let Params: HttpParams;
      let Headers: HttpHeaders;
      let LOPListeObservable: Observable<any>;
         this.LOPListe[projekt.Projektkey] = [];
         return new Promise((resolve, reject) => {
           Params  = new HttpParams({ fromObject: { projektkey: projekt.Projektkey }} );
        Headers = new HttpHeaders({
             'content-type': 'application/json',
        });
           LOPListeObservable = this.Http.get(this.CockpitserverURL + '/lopliste', { headers: Headers, params: Params } );
           LOPListeObservable.subscribe({
             next: (data) => {
               // debugger;
               this.LOPListe[projekt.Projektkey] = <LOPListestruktur[]>data;
             },
          complete: () => {
   
             // debugger;
               this.Debug.ShowMessage('Read LOP Liste von ' + projekt.Projektkurzname + ' fertig.', 'Database Pool', 'ReadLOPListe', this.Debug.Typen.Service);
   
            resolve(true);
          },
          error: (error: HttpErrorResponse) => {
               debugger;
               reject(error);
          }
        });
      });
    } catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadLOPListe', this.Debug.Typen.Service);
    }
  }
     public ReadNotizenkapitelliste(projekt: Projektestruktur): Promise<any> {
       try {
         let Params: HttpParams;
      let Headers: HttpHeaders;
      let NotizenkapitelObservable: Observable<any>;
         // debugger;
         this.Notizenkapitelliste[projekt.Projektkey] = [];
         return new Promise((resolve, reject) => {
           Params  = new HttpParams({ fromObject: { projektkey: projekt.Projektkey }} );
        Headers = new HttpHeaders({
             'content-type': 'application/json',
        });
           NotizenkapitelObservable = this.Http.get(this.CockpitserverURL + '/notizenkapitel', { headers: Headers, params: Params } );
           NotizenkapitelObservable.subscribe({
             next: (data) => {
               // debugger
               this.Notizenkapitelliste[projekt.Projektkey] = <Notizenkapitelstruktur[]>data;
             },
          complete: () => {
               this.Notizenkapitelliste[projekt.Projektkey].sort((a: Notizenkapitelstruktur, b: Notizenkapitelstruktur) => {
                 if (a.Titel < b.Titel) return -1;
              if (a.Titel > b.Titel) return 1;
              return 0;
            });
                // debugger;
               this.Debug.ShowMessage('Read Notizenliste von ' + projekt.Projektkurzname + ' fertig.', 'Database Pool', 'NotizenkReadNotizenkapitellisteapitelroutsClass', this.Debug.Typen.Service);
   
            resolve(true);
          },
          error: (error: HttpErrorResponse) => {
               debugger;
               reject(error);
          }
        });
      });
    } catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadNotizenkapitelliste', this.Debug.Typen.Service);
    }
  }
     public ReadFestlegungskategorieliste(projekt: Projektestruktur): Promise<any> {
       try {
         let Params: HttpParams;
      let Headers: HttpHeaders;
      let FestlegungskategorieObservable: Observable<any>;
         // debugger;
         this.Festlegungskategorienliste[projekt.Projektkey] = [];
         return new Promise((resolve, reject) => {
           Params  = new HttpParams({ fromObject: { projektkey: projekt.Projektkey }} );
        Headers = new HttpHeaders({
             'content-type': 'application/json',
        });
           FestlegungskategorieObservable = this.Http.get(this.CockpitserverURL + '/festlegungskategorie', { headers: Headers, params: Params } );
           FestlegungskategorieObservable.subscribe({
             next: (data) => {
               this.Festlegungskategorienliste[projekt.Projektkey] = <Festlegungskategoriestruktur[]>data;
             },
          complete: () => {
   
   
            this.Debug.ShowMessage('Read Festlegungskategorieliste von ' + projekt.Projektkurzname + ' fertig.', 'Database Pool', 'ReadFestlegungskategorieliste', this.Debug.Typen.Service);
               resolve(true);
          },
          error: (error: HttpErrorResponse) => {
               debugger;
               reject(error);
          }
        });
      });
    } catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadFestlegungskategorieliste', this.Debug.Typen.Service);
    }
  }
     public ReadSimontabellen(projekt: Projektestruktur): Promise<any> {
       try {
         let Params: HttpParams;
      let Headers: HttpHeaders;
      let Tabelle: Simontabellestruktur;
      let SimontabellenObservable: Observable<any>;
         this.Simontabellenliste[projekt.Projektkey] = [];
         return new Promise((resolve, reject) => {
           Params  = new HttpParams({ fromObject: { projektkey: projekt.Projektkey }} );
        Headers = new HttpHeaders({
             'content-type': 'application/json',
        });
           SimontabellenObservable = this.Http.get(this.CockpitserverURL + '/simontabellen', { headers: Headers, params: Params } );
           SimontabellenObservable.subscribe({
             next: (data) => {
               this.Simontabellenliste[projekt.Projektkey] = <Simontabellestruktur[]>data;
          },
          complete: () => {
               for(Tabelle of this.Simontabellenliste[projekt.Projektkey] ) {
                 if(lodash.isUndefined(Tabelle.Sicherheitseinbehalt)) Tabelle.Sicherheitseinbehalt = 5;
                 for(let Rechnung of Tabelle.Rechnungen) {
                   if(lodash.isUndefined(Rechnung.Verfasser))               Rechnung.Verfasser = {
                     Name:    this.Mitarbeiterdaten.Name,
                  Vorname: this.Mitarbeiterdaten.Vorname,
                  Email:   this.Mitarbeiterdaten.Email
                };
   
                if(lodash.isUndefined(Rechnung.GesendetZeitstempel)) Rechnung.GesendetZeitstempel = null;
                if(lodash.isUndefined(Rechnung.EmpfaengerInternIDListe))
                {
                     Rechnung.EmpfaengerInternIDListe  = [];
                  Rechnung.EmpfaengerInternIDListe.push(this.Mitarbeiterdaten._id);
                }
                if(lodash.isUndefined(Rechnung.EmpfaengerExternIDListe)) Rechnung.EmpfaengerExternIDListe  = [];
                if(lodash.isUndefined(Rechnung.GesendetZeitstring))      Rechnung.GesendetZeitstring       = null;
              }
            }
               this.Debug.ShowMessage('Read Simontabellenliste von ' + projekt.Projektkurzname + ' fertig.', 'Database Pool', 'ReadSimontabellen', this.Debug.Typen.Service);
               resolve(true);
          },
          error: (error: HttpErrorResponse) => {
               debugger;
               reject(error);
          }
        });
      });
    } catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadSimontabellen', this.Debug.Typen.Service);
    }
  }
     public ReadBautagebuchliste(projekt: Projektestruktur): Promise<any> {
       try {
         let Params: HttpParams;
      let Headers: HttpHeaders;
      let BautagebuchObservable: Observable<any>;
         this.Bautagebuchliste[projekt.Projektkey] = [];
         return new Promise((resolve, reject) => {
           Params  = new HttpParams({ fromObject: { projektkey: projekt.Projektkey }} );
        Headers = new HttpHeaders({
             'content-type': 'application/json',
        });
           BautagebuchObservable = this.Http.get(this.CockpitserverURL + '/bautagebuch', { headers: Headers, params: Params } );
           BautagebuchObservable.subscribe({
             next: (data) => {
               this.Bautagebuchliste[projekt.Projektkey] = <Bautagebuchstruktur[]>data;
             },
          complete: () => {
   
            this.Bautagebuchliste[projekt.Projektkey].forEach((Tagebuch: Bautagebuchstruktur) => {
                 if(lodash.isUndefined(Tagebuch.GesendetZeitstring))     Tagebuch.GesendetZeitstring     = this.Const.NONE;
              if(lodash.isUndefined(Tagebuch.GesendetZeitstempel))    Tagebuch.GesendetZeitstempel    = null;
              if(lodash.isUndefined(Tagebuch.BeteiligtInternIDListe)) Tagebuch.BeteiligtInternIDListe = [this.Mitarbeiterdaten._id];
               });
               // Tagebücher absteigend mit letztem Eintrag zuerst sortieren
               this.Bautagebuchliste[projekt.Projektkey].sort((a: Bautagebuchstruktur, b: Bautagebuchstruktur) => {
                 if (a.Zeitstempel > b.Zeitstempel) return -1;
              if (a.Zeitstempel < b.Zeitstempel) return 1;
              return 0;
            });
               this.Debug.ShowMessage('Read Bautagebuchliste von ' + projekt.Projektkurzname + ' fertig.', 'Database Pool', 'ReadBautagebuchliste', this.Debug.Typen.Service);
   
            resolve(true);
          },
          error: (error: HttpErrorResponse) => {
               debugger;
               reject(error);
          }
        });
      });
    } catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadProtokollliste', this.Debug.Typen.Service);
    }
  }
   
      */
  ReadMitarbeiterliste() {
    try {
      this.Mitarbeiterliste = [];
      let headers = new http_1.HttpHeaders({
        'content-type': 'application/json'
      });
      return new Promise((resolve, reject) => {
        let MitarbeiterObservable = this.Http.get(this.CockpitdockerURL + '/mitarbeiter', {
          headers: headers
        });
        MitarbeiterObservable.subscribe({
          next: data => {
            this.Mitarbeiterliste = data;
          },
          complete: () => {
            for (let Mitarbeiter of this.Mitarbeiterliste) {
              Mitarbeiter = this.InitMitarbeiter(Mitarbeiter);
            }
            this.MitarbeiterlisteChanged.emit();
            resolve(true);
          },
          error: error => {
            console.log(error.message);
            console.log('Mitarbeiterliste lesen war fehlerhaft.');
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadMitarbeiterliste', this.Debug.Typen.Service);
    }
  }
  ReadMitarbeiterpositionenliste() {
    try {
      this.Mitarbeiterpositionenliste = [];
      let headers = new http_1.HttpHeaders({
        'content-type': 'application/json'
      });
      return new Promise((resolve, reject) => {
        let MitarbeiterpositionnObservable = this.Http.get(this.CockpitdockerURL + '/mitarbeiterpositionen', {
          headers: headers
        });
        MitarbeiterpositionnObservable.subscribe({
          next: data => {
            this.Mitarbeiterpositionenliste = data;
          },
          complete: () => {
            this.MitarbeiterpositionenlisteChanged.emit();
            resolve(true);
          },
          error: error => {
            console.log('Error: ' + error.message);
            console.log('Mitarbeiterpositionenliste lesen war fehlerhaft.');
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadMitarbeiterpositionenliste', this.Debug.Typen.Service);
    }
  }
  ReadChangelogliste() {
    try {
      this.Changlogliste = [];
      let headers = new http_1.HttpHeaders({
        'content-type': 'application/json'
      });
      return new Promise((resolve, reject) => {
        let ChangelogObservable = this.Http.get(this.CockpitdockerURL + '/changelog', {
          headers: headers
        });
        ChangelogObservable.subscribe({
          next: data => {
            this.Changlogliste = data;
          },
          complete: () => {
            this.Changlogliste.sort((a, b) => {
              if (a.Zeitstempel > b.Zeitstempel) return -1;
              if (a.Zeitstempel < b.Zeitstempel) return 1;
              return 0;
            });
            this.ChangeloglisteChanged.emit();
            // debugger;
            resolve(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadChangelogliste', this.Debug.Typen.Service);
    }
  }
  ReadStandorteliste() {
    try {
      this.Standorteliste = [];
      let headers = new http_1.HttpHeaders({
        'content-type': 'application/json'
      });
      return new Promise((resolve, reject) => {
        let StandortObservable = this.Http.get(this.CockpitdockerURL + '/standorte', {
          headers: headers
        });
        StandortObservable.subscribe({
          next: data => {
            // ;
            this.Standorteliste = data;
          },
          complete: () => {
            // debugger;
            for (let Standort of this.Standorteliste) {
              if (lodash.isUndefined(Standort.Konfession)) Standort.Konfession = 'RK';
              if (lodash.isUndefined(Standort.Bundesland)) Standort.Bundesland = 'DE-BY';
              if (lodash.isUndefined(Standort.Land)) Standort.Land = 'DE';
              if (lodash.isUndefined(Standort.Homeofficefreigabepersonen)) Standort.Homeofficefreigabepersonen = [];
              if (lodash.isUndefined(Standort.Urlaubfreigabepersonen)) Standort.Urlaubfreigabepersonen = [];
            }
            this.StandortelisteChanged.emit();
            resolve(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadStandorteliste', this.Debug.Typen.Service);
    }
  }
  ReadSettingsliste() {
    try {
      this.Mitarbeitersettingsliste = [];
      let headers = new http_1.HttpHeaders({
        'content-type': 'application/json'
      });
      return new Promise((resolve, reject) => {
        let SettingsObservable = this.Http.get(this.CockpitdockerURL + '/settings', {
          headers: headers
        });
        SettingsObservable.subscribe({
          next: data => {
            this.Mitarbeitersettingsliste = data;
          },
          complete: () => {
            this.MitarbeitersettingslisteChanged.emit();
            resolve(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadStandorteliste', this.Debug.Typen.Service);
    }
  }
  InitMitarbeiter(mitarbeiter) {
    try {
      if (lodash.isUndefined(mitarbeiter.SettingsID)) {
        mitarbeiter.SettingsID = null;
      }
      if (lodash.isUndefined(mitarbeiter.Archiviert)) {
        mitarbeiter.Archiviert = false;
      }
      if (lodash.isUndefined(mitarbeiter.Meintagliste)) {
        mitarbeiter.Meintagliste = [];
      }
      if (lodash.isUndefined(mitarbeiter.Meinewocheliste)) {
        mitarbeiter.Meinewocheliste = [];
      }
      if (lodash.isUndefined(mitarbeiter.Anrede)) {
        mitarbeiter.Anrede = this.Const.NONE;
      }
      if (lodash.isUndefined(mitarbeiter.Urlaub)) {
        mitarbeiter.Urlaub = 30;
      }
      if (lodash.isUndefined(mitarbeiter.Resturlaub)) {
        mitarbeiter.Resturlaub = 0;
      }
      if (lodash.isUndefined(mitarbeiter.Urlaubsliste)) {
        mitarbeiter.Urlaubsliste = [];
      }
      if (lodash.isUndefined(mitarbeiter.Urlaubsfreigaben)) {
        mitarbeiter.Urlaubsfreigaben = false;
      }
      if (lodash.isUndefined(mitarbeiter.Planeradministrator)) {
        mitarbeiter.Planeradministrator = false;
      }
      if (lodash.isUndefined(mitarbeiter.Urlaubsfreigaben)) {
        mitarbeiter.Urlaubsfreigaben = false;
      }
      if (lodash.isUndefined(mitarbeiter.Homeofficefreigaben)) {
        mitarbeiter.Homeofficefreigaben = false;
      }
      if (lodash.isUndefined(mitarbeiter.Homeofficefreigabestandorte)) {
        mitarbeiter.Homeofficefreigabestandorte = [];
      }
      if (lodash.isUndefined(mitarbeiter.Urlaubsfreigabeorte)) {
        mitarbeiter.Urlaubsfreigabeorte = [];
      }
      if (lodash.isUndefined(mitarbeiter.PositionID)) {
        mitarbeiter.PositionID = null;
      }
      for (let Eintrag of mitarbeiter.Meinewocheliste) {
        if (lodash.isUndefined(Eintrag.Kalenderwoche)) Eintrag.Kalenderwoche = 0;
      }
      mitarbeiter.Urlaubsliste.sort((a, b) => {
        if (a.Jahr < b.Jahr) return -1;
        if (a.Jahr > b.Jahr) return 1;
        return 0;
      });
      return mitarbeiter;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'InitMitarbeiter', this.Debug.Typen.Service);
    }
  }
  CheckMitarbeiterdaten() {
    try {
      if (this.Mitarbeiterdaten !== null) {
        this.MitarbeiterdatenHasError = false;
      } else this.MitarbeiterdatenHasError = true;
      return this.MitarbeiterdatenHasError;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'CheckMItarbeiterdaten', this.Debug.Typen.Service);
    }
  }
  /*
     public async ReadProjektdaten(projektliste: Projektestruktur[]): Promise<any> {
       try {
         let Steps: number           = 9;
      this.ShowProgress           = true;
      this.MaxProgressValue       = projektliste.length * Steps;
      this.CurrentProgressValue   = 0;
      this.Projektpunkteliste     = [];
      this.Protokollliste         = [];
      this.Bautagebuchliste       = [];
      this.LOPListe               = [];
         try {
           this.ProgressMessage = 'Projektpunkte Musterprojekt';
           for(let Projekt of projektliste)  {
             this.ProgressMessage = 'Projektpunkte ' + Projekt.Projektkurzname;
             await this.ReadProjektpunkteliste(Projekt);
             this.CurrentProgressValue++;
             await this.ReadDeletedProjektpunkteliste(Projekt);
             this.CurrentProgressValue++;
             this.ProgressMessage = 'Protokolle ' + Projekt.Projektkurzname;
             await this.ReadProtokollliste(Projekt);
             this.CurrentProgressValue++;
             this.ProgressMessage = 'Bautagebücher ' + Projekt.Projektkurzname;
             await this.ReadBautagebuchliste(Projekt);
             this.CurrentProgressValue++;
             this.ProgressMessage = 'LOP Liste ' + Projekt.Projektkurzname;
             await this.ReadLOPListe(Projekt);
             this.CurrentProgressValue++;
             this.ProgressMessage = 'Notizenkapitel Liste ' + Projekt.Projektkurzname;
             await this.ReadNotizenkapitelliste(Projekt);
             this.CurrentProgressValue++;
             this.ProgressMessage = 'Festlegungskategorien Liste ' + Projekt.Projektkurzname;
             await this.ReadFestlegungskategorieliste(Projekt);
             this.CurrentProgressValue++;
             this.ProgressMessage = 'Simontabellen Liste ' + Projekt.Projektkurzname;
             await this.ReadSimontabellen(Projekt);
             this.CurrentProgressValue++;
        }
      } catch (error) {
           this.ShowProgress = false;
           return Promise.reject(error);
      }
         this.ProjektpunktelisteChanged.emit();
      this.ProtokolllisteChanged.emit();
      this.BautagebuchlisteChanged.emit();
      this.LOPListeChanged.emit();
      this.NotizenkapitellisteChanged.emit();
      this.SimontabellenlisteChanged.emit();
         this.CurrentProgressValue = this.MaxProgressValue;
      this.ShowProgress = false;
       } catch (error) {
         this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'ReadProjektdaten', this.Debug.Typen.Service);
    }
  }
      */
  GetNewUniqueID() {
    try {
      return (0, uuid_1.v4)();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'GetNewUniqueID', this.Debug.Typen.Service);
    }
  }
  GetNewMitarbeitersettings() {
    try {
      return {
        _id: null,
        MitarbeiterID: null,
        FavoritenID: null,
        ProjektID: null,
        Favoritprojektindex: null,
        Zoomfaktor: 100,
        Textsize: 14,
        StandortFilter: null,
        LeistungsphaseFilter: this.Const.Leistungsphasenvarianten.UNBEKANNT,
        Aufgabenansicht: [],
        Deleted: false,
        HeadermenueMaxFavoriten: 6,
        AufgabenSortiermodus: this.Const.AufgabenSortiermodusvarianten.TermineAufsteigend,
        AufgabenMeilensteineNachlauf: 2,
        AufgabenShowMeilensteine: true,
        AufgabenShowNummer: false,
        AufgabenShowStartdatum: false,
        AufgabenShowAufgabe: true,
        AufgabenShowBemerkung: true,
        AufgabenShowTage: true,
        AufgabenShowTermin: true,
        AufgabenShowStatus: true,
        AufgabenShowFortschritt: false,
        AufgabenShowZustaendig: true,
        AufgabenShowMeintag: true,
        AufgabenShowZeitansatz: false,
        AufgabenShowMeinewoche: true,
        UrlaubShowBeantragt: true,
        UrlaubShowVertreterfreigabe: true,
        UrlaubShowGenehmigt: true,
        UrlaubShowAbgelehnt: true,
        UrlaubShowMeinenUrlaub: true,
        UrlaubShowFerien_DE: false,
        UrlaubShowFeiertage_DE: false,
        UrlaubShowFerien_BG: false,
        UrlaubShowFeiertage_BG: false,
        ShowHomeoffice: true,
        OberkostengruppeFilter: null,
        HauptkostengruppeFilter: null,
        UnterkostengruppeFilter: null,
        AufgabenTerminfiltervariante: null,
        AufgabenTerminfilterStartwert: null,
        AufgabenTerminfilterEndewert: null,
        LOPListeGeschlossenZeitfilter: 14
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'GetNewMitarbeitersettings', this.Debug.Typen.Service);
    }
  }
  InitMitarbeitersettings() {
    try {
      let Settings;
      if (this.Mitarbeiterdaten.SettingsID === null) {
        return this.GetNewMitarbeitersettings();
      } else {
        Settings = lodash.find(this.Mitarbeitersettingsliste, {
          _id: this.Mitarbeiterdaten.SettingsID
        });
        if (lodash.isUndefined(Settings)) {
          return this.GetNewMitarbeitersettings();
        } else {
          if (lodash.isUndefined(Settings.Favoritprojektindex)) Settings.Favoritprojektindex = 3000;
          if (lodash.isUndefined(Settings.HeadermenueMaxFavoriten)) Settings.HeadermenueMaxFavoriten = 6;
          if (lodash.isUndefined(Settings.Zoomfaktor)) Settings.Zoomfaktor = 100;
          if (lodash.isUndefined(Settings.Textsize)) Settings.Textsize = 14;
          if (lodash.isUndefined(Settings.Deleted)) Settings.Deleted = false;
          if (lodash.isUndefined(Settings.AufgabenShowNummer)) Settings.AufgabenShowNummer = true;
          if (lodash.isUndefined(Settings.AufgabenShowStartdatum)) Settings.AufgabenShowStartdatum = true;
          if (lodash.isUndefined(Settings.AufgabenShowAufgabe)) Settings.AufgabenShowAufgabe = true;
          if (lodash.isUndefined(Settings.AufgabenShowBemerkung)) Settings.AufgabenShowBemerkung = true;
          if (lodash.isUndefined(Settings.AufgabenShowTage)) Settings.AufgabenShowTage = true;
          if (lodash.isUndefined(Settings.AufgabenShowTermin)) Settings.AufgabenShowTermin = true;
          if (lodash.isUndefined(Settings.AufgabenShowStatus)) Settings.AufgabenShowStatus = true;
          if (lodash.isUndefined(Settings.AufgabenShowFortschritt)) Settings.AufgabenShowFortschritt = true;
          if (lodash.isUndefined(Settings.AufgabenShowZustaendig)) Settings.AufgabenShowZustaendig = true;
          if (lodash.isUndefined(Settings.AufgabenShowMeintag)) Settings.AufgabenShowMeintag = true;
          if (lodash.isUndefined(Settings.AufgabenShowZeitansatz)) Settings.AufgabenShowZeitansatz = true;
          if (lodash.isUndefined(Settings.AufgabenShowMeinewoche)) Settings.AufgabenShowMeinewoche = true;
          if (lodash.isUndefined(Settings.Aufgabenansicht)) Settings.Aufgabenansicht = [];
          if (lodash.isUndefined(Settings.AufgabenTerminfiltervariante)) Settings.AufgabenTerminfiltervariante = null;
          if (lodash.isUndefined(Settings.AufgabenTerminfilterStartwert)) Settings.AufgabenTerminfilterStartwert = null;
          if (lodash.isUndefined(Settings.AufgabenTerminfilterEndewert)) Settings.AufgabenTerminfilterEndewert = null;
          if (lodash.isUndefined(Settings.AufgabenSortiermodus)) Settings.AufgabenSortiermodus = this.Const.AufgabenSortiermodusvarianten.TermineAufsteigend;
          if (lodash.isUndefined(Settings.AufgabenMeilensteineNachlauf)) Settings.AufgabenMeilensteineNachlauf = 2;
          if (lodash.isUndefined(Settings.LOPListeGeschlossenZeitfilter)) Settings.LOPListeGeschlossenZeitfilter = 14;
          if (lodash.isUndefined(Settings.LeistungsphaseFilter)) Settings.LeistungsphaseFilter = this.Const.Leistungsphasenvarianten.UNBEKANNT;
          if (lodash.isUndefined(Settings.OberkostengruppeFilter)) Settings.OberkostengruppeFilter = null;
          if (lodash.isUndefined(Settings.UnterkostengruppeFilter)) Settings.UnterkostengruppeFilter = null;
          if (lodash.isUndefined(Settings.HauptkostengruppeFilter)) Settings.HauptkostengruppeFilter = null;
          if (lodash.isUndefined(Settings.UrlaubShowBeantragt)) Settings.UrlaubShowBeantragt = true;
          if (lodash.isUndefined(Settings.UrlaubShowVertreterfreigabe)) Settings.UrlaubShowVertreterfreigabe = true;
          if (lodash.isUndefined(Settings.UrlaubShowGenehmigt)) Settings.UrlaubShowGenehmigt = true;
          if (lodash.isUndefined(Settings.UrlaubShowAbgelehnt)) Settings.UrlaubShowAbgelehnt = true;
          if (lodash.isUndefined(Settings.UrlaubShowFerien_DE)) Settings.UrlaubShowFerien_DE = false;
          if (lodash.isUndefined(Settings.UrlaubShowFerien_BG)) Settings.UrlaubShowFerien_BG = false;
          if (lodash.isUndefined(Settings.UrlaubShowFeiertage_DE)) Settings.UrlaubShowFeiertage_DE = false;
          if (lodash.isUndefined(Settings.UrlaubShowFeiertage_BG)) Settings.UrlaubShowFeiertage_BG = false;
          if (lodash.isUndefined(Settings.UrlaubShowMeinenUrlaub)) Settings.UrlaubShowMeinenUrlaub = true;
          if (lodash.isUndefined(Settings.ShowHomeoffice)) Settings.ShowHomeoffice = true;
          return Settings;
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Pool', 'InitMitarbeitersettings', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: http_1.HttpClient
  }];
};
exports.DatabasePoolService = DatabasePoolService;
exports.DatabasePoolService = DatabasePoolService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], DatabasePoolService);

/***/ }),

/***/ 58864:
/*!***************************************************************************!*\
  !*** ./src/app/services/database-standorte/database-standorte.service.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DatabaseStandorteService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 7992);
const http_1 = __webpack_require__(/*! @angular/common/http */ 33712);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
const uuid_1 = __webpack_require__(/*! uuid */ 21432);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
let DatabaseStandorteService = class DatabaseStandorteService {
  Debug;
  Pool;
  Const;
  http;
  CurrentStandort;
  CurrentStandortfilter;
  StandortfilterChanged = new core_1.EventEmitter();
  ServerUrl;
  constructor(Debug, Pool, Const, http) {
    this.Debug = Debug;
    this.Pool = Pool;
    this.Const = Const;
    this.http = http;
    try {
      this.CurrentStandort = null;
      this.CurrentStandortfilter = null;
      this.ServerUrl = this.Pool.CockpitdockerURL + '/standorte';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'constructor', this.Debug.Typen.Service);
    }
  }
  InitService() {
    try {
      let Standort;
      if (this.Pool.Mitarbeiterdaten !== null && this.Pool.Mitarbeitersettings.StandortFilter !== this.Const.NONE) {
        Standort = lodash.find(this.Pool.Standorteliste, {
          _id: this.Pool.Mitarbeitersettings.StandortFilter
        });
        if (Standort) this.CurrentStandortfilter = lodash.cloneDeep(Standort);
      } else {
        this.CurrentStandortfilter = null;
      }
      if (this.Pool.Mitarbeiterdaten !== null) {
        Standort = lodash.find(this.Pool.Standorteliste, {
          _id: this.Pool.Mitarbeiterdaten.StandortID
        });
        if (lodash.isUndefined(Standort) === false) this.Pool.Mitarbeiterstandort = Standort;
      } else {
        this.Pool.Mitarbeiterstandort = null;
      }
      for (let Standort of this.Pool.Standorteliste) {
        if (Standort._id === this.Pool.Mitarbeiterdaten.StandortID) Standort.ShowInGesamtuebersicht = true;else {
          Standort.ShowInGesamtuebersicht = false;
        }
      }
      this.StandortfilterChanged.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'InitService', this.Debug.Typen.Service);
    }
  }
  FinishService() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'FinishService', this.Debug.Typen.Service);
    }
  }
  GetStandort(standortid) {
    try {
      let Standort;
      Standort = lodash.find(this.Pool.Standorteliste, {
        _id: standortid
      });
      if (!lodash.isUndefined(Standort)) {
        return Standort.Kuerzel + ' - ' + Standort.Ort;
      } else return 'unbekannt';
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Mitarbeiter Editor', 'GetStandort', this.Debug.Typen.Component);
    }
  }
  GetEmptyStandort() {
    try {
      let Heute = (0, moment_1.default)();
      return {
        _id: null,
        Standort: "",
        Kuerzel: "",
        Strasse: "",
        PLZ: "",
        Ort: "",
        Telefon: "",
        Email: "",
        Deleted: false,
        Bundesland: 'DE-BY',
        Konfession: 'RK',
        Land: 'DE',
        Homeofficefreigabepersonen: [],
        Urlaubfreigabepersonen: [],
        Zeitstempel: Heute.valueOf(),
        Zeitpunkt: Heute.format('DD.MM.YYYY')
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'GetEmptyStandort', this.Debug.Typen.Service);
    }
  }
  GetUniqueStandortID() {
    try {
      let StandortID = this.CurrentStandort.Kuerzel;
      StandortID = StandortID.replace(/ /g, '_');
      StandortID = StandortID.replace(/-/g, '_');
      StandortID = StandortID.replace(/./g, '_');
      return StandortID + '_' + (0, uuid_1.v4)();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'GetUniqueStandortID', this.Debug.Typen.Service);
    }
  }
  AddStandort() {
    try {
      let Observer;
      let Standort;
      return new Promise((resove, reject) => {
        // POST für neuen Eintrag
        Observer = this.http.post(this.ServerUrl, this.CurrentStandort);
        Observer.subscribe({
          next: result => {
            debugger;
            Standort = result.data;
          },
          complete: () => {
            this.UpdateStandortliste(Standort);
            this.Pool.StandortelisteChanged.emit();
            resove(true);
          },
          error: error => {
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'AddStandort', this.Debug.Typen.Service);
    }
  }
  UpdateStandortliste(standort) {
    try {
      let Index;
      Index = lodash.findIndex(this.Pool.Standorteliste, {
        _id: this.CurrentStandort._id
      });
      if (Index !== -1) {
        this.Pool.Standorteliste[Index] = standort;
        this.Debug.ShowMessage('Standortliste updated: ' + standort.Standort, 'Database Standorte', 'UpdateStandortliste', this.Debug.Typen.Service);
      } else {
        this.Debug.ShowMessage('Standort nicht gefunden -> neuen Standort hinzufügen', 'Database Standorte', 'UpdateStandortliste', this.Debug.Typen.Service);
        this.Pool.Standorteliste.push(standort); // neuen
      }
      // Gelöscht markiert Einträge entfernen
      this.Pool.Standorteliste = lodash.filter(this.Pool.Standorteliste, currentstandort => {
        return currentstandort.Deleted === false;
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'UpdateStandortliste', this.Debug.Typen.Service);
    }
  }
  UpdateStandort() {
    try {
      let Observer;
      // let Params = new HttpParams();
      // Params.set('id', this.CurrentStandort._id);
      delete this.CurrentStandort.__v;
      return new Promise((resove, reject) => {
        // PUT für update
        Observer = this.http.put(this.ServerUrl, this.CurrentStandort);
        Observer.subscribe({
          next: ne => {},
          complete: () => {
            this.UpdateStandortliste(this.CurrentStandort);
            this.Pool.StandortelisteChanged.emit();
            resove(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'UpdateStandort', this.Debug.Typen.Service);
    }
  }
  DeleteStandort() {
    try {
      let Observer;
      this.CurrentStandort.Deleted = true;
      return new Promise((resove, reject) => {
        // PUT für update
        Observer = this.http.put(this.ServerUrl, this.CurrentStandort);
        Observer.subscribe({
          next: ne => {
            debugger;
          },
          complete: () => {
            debugger;
            this.UpdateStandortliste(this.CurrentStandort);
            this.Pool.StandortelisteChanged.emit();
            resove(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'DeleteStandort', this.Debug.Typen.Service);
    }
  }
  GetStandortfiller() {
    try {
      if (this.CurrentStandortfilter === null) return 'kein Standortfilter';else return this.CurrentStandortfilter.Kuerzel + ' / ' + this.CurrentStandortfilter.Ort;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Standorte', 'GetStandortfiller', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: const_1.ConstProvider
  }, {
    type: http_1.HttpClient
  }];
};
exports.DatabaseStandorteService = DatabaseStandorteService;
exports.DatabaseStandorteService = DatabaseStandorteService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], DatabaseStandorteService);

/***/ }),

/***/ 9544:
/*!*********************************************************************!*\
  !*** ./src/app/services/database-urlaub/database-urlaub.service.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DatabaseUrlaubService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 7992);
const http_1 = __webpack_require__(/*! @angular/common/http */ 33712);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
const graph_1 = __webpack_require__(/*! ../graph/graph */ 8608);
const basics_1 = __webpack_require__(/*! ../basics/basics */ 14652);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../database-mitarbeiter/database-mitarbeiter.service */ 22848);
let DatabaseUrlaubService = class DatabaseUrlaubService {
  Debug;
  Pool;
  Const;
  Graph;
  DBMitarbeiter;
  Basics;
  http;
  PlanungsmonateChanged = new core_1.EventEmitter();
  ExterneUrlaubeChanged = new core_1.EventEmitter();
  ExterneHomeofficeChanged = new core_1.EventEmitter();
  UrlaubStatusChanged = new core_1.EventEmitter();
  HomeofficeStatusChanged = new core_1.EventEmitter();
  AddUrlaubCancelEvent = new core_1.EventEmitter();
  UpdateKalenderRequestEvent = new core_1.EventEmitter();
  CurrentHomeofficecounter;
  Bundeslandkuerzel;
  Bundesland;
  Regionenliste;
  CurrentJahr;
  Jahr;
  Startjahr;
  Feiertageliste;
  Ferienliste;
  CurrentUrlaub;
  UrlaublisteExtern;
  CurrentMonatindex;
  LastMonatIndex;
  FirstMonatIndex;
  Laendercode;
  ShowFeiertage_DE;
  ShowFeiertage_BG;
  ShowFerientage_DE;
  ShowFerientage_BG;
  Ferienfarbe_DE;
  Ferienfarbe_BG;
  Feiertagefarbe_DE;
  Feiertagefarbe_BG;
  CurrentUrlaubzeitspanne;
  CurrentHomeofficezeitspanne;
  Monateliste;
  ServerReadfeiertageUrl;
  ServerReadRegionenUrl;
  ServerReadFerienUrl;
  Vertretrungliste;
  Urlaubfreigabenliste;
  Homeofficefreigabenliste;
  Vertretungsanfragenanzahl;
  Vertretungsantwortenanzahl;
  Freigabenanfragenanzahl;
  Freigabenantwortenanzahl;
  Urlaubsanfragenanzahl;
  Homeofficeanfragenanzahl;
  Homeofficantwortenanzahl;
  Antwortenanzahl;
  CorrectSetup;
  Officeemailadress;
  CurrentMitarbeiter;
  Kalenderwochenhoehenliste;
  Urlaubstatusvarianten = {
    Geplant: 'Geplant',
    Vertreterablehnung: 'Vertreterablehnung',
    Vertreteranfrage: 'Vertreteranfrage',
    Vertreterfreigabe: 'Vertreterfreigabe',
    Abgelehnt: 'Abgelehnt',
    Genehmigt: 'Genehmigt',
    Feiertag: 'Feiertag',
    Ferientag: 'Ferientag'
  };
  GesamtuebersichtSetting = {
    ShowGeplant: true,
    ShowVertreteranfragen: true,
    ShowVertreterfreigaben: true,
    ShowVertreterablehnungen: false,
    ShowUrlaubsgenehmigungen: true,
    ShowUrlaubsablehnungen: false,
    ShowHomeofficeGeplant: true,
    ShowHomeofficeGenehmigt: true,
    ShowHomeofficeAnfrage: true
  };
  Homeofficestatusvarianten = {
    Geplant: 'Geplant',
    Freigabeanfrage: 'Freigabeanfrage',
    Abgelehnt: 'Abgelehnt',
    Genehmigt: 'Genehmigt',
    Feiertag: 'Feiertag',
    Ferientag: 'Ferientag'
  };
  Urlaubsfaben = {
    Geplant: '#307ac1',
    Vertreterfreigabe: 'orange',
    Vertreteranfrage: '#04B4AE',
    Vertreterablehnung: '#8A0886',
    Abgelehnt: 'red',
    Genehmigt: 'green',
    Ferien_DE: '#999999',
    Ferien_BG: '#999999',
    Feiertage_DE: '#454545',
    Feiertage_BG: '#454545',
    Wochenende: '#34495E'
  };
  Homeofficefarben = {
    Geplant: '#307ac1',
    Freigabeanfrage: '#04B4AE',
    Abgelehnt: 'red',
    Genehmigt: 'green'
  };
  constructor(Debug, Pool, Const, Graph, DBMitarbeiter, Basics, http) {
    this.Debug = Debug;
    this.Pool = Pool;
    this.Const = Const;
    this.Graph = Graph;
    this.DBMitarbeiter = DBMitarbeiter;
    this.Basics = Basics;
    this.http = http;
    try {
      this.ServerReadfeiertageUrl = this.Pool.CockpitdockerURL + '/readfeiertage';
      this.ServerReadFerienUrl = this.Pool.CockpitdockerURL + '/readferien';
      this.ServerReadRegionenUrl = this.Pool.CockpitdockerURL + '/readregionen';
      this.CurrentUrlaub = null;
      this.CurrentJahr = (0, moment_1.default)().year();
      this.Jahr = (0, moment_1.default)().year();
      this.Bundeslandkuerzel = 'DE-BY';
      this.Bundesland = '';
      this.Feiertageliste = [];
      this.Ferienliste = [];
      this.Urlaubfreigabenliste = [];
      this.Homeofficefreigabenliste = [];
      this.CurrentMonatindex = (0, moment_1.default)().month();
      this.FirstMonatIndex = this.CurrentMonatindex - 1;
      this.LastMonatIndex = this.CurrentMonatindex + 1;
      this.CurrentUrlaubzeitspanne = null;
      this.CurrentUrlaubzeitspanne = null;
      this.Laendercode = 'DE';
      this.ShowFeiertage_DE = false;
      this.ShowFeiertage_BG = false;
      this.ShowFerientage_DE = false;
      this.ShowFerientage_BG = false;
      this.Ferienfarbe_DE = this.Const.NONE;
      this.Feiertagefarbe_DE = this.Const.NONE;
      this.UrlaublisteExtern = [];
      this.Vertretrungliste = [];
      this.Urlaubsanfragenanzahl = 0;
      this.Antwortenanzahl = 0;
      this.Vertretungsanfragenanzahl = 0;
      this.Vertretungsantwortenanzahl = 0;
      this.Freigabenanfragenanzahl = 0;
      this.Freigabenantwortenanzahl = 0;
      this.Homeofficeanfragenanzahl = 0;
      this.Homeofficantwortenanzahl = 0;
      this.CurrentHomeofficecounter = 0;
      this.CurrentMitarbeiter = null;
      this.Startjahr = 2024;
      this.CorrectSetup = false;
      this.Officeemailadress = 'office@b-a-e.eu';
      this.Monateliste = ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'];
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Urlaub', 'constructor', this.Debug.Typen.Service);
    }
  }
  SetMitarbeiter(mitarbeiter) {
    try {
      this.CurrentMitarbeiter = lodash.cloneDeep(mitarbeiter);
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SetMitarbeiter', this.Debug.Typen.Service);
    }
  }
  CheckSetup() {
    try {
      let Standort;
      let Mitarbeiter;
      let Urlaubsfreigeberanzahl = 0;
      let Homeofficefreigeberanzahl = 0;
      if (this.CurrentMitarbeiter !== null) {
        Standort = lodash.find(this.Pool.Standorteliste, {
          _id: this.CurrentMitarbeiter.StandortID
        });
        for (let MitarbeterID of Standort.Urlaubfreigabepersonen) {
          Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
            _id: MitarbeterID
          });
          if (!lodash.isUndefined(Mitarbeiter)) Urlaubsfreigeberanzahl++;
        }
        for (let MitarbeterID of Standort.Homeofficefreigabepersonen) {
          Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
            _id: MitarbeterID
          });
          if (!lodash.isUndefined(Mitarbeiter)) Homeofficefreigeberanzahl++;
        }
        this.CorrectSetup = Urlaubsfreigeberanzahl > 0 && Homeofficefreigeberanzahl > 0 && this.CurrentUrlaub.Projektbeteiligteliste.length > 0;
      } else this.CorrectSetup = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckSetup', this.Debug.Typen.Service);
    }
  }
  GetFreigabenliste() {
    try {
      let Urlaub;
      let CountAnfrage;
      let CountAntwort;
      let Standort;
      let PersonOk;
      this.Freigabenanfragenanzahl = 0;
      this.Freigabenantwortenanzahl = 0;
      this.Urlaubfreigabenliste = [];
      this.Homeofficefreigabenliste = [];
      if (this.CurrentMitarbeiter !== null) {
        for (let Mitarbeiter of this.Pool.Mitarbeiterliste) {
          // Urlaub Freigabeanfragen
          /*
          if(Mitarbeiter.Name === 'Enzensberger') {
                     debugger;
          }
           */
          Standort = lodash.find(this.Pool.Standorteliste, {
            _id: Mitarbeiter.StandortID
          });
          Urlaub = lodash.find(Mitarbeiter.Urlaubsliste, urlaub => {
            return urlaub.Jahr === this.CurrentJahr;
          });
          if (!lodash.isUndefined(Urlaub)) {
            CountAnfrage = false;
            CountAntwort = false;
            for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
              Zeitspanne = this.InitUrlaubzeitspanne(Zeitspanne);
              PersonOk = Standort.Urlaubfreigabepersonen.indexOf(this.CurrentMitarbeiter._id) !== -1 && this.CurrentMitarbeiter.Urlaubsfreigaben;
              if (PersonOk && this.CheckUrlaubFreigabeanwortAge(Zeitspanne) === true && (Zeitspanne.Status === this.Urlaubstatusvarianten.Vertreterfreigabe || Zeitspanne.Status === this.Urlaubstatusvarianten.Abgelehnt || Zeitspanne.Status === this.Urlaubstatusvarianten.Genehmigt)) {
                if (lodash.isUndefined(lodash.find(this.Urlaubfreigabenliste, {
                  _id: Mitarbeiter._id
                }))) {
                  this.Urlaubfreigabenliste.push(Mitarbeiter);
                  if (Zeitspanne.Status === this.Urlaubstatusvarianten.Vertreterfreigabe) {
                    CountAnfrage = true;
                  } else {
                    CountAntwort = true;
                  }
                }
              }
            }
            if (CountAnfrage === true) {
              this.Urlaubsanfragenanzahl++;
              this.Freigabenanfragenanzahl++;
            }
            if (CountAntwort === true) {
              this.Freigabenantwortenanzahl++;
            }
          }
          // Homeoffice Freigabeanfragen
          if (!lodash.isUndefined(Urlaub)) {
            for (let Zeitspanne of Urlaub.Homeofficezeitspannen) {
              CountAnfrage = false;
              CountAntwort = false;
              PersonOk = Standort.Homeofficefreigabepersonen.indexOf(this.CurrentMitarbeiter._id) !== -1 && this.CurrentMitarbeiter.Homeofficefreigaben;
              if (PersonOk && this.CheckHomeofficeFreigabeanwortAge(Zeitspanne) === true && (Zeitspanne.Status === this.Homeofficestatusvarianten.Freigabeanfrage || Zeitspanne.Status === this.Homeofficestatusvarianten.Abgelehnt || Zeitspanne.Status === this.Homeofficestatusvarianten.Genehmigt)) {
                if (lodash.isUndefined(lodash.find(this.Homeofficefreigabenliste, {
                  _id: Mitarbeiter._id
                }))) {
                  this.Homeofficefreigabenliste.push(Mitarbeiter);
                  if (Zeitspanne.Status === this.Homeofficestatusvarianten.Freigabeanfrage) CountAnfrage = true; // nur offene Anfragen zaehlen
                  else {
                    CountAntwort = true;
                  }
                }
              }
              if (CountAnfrage === true) {
                this.Homeofficeanfragenanzahl++;
              }
              if (CountAntwort === true) {
                this.Homeofficantwortenanzahl++;
              }
            }
          }
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetFreigabenliste', this.Debug.Typen.Service);
    }
  }
  GetVertretungkonversation(Mitarbeiter, Zeitspanne) {
    try {
      let Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
        VertreterID: Mitarbeiter._id
      });
      if (lodash.isUndefined(Konversation)) return null;else return Konversation;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetVertretungkonversation', this.Debug.Typen.Service);
    }
  }
  CheckVertretungsanwortAge(Zeitspanne) {
    try {
      let Heute = (0, moment_1.default)().locale('de');
      let Datum;
      let Dauer;
      let Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
        VertreterID: this.CurrentMitarbeiter._id
      });
      if (!lodash.isUndefined(Konversation)) {
        if (Konversation.VertreterantwortSended === true) {
          // Wenn Freigabe oder Ablehnung Alter der Antwort prüfen
          if (Konversation.Vertretungantwortzeitstempel === null) {
            return false;
          } else {
            // Alter prüfen
            Datum = (0, moment_1.default)(Konversation.Vertretungantwortzeitstempel).locale('de');
            Dauer = moment_1.default.duration(Heute.diff(Datum)).asMinutes();
            return Dauer <= 5;
          }
        } else return true;
      } else return true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckVertretungsanwortAge', this.Debug.Typen.Service);
    }
  }
  CheckUrlaubFreigabeanwortAge(Zeitspanne) {
    try {
      let Heute = (0, moment_1.default)().locale('de');
      let Datum;
      let Dauer;
      if (Zeitspanne.FreigabeantwortSended === true && (Zeitspanne.Status === this.Urlaubstatusvarianten.Genehmigt || Zeitspanne.Status === this.Urlaubstatusvarianten.Abgelehnt)) {
        // Wenn Freigabe oder Ablehnung Alter der Antwort prüfen
        if (Zeitspanne.Freigabeantwortzeitstempel === null) {
          return false;
        } else {
          // Alter prüfen
          Datum = (0, moment_1.default)(Zeitspanne.Freigabeantwortzeitstempel).locale('de');
          Dauer = moment_1.default.duration(Heute.diff(Datum)).asMinutes();
          return Dauer <= 5;
        }
      } else return true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckUrlaubFreigabeanwortAge', this.Debug.Typen.Service);
    }
  }
  CheckHomeofficeFreigabeanwortAge(Zeitspanne) {
    try {
      let Heute = (0, moment_1.default)().locale('de');
      let Datum;
      let Dauer;
      if (Zeitspanne.FreigabeantwortSended === true && (Zeitspanne.Status === this.Homeofficestatusvarianten.Genehmigt || Zeitspanne.Status === this.Homeofficestatusvarianten.Abgelehnt)) {
        if (Zeitspanne.Freigabeantwortzeitstempel === null) {
          return false;
        } else {
          // Alter prüfen
          Datum = (0, moment_1.default)(Zeitspanne.Freigabeantwortzeitstempel).locale('de');
          Dauer = moment_1.default.duration(Heute.diff(Datum)).asMinutes();
          return Dauer <= 5;
        }
      } else return true;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckHomeofficeFreigabeanwortAge', this.Debug.Typen.Service);
    }
  }
  GetVertretungsanwortAge(Zeitspanne) {
    try {
      let Heute = (0, moment_1.default)().locale('de');
      let Datum;
      let Dauer;
      let Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
        VertreterID: this.CurrentMitarbeiter._id
      });
      if ((Konversation.Status === this.Urlaubstatusvarianten.Vertreterfreigabe || Konversation.Status === this.Urlaubstatusvarianten.Vertreterablehnung) && Konversation.VertreterantwortSended === true) {
        // Wenn Freigabe oder Ablehnung Alter der Antwort prüfen
        if (Konversation.Vertretungantwortzeitstempel === null) {
          return 0;
        } else {
          // Alter prüfen
          Datum = (0, moment_1.default)(Konversation.Vertretungantwortzeitstempel).locale('de');
          Dauer = moment_1.default.duration(Heute.diff(Datum)).asMinutes();
          return Dauer;
        }
      } else return 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetVertretungsanwortAge', this.Debug.Typen.Service);
    }
  }
  CheckMitarbeiterIsVertretung(Mitarbeiter, Zeitspanne) {
    try {
      let Ergo = false;
      let Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
        VertreterID: Mitarbeiter._id
      });
      if (!lodash.isUndefined(Konversation)) {
        if (Konversation.VertreteranfrageSended) {
          Ergo = true;
        }
      }
      return Ergo;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'ChechMitarbeiterIsVertretung', this.Debug.Typen.Service);
    }
  }
  CheckMitarbeiterIsOffeneVertretung(Mitarbeiter, Zeitspanne) {
    try {
      let Ergo = false;
      let Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
        VertreterID: Mitarbeiter._id
      });
      if (!lodash.isUndefined(Konversation)) {
        if (Konversation.VertreteranfrageSended === true && Konversation.VertreterantwortSended === false) {
          Ergo = true;
        }
      }
      return Ergo;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckMitarbeiterIsOffeneVertretung', this.Debug.Typen.Service);
    }
  }
  GetVertretungenliste() {
    try {
      let Urlaub;
      let Vertretung;
      let CountAnfrage;
      let CountAntworten;
      this.Vertretrungliste = [];
      this.Vertretungsantwortenanzahl = 0;
      this.Vertretungsanfragenanzahl = 0;
      if (this.CurrentMitarbeiter !== null) {
        for (let Mitarbeiter of this.Pool.Mitarbeiterliste) {
          if (Mitarbeiter._id !== this.CurrentMitarbeiter._id) {
            Urlaub = lodash.find(Mitarbeiter.Urlaubsliste, {
              Jahr: this.CurrentJahr
            });
            if (!lodash.isUndefined(Urlaub)) {
              CountAnfrage = false;
              CountAntworten = false;
              for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
                Zeitspanne = this.InitUrlaubzeitspanne(Zeitspanne);
                if (Mitarbeiter.Name === 'Hornburger') {
                  //  debugger;
                }
                if (this.CheckMitarbeiterIsVertretung(this.CurrentMitarbeiter, Zeitspanne) === true && this.CheckVertretungsanwortAge(Zeitspanne) === true && (Zeitspanne.Status === this.Urlaubstatusvarianten.Vertreteranfrage || Zeitspanne.Status === this.Urlaubstatusvarianten.Vertreterfreigabe || Zeitspanne.Status === this.Urlaubstatusvarianten.Vertreterablehnung)) {
                  CountAnfrage = this.CheckMitarbeiterIsOffeneVertretung(this.CurrentMitarbeiter, Zeitspanne);
                  CountAntworten = !this.CheckMitarbeiterIsOffeneVertretung(this.CurrentMitarbeiter, Zeitspanne);
                  Vertretung = lodash.find(this.Vertretrungliste, {
                    _id: Mitarbeiter._id
                  });
                  if (lodash.isUndefined(Vertretung)) {
                    this.Vertretrungliste.push(Mitarbeiter);
                  }
                }
              }
              if (CountAnfrage === true) {
                this.Vertretungsanfragenanzahl++;
                this.Urlaubsanfragenanzahl++;
              }
              if (CountAntworten === true) {
                this.Vertretungsantwortenanzahl++;
              }
            }
          }
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetVertretungenliste', this.Debug.Typen.Service);
    }
  }
  GetUrlaubStatuscolor(Zeitspanne) {
    try {
      let Color = 'none';
      let Freigabe;
      switch (Zeitspanne.Status) {
        case this.Urlaubstatusvarianten.Geplant:
          Color = this.Urlaubsfaben.Geplant;
          break;
        case this.Urlaubstatusvarianten.Vertreterfreigabe:
          Color = this.Urlaubsfaben.Vertreterfreigabe;
          break;
        case this.Urlaubstatusvarianten.Vertreterablehnung:
          Color = this.Urlaubsfaben.Vertreterablehnung;
          break;
        case this.Urlaubstatusvarianten.Vertreteranfrage:
          // Blau für Planung
          Color = this.Urlaubsfaben.Vertreteranfrage;
          /*
                     // Lila wenn eine Vertretungsablehnung vorliegt
                     for(let Konversation of Zeitspanne.Vertretungskonversationliste) {
                       if(Konversation.VertreterantwortSended === true && Konversation.Status === this.Urlaubstatusvarianten.Vertreterablehnung) {
                         Color = this.Urlaubsfaben.Vertreterablehnung;
            }
          }
                     // Orange wenn nur Vertretunszusagen vorliegen
                     Freigabe = true;
                     for(let Konversation of Zeitspanne.Vertretungskonversationliste) {
                       if(Konversation.VertreterantwortSended !== true || (Konversation.VertreterantwortSended === true && Konversation.Status !== this.Urlaubstatusvarianten.Vertreterfreigabe)) Freigabe = false;
          }
                     if(Freigabe) Color = this.Urlaubsfaben.Vertreterfreigabe;
                      */
          break;
        case this.Urlaubstatusvarianten.Genehmigt:
          Color = this.Urlaubsfaben.Genehmigt;
          break;
        case this.Urlaubstatusvarianten.Abgelehnt:
          Color = this.Urlaubsfaben.Abgelehnt;
          break;
        default:
          Color = '#00FFFF';
          break;
      }
      return Color;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetUrlaubStatuscolor', this.Debug.Typen.Page);
    }
  }
  GetUrlaubStatuscolorSplit(Zeitspanne, checkanfragesended) {
    try {
      let Color = 'none';
      let Anfrage;
      switch (Zeitspanne.Status) {
        case this.Urlaubstatusvarianten.Geplant:
          Color = this.Urlaubsfaben.Geplant;
          break;
        case this.Urlaubstatusvarianten.Vertreterfreigabe:
          Color = this.Urlaubsfaben.Vertreterfreigabe;
          break;
        case this.Urlaubstatusvarianten.Vertreterablehnung:
          Color = this.Urlaubsfaben.Vertreterablehnung;
          break;
        case this.Urlaubstatusvarianten.Vertreteranfrage:
          Anfrage = false;
          for (let Konversation of Zeitspanne.Vertretungskonversationliste) {
            if ((Konversation.VertreteranfrageSended === true || checkanfragesended === false) && Konversation.Status === this.Urlaubstatusvarianten.Vertreteranfrage) {
              Anfrage = true;
            }
          }
          if (Anfrage) Color = this.Urlaubsfaben.Vertreteranfrage;else Color = this.Urlaubsfaben.Vertreterablehnung;
          break;
        case this.Urlaubstatusvarianten.Genehmigt:
          Color = this.Urlaubsfaben.Genehmigt;
          break;
        case this.Urlaubstatusvarianten.Abgelehnt:
          Color = this.Urlaubsfaben.Abgelehnt;
          break;
        default:
          Color = '#00FFFF';
          break;
      }
      return Color;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetUrlaubStatuscolorSplit', this.Debug.Typen.Page);
    }
  }
  GetHomeofficeStatuscolor(status) {
    try {
      let Color = 'none';
      switch (status) {
        case this.Homeofficestatusvarianten.Geplant:
          Color = this.Homeofficefarben.Geplant;
          break;
        case this.Homeofficestatusvarianten.Freigabeanfrage:
          Color = this.Homeofficefarben.Freigabeanfrage;
          break;
        case this.Homeofficestatusvarianten.Genehmigt:
          Color = this.Homeofficefarben.Genehmigt;
          break;
        case this.Homeofficestatusvarianten.Abgelehnt:
          Color = this.Homeofficefarben.Abgelehnt;
          break;
        default:
          Color = '#00FFFF';
          break;
      }
      return Color;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetHomeofficeStatuscolor', this.Debug.Typen.Page);
    }
  }
  UpdateVertreteranfragen() {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        let Vertretung;
        let Heute = (0, moment_1.default)();
        let VertreterIDListe = [];
        let CurrentUrlaubzeitspannen = [];
        let UpdatedZeitspannen = [];
        let Index = 0;
        let Empfaengerliste = [];
        let Freigebender;
        let Standort = lodash.find(_this.Pool.Standorteliste, {
          _id: _this.CurrentMitarbeiter.StandortID
        });
        let Empfaengerlistetext = '';
        for (let FreigeberID of Standort.Urlaubfreigabepersonen) {
          Freigebender = lodash.find(_this.Pool.Mitarbeiterliste, {
            _id: FreigeberID
          });
          if (!lodash.isUndefined(Freigebender)) {
            Empfaengerliste.push({
              emailAddress: {
                address: Freigebender.Email,
                name: Freigebender.Vorname + ' ' + Freigebender.Name
              }
            });
            Empfaengerlistetext += Freigebender.Vorname + ' ' + Freigebender.Name;
            if (Index < Standort.Urlaubfreigabepersonen.length - 1) Empfaengerlistetext += ', ';
            Index++;
          }
        }
        for (let Zeitspanne of _this.CurrentUrlaub.Urlaubzeitspannen) {
          if (Zeitspanne.Status === _this.Urlaubstatusvarianten.Geplant) {
            for (let CurrentVertreterID of Zeitspanne.UrlaubsvertreterIDListe) {
              if (lodash.indexOf(VertreterIDListe, CurrentVertreterID) === -1) {
                VertreterIDListe.push(CurrentVertreterID);
              }
            }
          }
        }
        for (let VertreterID of VertreterIDListe) {
          CurrentUrlaubzeitspannen = [];
          Vertretung = lodash.find(_this.Pool.Mitarbeiterliste, {
            _id: VertreterID
          });
          if (!lodash.isUndefined(Vertretung)) {
            for (let Zeitspanne of _this.CurrentUrlaub.Urlaubzeitspannen) {
              if (Zeitspanne.Status === _this.Urlaubstatusvarianten.Geplant && Zeitspanne.UrlaubsvertreterIDListe.indexOf(VertreterID) !== -1) {
                CurrentUrlaubzeitspannen.push(Zeitspanne);
                // Zeitspanne.Status         = this.Urlaubstatusvarianten.Vertreteranfrage;
                // Zeitspanne.Planungmeldung = Heute.format('DD.MM.YYYY') + ' Vertretungsanfrage wurde an ' + Vertretung.Vorname + ' ' + Vertretung.Name + ' gesendet.';
              }
            }
            CurrentUrlaubzeitspannen = yield _this.SendVertreteranfragen(_this.CurrentMitarbeiter, Vertretung, CurrentUrlaubzeitspannen);
            UpdatedZeitspannen = UpdatedZeitspannen.concat(CurrentUrlaubzeitspannen);
          }
        }
        for (let Zeitspanne of UpdatedZeitspannen) {
          if (Zeitspanne.Status === _this.Urlaubstatusvarianten.Geplant) {
            Zeitspanne.Status = _this.Urlaubstatusvarianten.Vertreteranfrage;
          }
        }
        for (let Zeitspanne of _this.CurrentUrlaub.Urlaubzeitspannen) {
          if (Zeitspanne.Betriebsurlaub === true && Zeitspanne.Status === _this.Urlaubstatusvarianten.Geplant && Zeitspanne.FreigabeanfrageSended === false) {
            Zeitspanne.Status = _this.Urlaubstatusvarianten.Vertreterfreigabe;
            Zeitspanne.Planungmeldung = Heute.format('DD.MM.YYYY') + ' Betrieburlaub Freigabe Anfrage wurde an ' + Empfaengerlistetext + ' gesendet.';
            Zeitspanne.Freigabemeldung = 'Anfrage Betriebsurlaub';
            yield _this.SendBetriebsurlaubFreigabeanfrage(_this.CurrentMitarbeiter, _this.CurrentUrlaub);
            UpdatedZeitspannen.push(Zeitspanne);
          }
        }
        for (let Zeitspanne of UpdatedZeitspannen) {
          Index = lodash.findIndex(_this.CurrentUrlaub.Urlaubzeitspannen, {
            ZeitspannenID: Zeitspanne.ZeitspannenID
          });
          _this.CurrentUrlaub.Urlaubzeitspannen[Index] = Zeitspanne;
        }
        let Urlaubindex = lodash.findIndex(_this.CurrentMitarbeiter.Urlaubsliste, {
          Jahr: _this.CurrentJahr
        });
        _this.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = _this.CurrentUrlaub;
        yield _this.DBMitarbeiter.UpdateMitarbeiterUrlaub(_this.CurrentMitarbeiter);
        _this.UrlaubStatusChanged.emit();
      } catch (error) {
        _this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'UpdateVertreteranfragen', _this.Debug.Typen.Service);
      }
    })();
  }
  UpdateHomeofficefreigabeanfragen() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        let Freigeberliste;
        let CurrentHomeofficezeitspannen = [];
        let UpdatedHomeofficezeitspannen = [];
        let Index;
        let Standort;
        let Mitarbeiter;
        // Vertretung                   = lodash.find(this.Pool.Mitarbeiterliste, {_id: this.CurrentUrlaub.UrlaubsfreigeberID});
        CurrentHomeofficezeitspannen = [];
        Freigeberliste = [];
        Standort = lodash.find(_this2.Pool.Standorteliste, {
          _id: _this2.CurrentMitarbeiter.StandortID
        });
        for (let MitarbeiterID of Standort.Homeofficefreigabepersonen) {
          Mitarbeiter = lodash.find(_this2.Pool.Mitarbeiterliste, {
            _id: MitarbeiterID
          });
          if (!lodash.isUndefined(Mitarbeiter)) Freigeberliste.push(Mitarbeiter);
        }
        for (let Zeitspanne of _this2.CurrentUrlaub.Homeofficezeitspannen) {
          if (Zeitspanne.Status === _this2.Homeofficestatusvarianten.Geplant) {
            Zeitspanne.Status = _this2.Homeofficestatusvarianten.Freigabeanfrage;
            UpdatedHomeofficezeitspannen.push(Zeitspanne);
          } else {
            CurrentHomeofficezeitspannen.push(Zeitspanne);
          }
        }
        UpdatedHomeofficezeitspannen = yield _this2.SendHomeofficefreigabeanfrage(_this2.CurrentMitarbeiter, Freigeberliste, UpdatedHomeofficezeitspannen);
        CurrentHomeofficezeitspannen = CurrentHomeofficezeitspannen.concat(UpdatedHomeofficezeitspannen);
        for (let Zeitspanne of CurrentHomeofficezeitspannen) {
          Index = lodash.findIndex(_this2.CurrentUrlaub.Homeofficezeitspannen, {
            ZeitspannenID: Zeitspanne.ZeitspannenID
          });
          _this2.CurrentUrlaub.Homeofficezeitspannen[Index] = Zeitspanne;
        }
        let Urlaubindex = lodash.findIndex(_this2.CurrentMitarbeiter.Urlaubsliste, {
          Jahr: _this2.CurrentJahr
        });
        _this2.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = _this2.CurrentUrlaub;
        yield _this2.DBMitarbeiter.UpdateMitarbeiterUrlaub(_this2.CurrentMitarbeiter);
        _this2.HomeofficeStatusChanged.emit();
      } catch (error) {
        _this2.Debug.ShowErrorMessage(error, 'Database Urlaub', 'UpdateHomeofficefreigabeanfragen', _this2.Debug.Typen.Service);
      }
    })();
  }
  CheckUrlaubsfreigeberAvailable(Mitarbeiter) {
    try {
      let Standort = lodash.find(this.Pool.Standorteliste, {
        _id: Mitarbeiter.StandortID
      });
      return Standort.Urlaubfreigabepersonen.indexOf(this.CurrentMitarbeiter._id) !== -1;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckUrlaubsfreigeberAvailable', this.Debug.Typen.Service);
    }
  }
  CheckHomeofficefreigeberAvailable(Mitarbeiter) {
    try {
      let Standort = lodash.find(this.Pool.Standorteliste, {
        _id: Mitarbeiter.StandortID
      });
      if (this.Pool.Mitarbeiterdaten.Planeradministrator === true) return true;else return Standort.Homeofficefreigabepersonen.indexOf(this.Pool.Mitarbeiterdaten._id) !== -1;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckHomeofficefreigeberAvailable', this.Debug.Typen.Service);
    }
  }
  CountUrlaubsvertretungen(Mitarbeiter) {
    try {
      let Standort = lodash.find(this.Pool.Standorteliste, {
        _id: Mitarbeiter.StandortID
      });
      return Standort.Urlaubfreigabepersonen.length; //
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CountUrlaubsvertretungen', this.Debug.Typen.Service);
    }
  }
  UpdateVertreterantworten(Mitarbeiter, Urlaub) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        let Gesamtanzahl = 1;
        let Heute = (0, moment_1.default)().locale('de');
        let Freigebender;
        let Freigeberlistetext = '';
        let Index = 0;
        let Standort = lodash.find(_this3.Pool.Standorteliste, {
          _id: Mitarbeiter.StandortID
        });
        let Konversation;
        let FreigabeReady;
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
            VertreterID: _this3.CurrentMitarbeiter._id
          });
          if (!lodash.isUndefined(Konversation)) {
            if (Konversation.Status === _this3.Urlaubstatusvarianten.Vertreterablehnung && Konversation.VertreterantwortSended === false) Gesamtanzahl += 1;
            if (Konversation.Status === _this3.Urlaubstatusvarianten.Vertreterfreigabe && Konversation.VertreterantwortSended === false) Gesamtanzahl += 2;
          }
        }
        for (let FreigeberID of Standort.Urlaubfreigabepersonen) {
          Freigebender = lodash.find(_this3.Pool.Mitarbeiterliste, {
            _id: FreigeberID
          });
          if (!lodash.isUndefined(Freigebender)) {
            Freigeberlistetext += Freigebender.Vorname + ' ' + Freigebender.Name;
            if (Index < Standort.Urlaubfreigabepersonen.length - 1) Freigeberlistetext += ', ';
            Index++;
          }
        }
        debugger;
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
            VertreterID: _this3.CurrentMitarbeiter._id
          });
          if (!lodash.isUndefined(Konversation)) {
            if (Konversation.Status !== _this3.Urlaubstatusvarianten.Vertreteranfrage && Konversation.VertreterantwortSended === false) {
              if (Konversation.Status === _this3.Urlaubstatusvarianten.Vertreterfreigabe) {
                Zeitspanne.Planungmeldung = _this3.CurrentMitarbeiter.Vorname + ' ' + _this3.CurrentMitarbeiter.Name + ' hat der Urlausvertretung am ' + Heute.format('DD.MM.YYYY') + ' zugestimmt.';
                Zeitspanne.Planungmeldung += '<br>Urlaubsfreigabe Anfrage wurde an ' + Freigeberlistetext + ' gesendet.';
              }
              if (Konversation.Status === _this3.Urlaubstatusvarianten.Vertreterablehnung) {
                Konversation.Vertretungmeldung = _this3.CurrentMitarbeiter.Vorname + ' ' + _this3.CurrentMitarbeiter.Name + ' hat die Vertretung am ' + Heute.format('DD.MM.YYYY') + ' abgelehnt';
              }
            }
          }
        }
        Urlaub = yield _this3.SendVertreterzusage(Mitarbeiter, Urlaub);
        Urlaub = yield _this3.SendVertreterabsage(Mitarbeiter, Urlaub);
        FreigabeReady = false;
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          for (Konversation of Zeitspanne.Vertretungskonversationliste) {
            if (Konversation.VertreterantwortSended === true && Konversation.Status === _this3.Urlaubstatusvarianten.Vertreterfreigabe) {
              FreigabeReady = true;
            }
          }
        }
        if (FreigabeReady) Urlaub = yield _this3.SendFreigabeanfrage(Mitarbeiter, Urlaub);
        let Urlaubindex = lodash.findIndex(Mitarbeiter.Urlaubsliste, {
          Jahr: _this3.CurrentJahr
        });
        Mitarbeiter.Urlaubsliste[Urlaubindex] = Urlaub;
        yield _this3.DBMitarbeiter.UpdateMitarbeiterUrlaub(Mitarbeiter);
      } catch (error) {
        _this3.Debug.ShowErrorMessage(error, 'Database Urlaub', 'UpdateVertreterantworten', _this3.Debug.Typen.Service);
      }
    })();
  }
  SendVertreteranfragen(Mitarbeiter, Vertretung, Urlaubzeitspannen) {
    try {
      let Betreff = 'Urlaubsvertretungsanfrage von ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name;
      let Nachricht;
      let Empfaenger = [];
      let SendMail = false;
      let Heute = (0, moment_1.default)().locale('de');
      let Konversation;
      let Zeitspannenanzahl = 0;
      return new Promise((resolve, reject) => {
        Nachricht = "Hallo " + Vertretung.Vorname + ",<br><br>bitte prüfen, ob du für folgende Zeiträume:<br><br>";
        Nachricht += '<table border="1">';
        Nachricht += '<tr>';
        Nachricht += '<td style="width: 100px; text-align: center"><b>Von</b></td><td style="width: 100px; text-align: center"><b>Bis</b></td>';
        for (let Zeitspanne of Urlaubzeitspannen) {
          Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
            VertreterID: Vertretung._id
          });
          if (Zeitspanne.Status === this.Urlaubstatusvarianten.Geplant && Konversation.VertreteranfrageSended === false) {
            SendMail = true;
            Konversation.Vertretunganfragezeitstempel = Heute.valueOf();
            Konversation.VertreteranfrageSended = true;
            Konversation.Status = this.Urlaubstatusvarianten.Vertreteranfrage;
            Konversation.Vertretungmeldung = 'Vertretungsanfrage wurde am ' + Heute.format('DD.MM.YY') + ' an ' + Vertretung.Vorname + ' ' + Vertretung.Name + ' gesendet.';
            Zeitspanne.Planungmeldung = Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' hat dir am ' + Heute.format('DD.MM.YY') + ' eine Vertretungsanfrage gesendet.';
            Nachricht += '<tr>';
            Nachricht += '<td style="text-align: center">' + Zeitspanne.Startstring + '</td>';
            Nachricht += '<td style="text-align: center">' + Zeitspanne.Endestring + '</td>';
            Nachricht += '</tr>';
            Zeitspannenanzahl++;
          }
        }
        console.log('Vertreteranfrage an: ' + Vertretung.Name + ' | ' + Zeitspannenanzahl + ' Stück');
        Nachricht += '</table>';
        Nachricht += '<br>Die Urlaubsvertretung für mich übernehmen kannst.<br><br>';
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(Mitarbeiter, true);
        Empfaenger.push({
          emailAddress: {
            address: Vertretung.Email,
            name: Vertretung.Vorname + ' ' + Vertretung.Name
          }
        });
        if (SendMail) {
          this.Graph.SendMail(Empfaenger, Betreff, Nachricht).then(() => {
            console.log('Vertretungsanfrage wurde an ' + Vertretung.Vorname + ' ' + Vertretung.Name + ' gesendet.');
            resolve(Urlaubzeitspannen);
          }).catch(error => {
            reject(error);
          });
        } else {
          console.log('Es wurde keine Vertretungsanfrage gesendet.');
          resolve(Urlaubzeitspannen);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendVertreteranfragen', this.Debug.Typen.Service);
    }
  }
  SendVertreterreminder(Vertretung) {
    try {
      let Betreff = 'Vertretungsanfragen in der Urlaubsplaner App';
      let Nachricht;
      let Empfaenger = [];
      return new Promise((resolve, reject) => {
        Nachricht = "Hallo " + Vertretung.Vorname + ",<br><br>es gibt neue Vertretungsanfragen für dich.<br>";
        Nachricht += "Bitte prüfe die Anfragen in der App.";
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(this.Pool.Mitarbeiterdaten, true);
        Empfaenger.push({
          emailAddress: {
            address: Vertretung.Email,
            name: Vertretung.Vorname + ' ' + Vertretung.Name
          }
        });
        this.Graph.SendMail(Empfaenger, Betreff, Nachricht).then(() => {
          console.log('Vertretungserinnerung wurde an ' + Vertretung.Vorname + ' ' + Vertretung.Name + ' gesendet.');
          resolve(true);
        }).catch(error => {
          reject(error);
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendVertreterreminder', this.Debug.Typen.Service);
    }
  }
  SendFreigabereminder(Freigeber) {
    try {
      let Betreff = 'Urlaubsfreigaben Anfragen in der Urlaubsplaner App';
      let Nachricht;
      let Empfaenger = [];
      return new Promise((resolve, reject) => {
        Nachricht = "Hallo " + Freigeber.Vorname + ",<br><br>es gibt neue Anfragen für Urlaubsfreigaben.<br>";
        Nachricht += "Bitte prüfe die Anfragen in der App.";
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(this.Pool.Mitarbeiterdaten, true);
        Empfaenger.push({
          emailAddress: {
            address: Freigeber.Email,
            name: Freigeber.Vorname + ' ' + Freigeber.Name
          }
        });
        this.Graph.SendMail(Empfaenger, Betreff, Nachricht).then(() => {
          console.log('Freigebererinnerung wurde an ' + Freigeber.Vorname + ' ' + Freigeber.Name + ' gesendet.');
          resolve(true);
        }).catch(error => {
          reject(error);
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendFreigabereminder', this.Debug.Typen.Service);
    }
  }
  SendHomeofficefreigabeanfrage(Mitarbeiter, Freigeberliste, Urlaubzeitspannen) {
    try {
      let Betreff = 'Homeofficefreigabeanfrage von ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name;
      let Nachricht = '';
      let Empfaenger = [];
      let SendMail = false;
      return new Promise((resolve, reject) => {
        for (let Freigabe of Freigeberliste) {
          Nachricht += "Hallo " + Freigabe.Vorname + ",<br>";
        }
        Nachricht += '<br>bitte folgende Homeofficetage freigeben:<br><br>';
        Nachricht += '<table border="1" cellpadding="0" cellspacing="0">';
        Nachricht += '<tr>';
        Nachricht += '<td style="width: 500px; padding: 4px;">';
        for (let Zeitspanne of Urlaubzeitspannen) {
          if (Zeitspanne.Status === this.Homeofficestatusvarianten.Freigabeanfrage && Zeitspanne.FreigabeanfrageSended === false) {
            SendMail = true;
            Zeitspanne.FreigabeanfrageSended = true;
            Nachricht += '<span>';
            Nachricht += Zeitspanne.Startstring + ', ';
            Nachricht += '</span>';
          }
        }
        Nachricht += '</td>';
        Nachricht += '</tr>';
        Nachricht += '</table>';
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(Mitarbeiter, true);
        for (let Freigeber of Freigeberliste) {
          Empfaenger.push({
            emailAddress: {
              address: Freigeber.Email,
              name: Freigeber.Vorname + ' ' + Freigeber.Name
            }
          });
        }
        if (SendMail) {
          this.Graph.SendMail(Empfaenger, Betreff, Nachricht).then(() => {
            for (let Freigeber of Freigeberliste) {
              console.log('Homeofficefreigabeanfrage wurde an ' + Freigeber.Vorname + ' ' + Freigeber.Name + ' gesendet.');
            }
            resolve(Urlaubzeitspannen);
          }).catch(error => {
            reject(error);
          });
        } else {
          console.log('Es wurden keine Homeofficefreigabeanfragen gesendet.');
          resolve(Urlaubzeitspannen);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendHomeofficefreigabeanfrage', this.Debug.Typen.Service);
    }
  }
  SendVertreterzusage(Mitarbeiter, Urlaub) {
    try {
      let Betreff = 'Vertretungszusage von ' + this.CurrentMitarbeiter.Vorname + ' ' + this.CurrentMitarbeiter.Name;
      let Nachricht;
      let Empfaenger = [];
      let SendAntwort = false;
      let Heute = (0, moment_1.default)().locale('de');
      let Konversation;
      return new Promise((resolve, reject) => {
        Nachricht = "Hallo " + Mitarbeiter.Vorname + ",<br><br>nachfolgende Urlaubsvertretungen kann ich gerne wahrnehmen:<br><br>";
        Nachricht += '<table border="1">';
        Nachricht += '<tr>';
        Nachricht += '<td style="width: 100px; text-align: center"><b>Von</b></td><td style="width: 100px; text-align: center"><b>Bis</b></td><td><b>Vertretung</b></td>';
        Nachricht += '</tr>';
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
            VertreterID: this.CurrentMitarbeiter._id
          });
          if (!lodash.isUndefined(Konversation)) {
            if (Konversation.Status === this.Urlaubstatusvarianten.Vertreterfreigabe && Konversation.VertreterantwortSended === false) {
              SendAntwort = true;
              Zeitspanne.Status = this.Urlaubstatusvarianten.Vertreterfreigabe;
              Konversation.VertreterantwortSended = true;
              Konversation.Vertretungmeldung = this.CurrentMitarbeiter.Vorname + ' ' + this.CurrentMitarbeiter.Name + ' hat der Vertretung am ' + Heute.format('DD.MM.YY') + ' zugestimmt.';
              Konversation.Vertretungantwortzeitstempel = Heute.valueOf();
              // Alle anderen Konversationen herausfiltern
              Zeitspanne.Vertretungskonversationliste = [Konversation];
              Zeitspanne.UrlaubsvertreterIDListe = [Konversation.VertreterID];
              Nachricht += '<tr>';
              Nachricht += '<td style="text-align: center">' + Zeitspanne.Startstring + '</td>';
              Nachricht += '<td style="text-align: center">' + Zeitspanne.Endestring + '</td>';
              Nachricht += '<td style="color: green;">Zusage</td>';
              Nachricht += '</tr>';
            }
          }
        }
        Nachricht += '</table>';
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(this.CurrentMitarbeiter, true);
        Empfaenger.push({
          emailAddress: {
            address: Mitarbeiter.Email,
            name: Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name
          }
        });
        if (SendAntwort === true) {
          this.Graph.SendMail(Empfaenger, Betreff, Nachricht).then(() => {
            console.log('Vertretungszusage wurde an ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' gesendet.');
            resolve(Urlaub);
          }).catch(error => {
            reject(error);
          });
        } else {
          console.log('Es wurde keine Vertretungszusage gesendet.');
          resolve(Urlaub);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendVertreterzusage', this.Debug.Typen.Service);
    }
  }
  SendHomeofficeFreigabeantworten(Mitarbeiter, Urlaub) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        let Freigebender = lodash.cloneDeep(_this4.Pool.Mitarbeiterdaten); //  lodash.find(this.Pool.Mitarbeiterliste, {_id: Urlaub.HomeofficefreigeberID});
        Urlaub = yield _this4.SendMitarbeiterHomeofficeFreigabeablehnung(Mitarbeiter, Freigebender, Urlaub);
        Urlaub = yield _this4.SendMitarbeiterHomeofficeFreigabezusage(Mitarbeiter, Freigebender, Urlaub);
        let Urlaubindex = lodash.findIndex(Mitarbeiter.Urlaubsliste, {
          Jahr: _this4.CurrentJahr
        });
        Mitarbeiter.Urlaubsliste[Urlaubindex] = Urlaub;
        if (Mitarbeiter._id === _this4.CurrentMitarbeiter._id) _this4.CurrentMitarbeiter = Mitarbeiter;
        yield _this4.DBMitarbeiter.UpdateMitarbeiterUrlaub(Mitarbeiter);
      } catch (error) {
        _this4.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendHomeofficeFreigabeantworten', _this4.Debug.Typen.Service);
      }
    })();
  }
  UpdateFreigabenantworten(Mitarbeiter, Urlaub) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        let Gesamtanzahl = 1;
        let Heute = (0, moment_1.default)().locale('de');
        let Freigebender;
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          if (Zeitspanne.Status === _this5.Urlaubstatusvarianten.Genehmigt && Zeitspanne.FreigabeantwortSended === false) Gesamtanzahl += 1;
          if (Zeitspanne.Status === _this5.Urlaubstatusvarianten.Abgelehnt && Zeitspanne.FreigabeantwortSended === false) Gesamtanzahl += 2;
        }
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          if (Zeitspanne.Status === _this5.Urlaubstatusvarianten.Genehmigt || Zeitspanne.Status === _this5.Urlaubstatusvarianten.Abgelehnt) {
            Freigebender = lodash.cloneDeep(_this5.Pool.Mitarbeiterdaten); //  lodash.find(this.Pool.Mitarbeiterliste, { _id: Urlaub.UrlaubsfreigeberID });
            // Vertretung   = lodash.find(this.Pool.Mitarbeiterliste, { _id: Zeitspanne.UrlaubsvertreterID });
            if (Zeitspanne.Status === _this5.Urlaubstatusvarianten.Genehmigt) {
              Zeitspanne.Planungmeldung = Heute.format('DD.MM.YYYY') + ' Der Urlaub wurde durch ' + Freigebender.Vorname + ' ' + Freigebender.Name + ' genehmigt.';
              Zeitspanne.Freigabemeldung = Heute.format('DD.MM.YYYY') + ' Urlaubsfreigabe wurde an ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' gesendet.';
              Zeitspanne.Freigabemeldung += '<br>' + Heute.format('DD.MM.YYYY') + ' Urlaubsfreigabe wurde an das Office gesendet.';
            }
            if (Zeitspanne.Status === _this5.Urlaubstatusvarianten.Abgelehnt) {
              Zeitspanne.Planungmeldung = Heute.format('DD.MM.YYYY') + ' Der Urlaub wurde durch ' + Freigebender.Vorname + ' ' + Freigebender.Name + ' abgelehnt.';
              Zeitspanne.Freigabemeldung = Heute.format('DD.MM.YYYY') + ' Urlaubsablehnung wurde an ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' gesendet.';
            }
          }
        }
        Urlaub = yield _this5.SendMitarbeiterFreigabeablehnung(Mitarbeiter, Freigebender, Urlaub);
        Urlaub = yield _this5.SendMitarbeiterFreigabezusage(Mitarbeiter, Freigebender, Urlaub);
        Urlaub = yield _this5.SendOfficeFreigabezusage(Mitarbeiter, Freigebender, Urlaub);
        let Urlaubindex = lodash.findIndex(Mitarbeiter.Urlaubsliste, {
          Jahr: _this5.CurrentJahr
        });
        Mitarbeiter.Urlaubsliste[Urlaubindex] = Urlaub;
        _this5.CurrentUrlaub = Urlaub;
        yield _this5.DBMitarbeiter.UpdateMitarbeiterUrlaub(Mitarbeiter);
      } catch (error) {
        _this5.Debug.ShowErrorMessage(error, 'Database Urlaub', 'UpdateFreigabenantworten', _this5.Debug.Typen.Service);
      }
    })();
  }
  SendVertreterabsage(Mitarbeiter, Urlaub) {
    try {
      let Betreff = 'Vertretungsabsage von ' + this.CurrentMitarbeiter.Vorname + ' ' + this.CurrentMitarbeiter.Name;
      let Nachricht;
      let Empfaenger = [];
      let SendAntwort = false;
      let Heute = (0, moment_1.default)().locale('de');
      let Konversation;
      let NextKonversation;
      let NextMitarbeiter;
      let Color;
      let Status;
      let GoOn;
      return new Promise((resolve, reject) => {
        Nachricht = "Hallo " + Mitarbeiter.Vorname + ",<br><br>nachfolgende Urlaubsvertretungen kann ich leider nicht wahrnehmen:<br><br>";
        Nachricht += '<table border="1">';
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
            VertreterID: this.CurrentMitarbeiter._id
          });
          debugger;
          if (!lodash.isUndefined(Konversation)) {
            // Zeitspanne.UrlaubsvertreterID === Vertretung._id &&
            if (Konversation.Status === this.Urlaubstatusvarianten.Vertreterablehnung && Konversation.VertreterantwortSended === false) {
              SendAntwort = true;
              Konversation.VertreterantwortSended = true;
              Konversation.Vertretungmeldung = this.CurrentMitarbeiter.Vorname + ' ' + this.CurrentMitarbeiter.Name + ' hat die Vertretung am ' + Heute.format('DD.MM.YY') + ' abgelehnt.';
              Konversation.Vertretungantwortzeitstempel = Heute.valueOf();
              Nachricht += '<tr>';
              Nachricht += '<td><b>Von</b></td><td style="text-align: center"><b>Bis</b></td>';
              Nachricht += '</tr>';
              Nachricht += '<tr>';
              Nachricht += '<td>' + Zeitspanne.Startstring + '</td>';
              Nachricht += '<td>' + Zeitspanne.Endestring + '</td>';
              Nachricht += '</tr>';
              Nachricht += '<tr>';
              Nachricht += '<td><b>Vertretung</b></td><td style="text-align: center"><b>Status</b></td></td>';
              Nachricht += '</tr>';
            }
            GoOn = false;
            for (NextKonversation of Zeitspanne.Vertretungskonversationliste) {
              NextMitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
                _id: NextKonversation.VertreterID
              });
              Color = NextKonversation.Status === this.Urlaubstatusvarianten.Vertreteranfrage ? 'green' : 'red';
              Status = NextKonversation.Status === this.Urlaubstatusvarianten.Vertreteranfrage ? 'offen' : 'abgelehnt';
              if (NextKonversation.Status === this.Urlaubstatusvarianten.Vertreteranfrage) {
                Zeitspanne.Status = this.Urlaubstatusvarianten.Vertreteranfrage;
              }
              Nachricht += '<tr>';
              Nachricht += '<td>' + NextMitarbeiter.Vorname + ' ' + NextMitarbeiter.Name + '</td>';
              Nachricht += '<td style="color:' + Color + '">' + Status + '</td>';
              Nachricht += '</tr>';
            }
          }
          GoOn = false;
          debugger;
          /*
                     for(Konversation of Zeitspanne.Vertretungskonversationliste) {
                       if(Konversation.Status === this.Urlaubstatusvarianten.Vertreteranfrage) GoOn = true;
          }
                     if(GoOn === false) {
                       Zeitspanne.Status = this.Urlaubstatusvarianten.Vertreterablehnung;
          }
                      */
        }
        Nachricht += '</table>';
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(this.CurrentMitarbeiter, true);
        Empfaenger.push({
          emailAddress: {
            address: Mitarbeiter.Email,
            name: Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name
          }
        });
        GoOn = false;
        if (SendAntwort === true) {
          this.Graph.SendMail(Empfaenger, Betreff, Nachricht).then(() => {
            console.log('Vertretungsabsage wurde an ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' gesendet.');
            resolve(Urlaub);
          }).catch(error => {
            reject(error);
          });
        } else {
          console.log('Es wurde keine Vertretungsabsage gesendet.');
          resolve(Urlaub);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendVertreterabsage', this.Debug.Typen.Service);
    }
  }
  SendFreigabeanfrage(Mitarbeiter, Urlaub) {
    try {
      let Betreff = 'Anfrage Urlaubsfreigabe von ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name;
      let Nachricht;
      let Empfaengerliste = [];
      let SendAntwort = false;
      let Vertreter;
      let Heute = (0, moment_1.default)().locale('de');
      let Freigebender;
      let Index;
      let Standort = lodash.find(this.Pool.Standorteliste, {
        _id: Mitarbeiter.StandortID
      });
      let Konversation;
      for (let FreigeberID of Standort.Urlaubfreigabepersonen) {
        Freigebender = lodash.find(this.Pool.Mitarbeiterliste, {
          _id: FreigeberID
        });
        if (!lodash.isUndefined(Freigebender)) {
          Empfaengerliste.push({
            emailAddress: {
              address: Freigebender.Email,
              name: Freigebender.Vorname + ' ' + Freigebender.Name
            }
          });
        }
      }
      return new Promise((resolve, reject) => {
        Nachricht = '';
        for (let Eintrag of Empfaengerliste) {
          Nachricht += "Hallo " + Eintrag.emailAddress.name + ",<br>";
        }
        Nachricht += "<br>";
        Nachricht += "es liegen neue Anfragen zur Urlaufsfreigabe von ";
        Nachricht += Mitarbeiter.Vorname + " " + Mitarbeiter.Name + " vor:<br><br>";
        Nachricht += '<table border="1">';
        Nachricht += '<tr>';
        Nachricht += '<td style="width: 100px; text-align: center"><b>Von</b></td><td style="width: 100px; text-align: center"><b>Bis</b></td><td>Vertretung</td>';
        Nachricht += '</tr>';
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          for (Konversation of Zeitspanne.Vertretungskonversationliste) {
            Konversation.Vertretungmeldung = '';
          }
          Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
            Status: this.Urlaubstatusvarianten.Vertreterfreigabe
          });
          if (!lodash.isUndefined(Konversation)) {
            if (Zeitspanne.FreigabeanfrageSended === false) {
              SendAntwort = true;
              Zeitspanne.Status = this.Urlaubstatusvarianten.Vertreterfreigabe;
              Zeitspanne.FreigabeanfrageSended = true;
              Zeitspanne.Freigabeantwortzeitstempel = Heute.valueOf();
              Nachricht += '<tr>';
              Nachricht += '<td style="text-align: center">' + Zeitspanne.Startstring + '</td>';
              Nachricht += '<td style="text-align: center">' + Zeitspanne.Endestring + '</td>';
              Nachricht += '<td>';
              Konversation.Vertretungmeldung = 'Urlaubsfreigabe Anfrage wurde am ' + Heute.format('DD.MM.YY') + ' an ';
              Index = 0;
              for (let Empfaenger of Empfaengerliste) {
                Konversation.Vertretungmeldung += Empfaenger.emailAddress.name;
                if (Index < Empfaengerliste.length - 1) Konversation.Vertretungmeldung += ', ';
                Index++;
              }
              Konversation.Vertretungmeldung += ' gesendet.';
              Vertreter = lodash.find(this.Pool.Mitarbeiterliste, {
                _id: Konversation.VertreterID
              });
              if (!lodash.isUndefined(Vertreter)) {
                Nachricht += Vertreter.Vorname + ' ' + Vertreter.Name + '<br>';
              }
              Nachricht += '</td>';
              Nachricht += '</tr>';
            }
          }
        }
        Nachricht += '</table>';
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(Mitarbeiter, true);
        if (SendAntwort === true) {
          this.Graph.SendMail(Empfaengerliste, Betreff, Nachricht).then(() => {
            console.log('Freigabe Anfrage wurde versendet.');
            resolve(Urlaub);
          }).catch(error => {
            reject(error);
          });
        } else {
          console.log('Es wurde keine Freigabe Anfrage versendet.');
          resolve(Urlaub);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendFreigabeanfrage', this.Debug.Typen.Service);
    }
  }
  SendBetriebsurlaubFreigabeanfrage(Mitarbeiter, Urlaub) {
    try {
      let Betreff = 'Anfrage Betriebsurlaubfreigabe von ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name;
      let Nachricht;
      let Empfaengerliste = [];
      let SendAntwort = false;
      let Heute = (0, moment_1.default)().locale('de');
      let Freigebender;
      let Standort = lodash.find(this.Pool.Standorteliste, {
        _id: Mitarbeiter.StandortID
      });
      for (let FreigeberID of Standort.Urlaubfreigabepersonen) {
        Freigebender = lodash.find(this.Pool.Mitarbeiterliste, {
          _id: FreigeberID
        });
        if (!lodash.isUndefined(Freigebender)) {
          Empfaengerliste.push({
            emailAddress: {
              address: Freigebender.Email,
              name: Freigebender.Vorname + ' ' + Freigebender.Name
            }
          });
        }
      }
      return new Promise((resolve, reject) => {
        Nachricht = '';
        for (let Eintrag of Empfaengerliste) {
          Nachricht += "Hallo " + Eintrag.emailAddress.name + ",<br>";
        }
        Nachricht += "<br>";
        Nachricht += "es liegen neue Anfragen zur Betriebsurlaubfreigabe von ";
        Nachricht += Mitarbeiter.Vorname + " " + Mitarbeiter.Name + " vor:<br><br>";
        Nachricht += '<table border="1">';
        Nachricht += '<tr>';
        Nachricht += '<td style="width: 100px; text-align: center"><b>Von</b></td><td style="width: 100px; text-align: center"><b>Bis</b></td>';
        Nachricht += '</tr>';
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          if (Zeitspanne.Status === this.Urlaubstatusvarianten.Vertreterfreigabe && Zeitspanne.FreigabeanfrageSended === false) {
            SendAntwort = true;
            // Zeitspanne.VertreteranfrageSended     = true;
            // Zeitspanne.VertreterantwortSended     = true;
            Zeitspanne.FreigabeanfrageSended = true;
            Zeitspanne.Freigabeantwortzeitstempel = Heute.valueOf();
            Nachricht += '<tr>';
            Nachricht += '<td style="text-align: center">' + Zeitspanne.Startstring + '</td>';
            Nachricht += '<td style="text-align: center">' + Zeitspanne.Endestring + '</td>';
            Nachricht += '</tr>';
          }
        }
        Nachricht += '</table>';
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(Mitarbeiter, true);
        if (SendAntwort === true) {
          this.Graph.SendMail(Empfaengerliste, Betreff, Nachricht).then(() => {
            console.log('Urlaubsfreigabe Anfrage wurde versendet.');
            resolve(Urlaub);
          }).catch(error => {
            reject(error);
          });
        } else {
          console.log('Es wurde keine Urlaubsfreigabe Anfrage versendet.');
          resolve(Urlaub);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendBetriebsurlaubFreigabeanfrage', this.Debug.Typen.Service);
    }
  }
  SendMitarbeiterFreigabezusage(Mitarbeiter, Freigebender, Urlaub) {
    try {
      let Betreff = 'Urlaubsfreigabe';
      let Nachricht;
      let Empfaenger = [];
      let SendAntwort = false;
      let Heute = (0, moment_1.default)().locale('de');
      let Vertretung;
      let Konversation;
      return new Promise((resolve, reject) => {
        Nachricht = "Hallo " + Mitarbeiter.Vorname + ",<br><br>anbei meine Urlaubsfreigabe für folgende Zeiträume:<br><br>";
        Nachricht += '<table border="1">';
        Nachricht += '<tr>';
        Nachricht += '<td style="width: 100px; text-align: center"><b>Von</b></td>';
        Nachricht += '<td style="width: 100px; text-align: center"><b>Bis</b></td>';
        Nachricht += '<td><b>Vertretung</b></td>';
        Nachricht += '<td><b>Status</b></td>';
        Nachricht += '</tr>';
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          if (Zeitspanne.Status === this.Urlaubstatusvarianten.Genehmigt && Zeitspanne.FreigabeantwortSended === false) {
            Zeitspanne.FreigabeantwortSended = true;
            Zeitspanne.UrlaubsfreigeberID = Freigebender._id;
            Zeitspanne.Freigabeantwortzeitstempel = Heute.valueOf();
            Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
              Status: this.Urlaubstatusvarianten.Vertreterfreigabe
            });
            if (!lodash.isUndefined(Konversation)) {
              if (!Zeitspanne.Betriebsurlaub) Vertretung = this.DBMitarbeiter.GetMitarbeiterByID(Konversation.VertreterID);else Vertretung = null;
            } else Vertretung = null;
            SendAntwort = true;
            Nachricht += '<tr>';
            Nachricht += '<td style="text-align: center">' + Zeitspanne.Startstring + '</td>';
            Nachricht += '<td style="text-align: center">' + Zeitspanne.Endestring + '</td>';
            if (!lodash.isUndefined(Vertretung) && Vertretung !== null) {
              Nachricht += '<td>' + Vertretung.Vorname + ' ' + Vertretung.Name + '</td>';
            } else {
              if (!Zeitspanne.Betriebsurlaub) Nachricht += '<td style="color: red;">unbekannt</td>';else Nachricht += '<td style="color: #307ac1;">BU</td>';
            }
            Nachricht += '<td style="color: green;">Freigabe';
            Nachricht += '</tr>';
          }
        }
        Nachricht += '</table>';
        Nachricht += '<br><br>';
        Nachricht += 'Deine Urlaubsfreigabe wurde zur Eintragung in "untermStrich" dem Büro mitgeteilt.';
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(Freigebender, true);
        Empfaenger.push({
          emailAddress: {
            address: Mitarbeiter.Email,
            name: Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name
          }
        });
        if (SendAntwort === true) {
          this.Graph.SendMail(Empfaenger, Betreff, Nachricht).then(() => {
            console.log('Urlaubsfreigabe wurde an ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' gesendet.');
            resolve(Urlaub);
          }).catch(error => {
            reject(error);
          });
        } else {
          console.log('Es wurde keine Urlaubsfreigabe gesendet.');
          resolve(Urlaub);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendMitarbeiterFreigabezusage', this.Debug.Typen.Service);
    }
  }
  SendOfficeFreigabezusage(Mitarbeiter, Freigebender, Urlaub) {
    try {
      let Betreff = 'Urlaubsfreigabe und EIntragung in untermStrich';
      let Nachricht;
      let Empfaenger = [];
      let SendAntwort = false;
      let Heute = (0, moment_1.default)().locale('de');
      let Vertretung;
      let Konversation;
      return new Promise((resolve, reject) => {
        Nachricht = "Hallo Office,<br><br>anbei eine Urlaubsfreigabe für " + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + " mit folgenden Zeiträumen:<br><br>";
        Nachricht += '<table border="1">';
        Nachricht += '<tr>';
        Nachricht += '<td style="width: 100px; text-align: center"><b>Von</b></td>';
        Nachricht += '<td style="width: 100px; text-align: center"><b>Bis</b></td>';
        Nachricht += '<td><b>Vertretung</b></td>';
        Nachricht += '<td><b>Status</b></td>';
        Nachricht += '</tr>';
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          if (Zeitspanne.Status === this.Urlaubstatusvarianten.Genehmigt && Zeitspanne.FreigabeantwortOfficeSended === false) {
            Zeitspanne.FreigabeantwortOfficeSended = true;
            Zeitspanne.Freigabeantwortzeitstempel = Heute.valueOf();
            Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
              Status: this.Urlaubstatusvarianten.Vertreterfreigabe
            });
            if (!lodash.isUndefined(Konversation)) {
              if (!Zeitspanne.Betriebsurlaub) Vertretung = this.DBMitarbeiter.GetMitarbeiterByID(Konversation.VertreterID);else Vertretung = null;
            } else Vertretung = null;
            SendAntwort = true;
            Nachricht += '<tr>';
            Nachricht += '<td style="text-align: center">' + Zeitspanne.Startstring + '</td>';
            Nachricht += '<td style="text-align: center">' + Zeitspanne.Endestring + '</td>';
            if (!lodash.isUndefined(Vertretung) && Vertretung !== null) {
              Nachricht += '<td>' + Vertretung.Vorname + ' ' + Vertretung.Name + '</td>';
            } else {
              if (!Zeitspanne.Betriebsurlaub) Nachricht += '<td style="color: red;">unbekannt</td>';else Nachricht += '<td style="color: #307ac1;">BU</td>';
            }
            Nachricht += '<td style="color: green;">Freigabe</td>';
            Nachricht += '</tr>';
          }
        }
        Nachricht += '</table>';
        Nachricht += '<br><br>';
        Nachricht += 'Bitte Urlaub in untermStrich eintragen.';
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(Freigebender, true);
        Empfaenger.push({
          emailAddress: {
            address: this.Officeemailadress,
            name: 'Office'
          }
        });
        if (SendAntwort === true) {
          this.Graph.SendMail(Empfaenger, Betreff, Nachricht).then(() => {
            console.log('Urlaubsfreigabe wurde an ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' gesendet.');
            resolve(Urlaub);
          }).catch(error => {
            reject(error);
          });
        } else {
          console.log('Es wurde keine Urlaubsfreigabe gesendet.');
          resolve(Urlaub);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendOfficeFreigabezusage', this.Debug.Typen.Service);
    }
  }
  SendMitarbeiterFreigabeablehnung(Mitarbeiter, Freigebender, Urlaub) {
    try {
      let Betreff = 'Ablehnung deiner Urlaubsanfrage';
      let Nachricht;
      let Empfaenger = [];
      let SendAntwort = false;
      let Heute = (0, moment_1.default)().locale('de');
      let Vertretung;
      return new Promise((resolve, reject) => {
        Nachricht = "Hallo " + Mitarbeiter.Vorname + " " + Mitarbeiter.Name + ",<br><br>leider muss ich deine Urlaubsanfrage für nachfolgende Zeiträume ablehnen:<br><br>";
        Nachricht += '<table border="1">';
        Nachricht += '<tr>';
        Nachricht += '<td style="width: 100px; text-align: center"><b>Von</b></td>';
        Nachricht += '<td style="width: 100px; text-align: center"><b>Bis</b></td>';
        Nachricht += '<td><b>Vertretung</b></td>';
        Nachricht += '<td><b>Status</b></td>';
        Nachricht += '</tr>';
        for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
          if (Zeitspanne.Status === this.Urlaubstatusvarianten.Abgelehnt && Zeitspanne.FreigabeantwortSended === false) {
            Zeitspanne.FreigabeantwortSended = true;
            Zeitspanne.UrlaubsfreigeberID = Freigebender._id;
            Zeitspanne.Freigabeantwortzeitstempel = Heute.valueOf();
            Vertretung = this.DBMitarbeiter.GetMitarbeiterByID(Zeitspanne.UrlaubsvertreterID);
            SendAntwort = true;
            Nachricht += '<tr>';
            Nachricht += '<td style="text-align: center">' + Zeitspanne.Startstring + '</td>';
            Nachricht += '<td style="text-align: center">' + Zeitspanne.Endestring + '</td>';
            if (!lodash.isUndefined(Vertretung)) {
              Nachricht += '<td>' + Vertretung.Vorname + ' ' + Vertretung.Name + '</td>';
            } else {
              if (!Zeitspanne.Betriebsurlaub) Nachricht += '<td style="color: red;">unbekannt</td>';else Nachricht += '<td style="color: #307ac1;">BU</td>';
            }
            Nachricht += '<td style="color: red;">Abgelehnt</td>';
            Nachricht += '</tr>';
          }
        }
        Nachricht += '</table>';
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(Freigebender, true);
        Empfaenger.push({
          emailAddress: {
            address: Freigebender.Email,
            name: Freigebender.Vorname + ' ' + Freigebender.Name
          }
        });
        if (SendAntwort === true) {
          this.Graph.SendMail(Empfaenger, Betreff, Nachricht).then(() => {
            console.log('Urlaubsablehung wurde an ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' gesendet.');
            resolve(Urlaub);
          }).catch(error => {
            reject(error);
          });
        } else {
          console.log('Es wurde keine Urlaubsablehnung gesendet.');
          resolve(Urlaub);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendMitarbeiterFreigabeablehnung', this.Debug.Typen.Service);
    }
  }
  SendMitarbeiterHomeofficeFreigabeablehnung(Mitarbeiter, Freigebender, Urlaub) {
    try {
      let Betreff = 'Ablehnung deiner Homeofficeabfrage';
      let Nachricht;
      let Empfaenger = [];
      let SendAntwort = false;
      let Heute = (0, moment_1.default)().locale('de');
      return new Promise((resolve, reject) => {
        Nachricht = "Hallo " + Mitarbeiter.Vorname + " " + Mitarbeiter.Name + ",<br><br>leider muss ich deine Homeofficeanfrage für nachfolgende Tage ablehnen:<br><br>";
        Nachricht += '<table border="1" cellspacing="0" cellpadding="0">';
        Nachricht += '<tr>';
        Nachricht += '<td style="width: 100px; text-align: center;  padding: 2px; font-weight: bold;">Datum</td>';
        Nachricht += '<td style="width: 100px; text-align: center;  padding: 2px; font-weight: bold;">Status</td>';
        Nachricht += '</tr>';
        for (let Zeitspanne of Urlaub.Homeofficezeitspannen) {
          if (Zeitspanne.Status === this.Homeofficestatusvarianten.Abgelehnt && Zeitspanne.FreigabeantwortSended === false) {
            Zeitspanne.FreigabeantwortSended = true;
            Zeitspanne.Freigabeantwortzeitstempel = Heute.valueOf();
            SendAntwort = true;
            Nachricht += '<tr>';
            Nachricht += '<td style="text-align: center; padding: 2px;">' + Zeitspanne.Startstring + '</td>';
            Nachricht += '<td style="text-align: center; padding: 2px; color: red">Abgelehnt</td>';
            Nachricht += '</tr>';
          }
        }
        Nachricht += '</table>';
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(Freigebender, true);
        Empfaenger.push({
          emailAddress: {
            address: Freigebender.Email,
            name: Freigebender.Vorname + ' ' + Freigebender.Name
          }
        });
        if (SendAntwort === true) {
          this.Graph.SendMail(Empfaenger, Betreff, Nachricht).then(() => {
            console.log('Homeofficeablehnung wurde an ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' gesendet.');
            resolve(Urlaub);
          }).catch(error => {
            reject(error);
          });
        } else {
          console.log('Es wurde keine Homeofficeablehnung gesendet.');
          resolve(Urlaub);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendMitarbeiterHomeofficeFreigabeablehnung', this.Debug.Typen.Service);
    }
  }
  SendMitarbeiterHomeofficeFreigabezusage(Mitarbeiter, Freigebender, Urlaub) {
    try {
      let Betreff = 'Genehmigung deiner Homeofficeanfrage';
      let Nachricht;
      let Empfaenger = [];
      let SendAntwort = false;
      let Heute = (0, moment_1.default)().locale('de');
      return new Promise((resolve, reject) => {
        Nachricht = "Hallo " + Mitarbeiter.Vorname + " " + Mitarbeiter.Name + ",<br><br>nachfolgende Homeofficetage sind genehmigt:<br><br>";
        Nachricht += '<table border="1" cellpadding="0" cellspacing="0">';
        Nachricht += '<tr>';
        Nachricht += '<td style="width: 100px; text-align: center;  padding: 2px; font-weight: bold;"><b>Datum</b></td>';
        Nachricht += '<td style="width: 100px; text-align: center;  padding: 2px; font-weight: bold;"><b>Status</b></td>';
        Nachricht += '</tr>';
        for (let Zeitspanne of Urlaub.Homeofficezeitspannen) {
          if (Zeitspanne.Status === this.Homeofficestatusvarianten.Genehmigt && Zeitspanne.FreigabeantwortSended === false) {
            Zeitspanne.FreigabeantwortSended = true;
            Zeitspanne.Freigabeantwortzeitstempel = Heute.valueOf();
            SendAntwort = true;
            Nachricht += '<tr>';
            Nachricht += '<td style="text-align: center;  padding: 2px;">' + Zeitspanne.Startstring + '</td>';
            Nachricht += '<td style="text-align: center; color: green;  padding: 2px;">Genehmigt</td>';
            Nachricht += '</tr>';
          }
        }
        Nachricht += '</table>';
        Nachricht += '<br><br>';
        Nachricht += '<a href="' + this.Basics.WebAppUrl + '">Urlaub - Homeoffice - Planung jetzt öffnen</a>';
        Nachricht += '<br><br>' + this.Pool.GetFilledSignatur(Freigebender, true);
        Empfaenger.push({
          emailAddress: {
            address: Freigebender.Email,
            name: Freigebender.Vorname + ' ' + Freigebender.Name
          }
        });
        if (SendAntwort === true) {
          this.Graph.SendMail(Empfaenger, Betreff, Nachricht).then(() => {
            console.log('Homeofficegenehmigung wurde an ' + Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + ' gesendet.');
            resolve(Urlaub);
          }).catch(error => {
            reject(error);
          });
        } else {
          console.log('Es wurde keine Homeofficegenehmigung gesendet.');
          resolve(Urlaub);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SendMitarbeiterHomeofficeFreigabezusage', this.Debug.Typen.Service);
    }
  }
  ReadRegionen(landcode) {
    try {
      return new Promise((resolve, reject) => {
        let Daten = {
          Landcode: landcode
        };
        let RegionenObserver = this.http.put(this.ServerReadRegionenUrl, Daten);
        RegionenObserver.subscribe({
          next: data => {
            this.Regionenliste = data.Regionenliste;
          },
          complete: () => {
            this.Regionenliste = lodash.filter(this.Regionenliste, region => {
              return region.isoCode !== '';
            });
            for (let Region of this.Regionenliste) {
              Region.Name = Region.name[0].text;
            }
            resolve(true);
          },
          error: error => {
            this.Regionenliste = [];
            console.log('Read Regionen ist fehlgeschlagen.');
            resolve(true);
            // reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'ReadRegionen', this.Debug.Typen.Service);
    }
  }
  ReadFeiertage(landcode) {
    try {
      let Observer;
      let Standort = lodash.find(this.Pool.Standorteliste, {
        _id: this.CurrentMitarbeiter.StandortID
      });
      if (lodash.isUndefined(Standort)) Standort = null;
      let Daten = {
        Standort: Standort,
        Jahr: this.CurrentJahr,
        Bundeslandkuerzel: this.Bundeslandkuerzel,
        Landcode: landcode
      };
      return new Promise((resolve, reject) => {
        this.Feiertageliste[landcode] = [];
        Observer = this.http.put(this.ServerReadfeiertageUrl, Daten);
        Observer.subscribe({
          next: ne => {
            this.Feiertageliste[landcode] = ne.Feiertageliste;
          },
          complete: () => {
            resolve(true);
          },
          error: error => {
            this.Feiertageliste[landcode] = [];
            console.log('Read Feiertage ist fehlgeschlagen.');
            resolve(true);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'ReadFeiertage', this.Debug.Typen.Service);
    }
  }
  ReadFerien(landcode) {
    try {
      let FerienObserver;
      let Daten = {
        Jahr: this.CurrentJahr,
        Bundeslandkuerzel: this.Bundeslandkuerzel,
        Landcode: landcode
      };
      this.Ferienliste[landcode] = [];
      return new Promise((resolve, reject) => {
        FerienObserver = this.http.put(this.ServerReadFerienUrl, Daten);
        FerienObserver.subscribe({
          next: data => {
            this.Ferienliste[landcode] = data.Ferienliste;
          },
          complete: () => {
            resolve(true);
          },
          error: error => {
            this.Ferienliste[landcode] = [];
            console.log('Read Ferien ist fehlgeschlagen.');
            resolve(true);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'ReadFerien', this.Debug.Typen.Service);
    }
  }
  CountAnfragenanzahlen() {
    try {
      this.Urlaubsanfragenanzahl = 0;
      this.Antwortenanzahl = 0;
      this.Vertretungsanfragenanzahl = 0;
      this.Vertretungsantwortenanzahl = 0;
      this.Freigabenanfragenanzahl = 0;
      this.Freigabenantwortenanzahl = 0;
      this.Homeofficantwortenanzahl = 0;
      this.Homeofficeanfragenanzahl = 0;
      if (this.CurrentMitarbeiter !== null) {
        this.GetVertretungenliste();
        this.GetFreigabenliste();
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CountAnfragenanzahlen', this.Debug.Typen.Service);
      return 0;
    }
  }
  Init() {
    try {
      let Standort;
      let Mitarbeiter;
      let Urlaub;
      let Gesamturlaub;
      let Urlaubstage;
      this.Urlaubsanfragenanzahl = 0;
      this.Homeofficeanfragenanzahl = 0;
      this.Vertretungsanfragenanzahl = 0;
      this.Vertretungsantwortenanzahl = 0;
      this.Freigabenanfragenanzahl = 0;
      this.Freigabenantwortenanzahl = 0;
      this.Kalenderwochenhoehenliste = [];
      // Land einstellen
      if (this.CurrentMitarbeiter === null) {
        this.CurrentMitarbeiter = lodash.cloneDeep(this.Pool.Mitarbeiterdaten);
      } else {
        this.CurrentMitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
          _id: this.CurrentMitarbeiter._id
        });
      }
      if (this.CurrentMitarbeiter !== null) {
        Standort = lodash.find(this.Pool.Standorteliste, {
          _id: this.CurrentMitarbeiter.StandortID
        });
        if (lodash.isUndefined(Standort)) this.Laendercode = 'DE';else {
          this.Laendercode = Standort.Land;
        }
      }
      this.ShowFerientage_DE = this.Pool.Mitarbeitersettings.UrlaubShowFerien_DE;
      this.ShowFeiertage_DE = this.Pool.Mitarbeitersettings.UrlaubShowFeiertage_DE;
      this.Ferienfarbe_DE = this.Urlaubsfaben.Ferien_DE;
      this.Feiertagefarbe_DE = this.Urlaubsfaben.Feiertage_DE;
      this.ShowFerientage_BG = this.Pool.Mitarbeitersettings.UrlaubShowFerien_BG;
      this.ShowFeiertage_BG = this.Pool.Mitarbeitersettings.UrlaubShowFeiertage_BG;
      this.Ferienfarbe_BG = this.Urlaubsfaben.Ferien_BG;
      this.Feiertagefarbe_BG = this.Urlaubsfaben.Feiertage_BG;
      // Urlaub initialisieren
      if (this.CurrentMitarbeiter !== null) {
        this.CurrentUrlaub = lodash.find(this.CurrentMitarbeiter.Urlaubsliste, {
          Jahr: this.CurrentJahr
        });
        if (lodash.isUndefined(this.CurrentUrlaub)) {
          this.CurrentUrlaub = this.GetEmptyUrlaub(this.CurrentJahr);
          this.CurrentUrlaubzeitspanne = null;
          this.CurrentMitarbeiter.Urlaubsliste.push(this.CurrentUrlaub);
        } else {
          this.CurrentUrlaubzeitspanne = null;
        }
        if (lodash.isUndefined(this.CurrentUrlaub.Projektbeteiligteliste)) this.CurrentUrlaub.Projektbeteiligteliste = [];
        if (lodash.isUndefined(this.CurrentUrlaub.Ferienblockerliste)) this.CurrentUrlaub.Ferienblockerliste = [];
        if (lodash.isUndefined(this.CurrentUrlaub.Feiertageblockerliste)) this.CurrentUrlaub.Feiertageblockerliste = [];
        // if(lodash.isUndefined(this.CurrentUrlaub.UrlaubsfreigeberID))     this.CurrentUrlaub.UrlaubsfreigeberID     = null;
        // if(lodash.isUndefined(this.CurrentUrlaub.HomeofficefreigeberID))  this.CurrentUrlaub.HomeofficefreigeberID  = null;
      }
      for (let Urlaubzeitspanne of this.CurrentUrlaub.Urlaubzeitspannen) {
        Urlaubzeitspanne = this.InitUrlaubzeitspanne(Urlaubzeitspanne);
      }
      for (let Homeofficezeitspanne of this.CurrentUrlaub.Homeofficezeitspannen) {
        Homeofficezeitspanne = this.InitHomeofficezeitspanne(Homeofficezeitspanne);
      }
      // Fremde Urlaube zur Einsicht vorbereiten
      this.UrlaublisteExtern = [];
      // Mitarbeiter aus Projektbeteiligtenliste einfügen
      for (let Eintrag of this.CurrentUrlaub.Projektbeteiligteliste) {
        Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
          _id: Eintrag.MitarbeiterID
        });
        if (!lodash.isUndefined(Mitarbeiter)) {
          Urlaub = lodash.find(Mitarbeiter.Urlaubsliste, {
            Jahr: this.CurrentJahr
          });
          if (!lodash.isUndefined(Urlaub)) {
            Urlaub = lodash.cloneDeep(Urlaub);
            Urlaub.MitarbeiterIDExtern = Mitarbeiter._id;
            Urlaub.NameExtern = Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name;
            Urlaub.NameKuerzel = Mitarbeiter.Kuerzel;
            Urlaub.Urlaubzeitspannen = lodash.filter(Urlaub.Urlaubzeitspannen, spanne => {
              return spanne.Status !== this.Urlaubstatusvarianten.Abgelehnt;
            });
          } else {
            Urlaub = this.GetEmptyUrlaub(this.CurrentJahr);
            Urlaub.MitarbeiterIDExtern = Mitarbeiter._id;
            Urlaub.NameExtern = Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name;
            Urlaub.NameKuerzel = Mitarbeiter.Kuerzel;
          }
          Gesamturlaub = 0;
          Gesamturlaub += Mitarbeiter.Urlaub;
          Gesamturlaub += Mitarbeiter.Resturlaub;
          Urlaubstage = 0;
          for (let Zeitspanne of Urlaub.Urlaubzeitspannen) {
            if (Zeitspanne.Status !== this.Urlaubstatusvarianten.Abgelehnt) Urlaubstage += Zeitspanne.Tageanzahl;
          }
          if (this.CurrentMitarbeiter !== null && this.CurrentMitarbeiter.Urlaubsfreigaben === true) Urlaub.Text = '[' + Urlaubstage + ' von ' + Gesamturlaub + ']';else Urlaub.Text = '[' + Urlaubstage + ']';
          this.UrlaublisteExtern.push(Urlaub);
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'Init', this.Debug.Typen.Service);
    }
  }
  InitHomeofficezeitspanne(Homeoffizezeitspanne) {
    try {
      if (lodash.isUndefined(Homeoffizezeitspanne.Checked)) Homeoffizezeitspanne.Checked = false;
      return Homeoffizezeitspanne;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'InitHomeofficezeitspanne', this.Debug.Typen.Service);
    }
  }
  InitUrlaubzeitspanne(Zeitspanne) {
    try {
      if (lodash.isUndefined(Zeitspanne.UrlaubsvertreterID) || Zeitspanne.UrlaubsvertreterID === '') Zeitspanne.UrlaubsvertreterID = null;
      if (lodash.isUndefined(Zeitspanne.UrlaubsfreigeberID) || Zeitspanne.UrlaubsfreigeberID === '') Zeitspanne.UrlaubsfreigeberID = null;
      if (lodash.isUndefined(Zeitspanne.Planungmeldung)) Zeitspanne.Planungmeldung = '';
      if (lodash.isUndefined(Zeitspanne.Freigabemeldung)) Zeitspanne.Freigabemeldung = '';
      if (lodash.isUndefined(Zeitspanne.FreigabeanfrageSended)) Zeitspanne.FreigabeanfrageSended = false;
      if (lodash.isUndefined(Zeitspanne.FreigabeantwortSended)) Zeitspanne.FreigabeantwortSended = false;
      if (lodash.isUndefined(Zeitspanne.FreigabeantwortOfficeSended)) Zeitspanne.FreigabeantwortOfficeSended = false;
      if (lodash.isUndefined(Zeitspanne.Freigabeantwortzeitstempel)) Zeitspanne.Freigabeantwortzeitstempel = null;
      if (lodash.isUndefined(Zeitspanne.FreigabeantwortOfficezeitstempel)) Zeitspanne.FreigabeantwortOfficezeitstempel = null;
      if (lodash.isUndefined(Zeitspanne.Checked)) Zeitspanne.Checked = false;
      if (lodash.isUndefined(Zeitspanne.Halbertag)) Zeitspanne.Halbertag = false;
      if (lodash.isUndefined(Zeitspanne.Betriebsurlaub)) Zeitspanne.Betriebsurlaub = false;
      if (lodash.isUndefined(Zeitspanne.UrlaubsvertreterIDListe)) {
        if (!lodash.isUndefined(Zeitspanne.UrlaubsvertreterID) && Zeitspanne.UrlaubsvertreterID !== null) {
          Zeitspanne.UrlaubsvertreterIDListe = [Zeitspanne.UrlaubsvertreterID];
        } else {
          Zeitspanne.UrlaubsvertreterIDListe = [];
        }
      }
      if (lodash.isUndefined(Zeitspanne.Vertretungskonversationliste)) Zeitspanne.Vertretungskonversationliste = [];
      this.InitVertreterkonversationen(Zeitspanne, false);
      /*
      Was soll das hier unten ?
             Zeitspanne.Vertretungskonversationliste = lodash.filter(Zeitspanne.Vertretungskonversationliste, (Eintrag: Urlaubsvertretungkonversationstruktur) => {
               return Zeitspanne.UrlaubsvertreterIDListe.indexOf(Eintrag.VertreterID) !== -1;
      });
              */
      if (Zeitspanne.Status === 'Beantragt') Zeitspanne.Status = this.Urlaubstatusvarianten.Geplant;
      return Zeitspanne;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'InitUrlaubzeitspanne', this.Debug.Typen.Service);
    }
  }
  InitVertreterkonversationen(Zeitspanne, Reset) {
    try {
      let Index;
      for (let MitarbeiterID of Zeitspanne.UrlaubsvertreterIDListe) {
        Index = lodash.findIndex(Zeitspanne.Vertretungskonversationliste, {
          VertreterID: MitarbeiterID
        });
        if (Index === -1) {
          Zeitspanne.Vertretungskonversationliste.push({
            VertreterID: MitarbeiterID,
            Status: this.Const.NONE,
            VertreteranfrageSended: false,
            VertreterantwortSended: false,
            Vertretunganfragezeitstempel: 0,
            Vertretungantwortzeitstempel: 0,
            Vertretungmeldung: ""
          });
        } else {
          if (Reset === true && Zeitspanne.Vertretungskonversationliste[Index].Status !== this.Urlaubstatusvarianten.Vertreterfreigabe) {
            Zeitspanne.Vertretungskonversationliste[Index] = {
              VertreterID: MitarbeiterID,
              Status: this.Const.NONE,
              VertreteranfrageSended: false,
              VertreterantwortSended: false,
              Vertretunganfragezeitstempel: 0,
              Vertretungantwortzeitstempel: 0,
              Vertretungmeldung: ""
            };
          }
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'InitVertreterkonversationen', this.Debug.Typen.Service);
    }
  }
  SetPlanungsmonate() {
    try {
      if (this.CurrentMonatindex === 0) {
        this.FirstMonatIndex = 0;
        this.CurrentMonatindex = 1;
        this.LastMonatIndex = 2;
      } else if (this.CurrentMonatindex === 11) {
        this.FirstMonatIndex = 9;
        this.CurrentMonatindex = 10;
        this.LastMonatIndex = 11;
      } else {
        this.FirstMonatIndex = this.CurrentMonatindex - 1;
        this.LastMonatIndex = this.CurrentMonatindex + 1;
      }
      // this.PlanungsmonateChanged.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'SetPlanungsmonate', this.Debug.Typen.Service);
    }
  }
  GetEmptyUrlaub(jahr) {
    try {
      let Urlaub = {
        Jahr: jahr,
        Urlaubzeitspannen: [],
        Homeofficezeitspannen: [],
        // UrlaubsfreigeberID:    null,
        // HomeofficefreigeberID: null,
        Projektbeteiligteliste: [],
        Ferienblockerliste: [],
        Feiertageblockerliste: []
      };
      if (this.CurrentMitarbeiter !== null && !lodash.isUndefined(this.CurrentMitarbeiter.Urlaubsliste[0])) {
        Urlaub.Projektbeteiligteliste = this.CurrentMitarbeiter.Urlaubsliste[0].Projektbeteiligteliste;
        Urlaub.Ferienblockerliste = this.CurrentMitarbeiter.Urlaubsliste[0].Ferienblockerliste;
        Urlaub.Feiertageblockerliste = this.CurrentMitarbeiter.Urlaubsliste[0].Feiertageblockerliste;
      }
      return Urlaub;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Urlaub', 'GetEmptyUrlaub', this.Debug.Typen.Service);
    }
  }
  CheckIsFerientag(Tag, landcode) {
    try {
      let CurrentTag = (0, moment_1.default)(Tag.Tagstempel);
      let Starttag;
      let Endetag;
      let IsFerientag = false;
      if (!lodash.isUndefined(this.Ferienliste[landcode])) {
        for (let Eintrag of this.Ferienliste[landcode]) {
          Starttag = (0, moment_1.default)(Eintrag.Anfangstempel);
          Endetag = (0, moment_1.default)(Eintrag.Endestempel);
          if (CurrentTag.isSameOrAfter(Starttag, 'day') && CurrentTag.isSameOrBefore(Endetag, 'day')) {
            IsFerientag = true;
            break;
          }
        }
      }
      return IsFerientag;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckIsFerientag', this.Debug.Typen.Service);
    }
  }
  CheckIsUrlaubstag(Mitarbeiter, Tag) {
    try {
      let CurrentTag = (0, moment_1.default)(Tag.Tagstempel);
      let Starttag;
      let Endetag;
      let IsUrlaubstag = false;
      let Urlaub;
      let Index = lodash.findIndex(Mitarbeiter.Urlaubsliste, {
        Jahr: this.CurrentJahr
      });
      let Merker;
      if (Index !== -1) {
        Urlaub = Mitarbeiter.Urlaubsliste[Index];
        for (let Eintrag of Urlaub.Urlaubzeitspannen) {
          Starttag = (0, moment_1.default)(Eintrag.Startstempel);
          Endetag = (0, moment_1.default)(Eintrag.Endestempel);
          if (CurrentTag.isSameOrAfter(Starttag, 'day') && CurrentTag.isSameOrBefore(Endetag, 'day') && Eintrag.Status !== this.Urlaubstatusvarianten.Abgelehnt) {
            switch (Eintrag.Status) {
              case this.Urlaubstatusvarianten.Geplant:
                if (this.GesamtuebersichtSetting.ShowGeplant === true) return Eintrag;
                break;
              case this.Urlaubstatusvarianten.Vertreteranfrage:
                if (this.GesamtuebersichtSetting.ShowVertreteranfragen === true) return Eintrag;
                break;
              case this.Urlaubstatusvarianten.Vertreterfreigabe:
                if (this.GesamtuebersichtSetting.ShowVertreterfreigaben === true) return Eintrag;
                break;
              case this.Urlaubstatusvarianten.Vertreterablehnung:
                if (this.GesamtuebersichtSetting.ShowVertreterablehnungen === true) return Eintrag;
                break;
              case this.Urlaubstatusvarianten.Genehmigt:
                if (this.GesamtuebersichtSetting.ShowUrlaubsgenehmigungen === true) return Eintrag;
                break;
              case this.Urlaubstatusvarianten.Abgelehnt:
                if (this.GesamtuebersichtSetting.ShowUrlaubsablehnungen === true) return Eintrag;
                break;
            }
          }
        }
      }
      return null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckIsUrlaubstag', this.Debug.Typen.Service);
    }
  }
  CheckIsHomeofficetag(Mitarbeiter, Tag) {
    try {
      let CurrentTag = (0, moment_1.default)(Tag.Tagstempel);
      let Starttag;
      let Endetag;
      let Homeoffice;
      let Index = lodash.findIndex(Mitarbeiter.Urlaubsliste, {
        Jahr: this.CurrentJahr
      });
      if (Index !== -1) {
        Homeoffice = Mitarbeiter.Urlaubsliste[Index];
        for (let Eintrag of Homeoffice.Homeofficezeitspannen) {
          Starttag = (0, moment_1.default)(Eintrag.Startstempel);
          Endetag = (0, moment_1.default)(Eintrag.Endestempel);
          if (CurrentTag.isSameOrAfter(Starttag, 'day') && CurrentTag.isSameOrBefore(Endetag, 'day') && Eintrag.Status !== this.Homeofficestatusvarianten.Abgelehnt) {
            switch (Eintrag.Status) {
              case this.Homeofficestatusvarianten.Geplant:
                if (this.GesamtuebersichtSetting.ShowHomeofficeGeplant === true) return Eintrag;
                break;
              case this.Homeofficestatusvarianten.Genehmigt:
                if (this.GesamtuebersichtSetting.ShowHomeofficeGenehmigt === true) return Eintrag;
                break;
              case this.Homeofficestatusvarianten.Freigabeanfrage:
                if (this.GesamtuebersichtSetting.ShowHomeofficeAnfrage === true) return Eintrag;
                break;
            }
          }
        }
      }
      return null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckIsHomeofficetag', this.Debug.Typen.Service);
    }
  }
  GetFeriennamen(ferientag, laendercode) {
    try {
      let Name = laendercode + ': Unbekannt';
      for (let name of ferientag.name) {
        if (name.language === laendercode) Name = name.text;
      }
      return Name;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetFeriennamen', this.Debug.Typen.Service);
    }
  }
  GetFeiertagnamen(feiertag, laendercode) {
    try {
      let Name = laendercode + ': Unbekannt';
      for (let name of feiertag.name) {
        if (name.language === laendercode) Name = name.text;
      }
      return Name;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetFeiertagnamen', this.Debug.Typen.Service);
    }
  }
  GetFerientag(Tag, landcode) {
    try {
      let CurrentTag = (0, moment_1.default)(Tag.Tagstempel);
      let Starttag;
      let Endetag;
      let Ferientag;
      let Eintrag;
      if (!lodash.isUndefined(this.Ferienliste[landcode])) {
        for (Eintrag of this.Ferienliste[landcode]) {
          Starttag = (0, moment_1.default)(Eintrag.Anfangstempel);
          Endetag = (0, moment_1.default)(Eintrag.Endestempel);
          if (CurrentTag.isSameOrAfter(Starttag, 'day') && CurrentTag.isSameOrBefore(Endetag, 'day')) {
            Ferientag = {
              Tagnummer: 0,
              Hauptmonat: false,
              Kalenderwoche: 0,
              Tag: "",
              Tagstempel: Eintrag.Anfangstempel,
              Ferienname_DE: this.GetFeriennamen(Eintrag, 'DE'),
              Ferienname_BG: this.GetFeriennamen(Eintrag, 'EN')
            };
            return Ferientag;
            break;
          }
        }
      }
      return null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetFerientag', this.Debug.Typen.Service);
    }
  }
  CheckIsFeiertag(Tag, landcode) {
    try {
      let CurrentTag = (0, moment_1.default)(Tag.Tagstempel);
      let Feiertag;
      let IsFeiertag = false;
      let Blockerdatum;
      if (!lodash.isUndefined(this.Feiertageliste[landcode])) {
        for (let Eintrag of this.Feiertageliste[landcode]) {
          Feiertag = (0, moment_1.default)(Eintrag.Anfangstempel);
          if (Feiertag.isSame(CurrentTag, 'day')) {
            IsFeiertag = true;
            for (let Eintrag of this.CurrentUrlaub.Feiertageblockerliste) {
              Blockerdatum = (0, moment_1.default)(Eintrag);
              if (Blockerdatum.isSame(CurrentTag, 'day')) {
                IsFeiertag = false;
              }
            }
          }
        }
      }
      return IsFeiertag;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckIsFeiertag', this.Debug.Typen.Service);
    }
  }
  GetFeiertag(currenttag, landcode) {
    try {
      let CurrentTag = (0, moment_1.default)(currenttag.Tagstempel);
      let Feiertagdatum;
      let Feiertag;
      let Tag;
      if (!lodash.isUndefined(this.Feiertageliste[landcode])) {
        for (Tag of this.Feiertageliste[landcode]) {
          Feiertagdatum = (0, moment_1.default)(Tag.Anfangstempel);
          if (Feiertagdatum.isSame(CurrentTag, 'day')) {
            Feiertag = {
              Tagnummer: 0,
              Hauptmonat: false,
              Kalenderwoche: 0,
              Tag: "",
              Tagstempel: Tag.Anfangstempel,
              Feiertagname_DE: this.GetFeiertagnamen(Tag, 'DE'),
              Feiertagname_BG: this.GetFeiertagnamen(Tag, 'EN')
            };
            return Feiertag;
            break;
          }
        }
      }
      return null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetFeiertag', this.Debug.Typen.Service);
    }
  }
  GetEmptyUrlaubszeitspanne() {
    try {
      return {
        ZeitspannenID: this.Pool.GetNewUniqueID(),
        Startstempel: null,
        Endestempel: null,
        Startstring: "",
        Endestring: "",
        UrlaubsvertreterID: null,
        UrlaubsvertreterIDListe: [],
        Vertretungskonversationliste: [],
        UrlaubsfreigeberID: null,
        Status: this.Urlaubstatusvarianten.Geplant,
        Planungmeldung: '',
        Freigabemeldung: '',
        Halbertag: false,
        Betriebsurlaub: false,
        Tageanzahl: 0,
        FreigabeanfrageSended: false,
        FreigabeantwortSended: false,
        FreigabeantwortOfficeSended: false,
        Freigabeantwortzeitstempel: null,
        FreigabeantwortOfficezeitstempel: null
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Urlaub', 'GetEmptyZeitspanne', this.Debug.Typen.Service);
    }
  }
  GetEmptyHomeofficezeitspanne() {
    try {
      return {
        ZeitspannenID: this.Pool.GetNewUniqueID(),
        Startstempel: null,
        Endestempel: null,
        Startstring: "",
        Endestring: "",
        Status: this.Homeofficestatusvarianten.Geplant,
        Planungmeldung: '',
        Vertretungmeldung: '',
        Freigabemeldung: '',
        Tageanzahl: 0,
        FreigabeanfrageSended: false,
        FreigabeantwortSended: false,
        Freigabeantwortzeitstempel: null
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Database Urlaub', 'GetEmptyHomeofficezeitspanne', this.Debug.Typen.Service);
    }
  }
  CountResturlaub() {
    try {
      let Gesamturlaub = 0;
      if (this.CurrentUrlaub !== null && this.CurrentMitarbeiter !== null) {
        Gesamturlaub += this.CurrentMitarbeiter.Urlaub;
        Gesamturlaub += this.CurrentMitarbeiter.Resturlaub;
        for (let Zeitspanne of this.CurrentUrlaub.Urlaubzeitspannen) {
          if (Zeitspanne.Status !== this.Urlaubstatusvarianten.Abgelehnt) Gesamturlaub -= Zeitspanne.Tageanzahl;
        }
        return Gesamturlaub;
      } else return 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CountResturlaub', this.Debug.Typen.Service);
    }
  }
  CountHomeoffice() {
    try {
      let Gesamthomeoffice = 210;
      if (this.CurrentUrlaub !== null && this.Pool.Mitarbeiterdaten !== null) {
        for (let Zeitspanne of this.CurrentUrlaub.Homeofficezeitspannen) {
          if (Zeitspanne.Status !== this.Homeofficestatusvarianten.Abgelehnt) Gesamthomeoffice -= Zeitspanne.Tageanzahl;
        }
        return Gesamthomeoffice;
      } else return 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CountHomeoffice', this.Debug.Typen.Service);
    }
  }
  CountHomeGeplant() {
    try {
      let Anzahl = 0;
      if (this.CurrentUrlaub !== null && this.Pool.Mitarbeiterdaten !== null) {
        for (let Zeitspanne of this.CurrentUrlaub.Homeofficezeitspannen) {
          if (Zeitspanne.Status === this.Homeofficestatusvarianten.Geplant) Anzahl++;
        }
      }
      return Anzahl;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CountHomeGeplant', this.Debug.Typen.Service);
    }
  }
  CountHomeFreigbeanfragen() {
    try {
      let Anzahl = 0;
      if (this.CurrentUrlaub !== null && this.Pool.Mitarbeiterdaten !== null) {
        for (let Zeitspanne of this.CurrentUrlaub.Homeofficezeitspannen) {
          if (Zeitspanne.Status === this.Homeofficestatusvarianten.Freigabeanfrage) Anzahl++;
        }
      }
      return Anzahl;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CountHomeFreigbeanfragen', this.Debug.Typen.Service);
    }
  }
  CountHomeGenehmigt() {
    try {
      let Anzahl = 0;
      if (this.CurrentUrlaub !== null && this.Pool.Mitarbeiterdaten !== null) {
        for (let Zeitspanne of this.CurrentUrlaub.Homeofficezeitspannen) {
          if (Zeitspanne.Status === this.Homeofficestatusvarianten.Genehmigt) Anzahl++;
        }
      }
      return Anzahl;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CountHomeGenehmigt', this.Debug.Typen.Service);
    }
  }
  CountHomeAbgelehnt() {
    try {
      let Anzahl = 0;
      if (this.CurrentUrlaub !== null && this.Pool.Mitarbeiterdaten !== null) {
        for (let Zeitspanne of this.CurrentUrlaub.Homeofficezeitspannen) {
          if (Zeitspanne.Status === this.Homeofficestatusvarianten.Abgelehnt) Anzahl++;
        }
      }
      return Anzahl;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CountHomeAbgelehnt', this.Debug.Typen.Service);
    }
  }
  CheckDisplayExternenUrlaub(mitrbeiterid) {
    try {
      let Beteiligt;
      let Mitarbeiter;
      let Urlaub;
      if (this.CurrentUrlaub !== null) {
        Beteiligt = lodash.find(this.CurrentUrlaub.Projektbeteiligteliste, {
          MitarbeiterID: mitrbeiterid
        });
        if (lodash.isUndefined(Beteiligt)) return false;else {
          Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {
            _id: Beteiligt.MitarbeiterID
          });
          Urlaub = lodash.find(Mitarbeiter.Urlaubsliste, {
            Jahr: this.CurrentUrlaub.Jahr
          });
          if (lodash.isUndefined(Urlaub)) return false;else {
            return Beteiligt.Display && Urlaub.Urlaubzeitspannen.length > 0;
          }
        }
      } else return false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckDisplayExternenUrlaub', this.Debug.Typen.Service);
    }
  }
  HomeofficeLoeschen(Status) {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      try {
        for (let Zeitspanne of _this6.CurrentUrlaub.Homeofficezeitspannen) {
          if (lodash.isUndefined(Zeitspanne.Checked) === true) Zeitspanne.Checked = false;
        }
        let Homeofficeliste = lodash.filter(_this6.CurrentUrlaub.Homeofficezeitspannen, eintrag => {
          return eintrag.Status === Status && eintrag.Checked === false || eintrag.Status !== Status;
        });
        _this6.CurrentUrlaub = lodash.find(_this6.CurrentMitarbeiter.Urlaubsliste, {
          Jahr: _this6.CurrentJahr
        });
        _this6.CurrentUrlaub.Homeofficezeitspannen = Homeofficeliste;
        let Urlaubindex = lodash.findIndex(_this6.CurrentMitarbeiter.Urlaubsliste, {
          Jahr: _this6.CurrentJahr
        });
        _this6.CurrentMitarbeiter.Urlaubsliste[Urlaubindex] = _this6.CurrentUrlaub;
        yield _this6.DBMitarbeiter.UpdateMitarbeiterUrlaub(_this6.CurrentMitarbeiter);
        _this6.ExterneHomeofficeChanged.emit();
      } catch (error) {
        _this6.Debug.ShowErrorMessage(error, 'Database Urlaub', 'HomeofficeLoeschen', _this6.Debug.Typen.Service);
      }
    })();
  }
  GetHomeofficezeitspannenByStataus(Status) {
    try {
      let Liste = lodash.filter(this.CurrentUrlaub.Homeofficezeitspannen, {
        Status: Status
      });
      let Gesamtliste = [];
      let Datum;
      Liste.sort((a, b) => {
        if (a.Startstempel < b.Startstempel) return -1;
        if (a.Startstempel > b.Startstempel) return 1;
        return 0;
      });
      for (let Monatindex = 0; Monatindex < this.Monateliste.length; Monatindex++) {
        Gesamtliste[Monatindex] = [];
        Gesamtliste[Monatindex] = lodash.filter(Liste, eintrag => {
          Datum = (0, moment_1.default)(eintrag.Startstempel);
          return Datum.month() === Monatindex;
        });
      }
      return Gesamtliste;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'GetHomeofficezeitspannenByStataus', this.Debug.Typen.Service);
    }
  }
  CheckVertretungIsAbgelehnt(Zeitspanne) {
    try {
      let Konversation;
      let Abgelehnt = false;
      for (Konversation of Zeitspanne.Vertretungskonversationliste) {
        if (Konversation.Status === this.Urlaubstatusvarianten.Vertreterablehnung) Abgelehnt = true;
      }
      return Abgelehnt;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Urlaub', 'CheckVertretungIsAbgelehnt', this.Debug.Typen.Service);
    }
  }
  GetUrlaubStatuscolorByKonversation(Zeitspanne) {
    try {
      let Color = '';
      let Konversation = lodash.find(Zeitspanne.Vertretungskonversationliste, {
        VertreterID: this.CurrentMitarbeiter._id
      });
      if (!lodash.isUndefined(Konversation)) {
        if (Konversation.Status === this.Urlaubstatusvarianten.Vertreteranfrage) Color = this.Urlaubsfaben.Vertreteranfrage;else {
          Color = Konversation.Status === this.Urlaubstatusvarianten.Vertreterfreigabe ? this.Urlaubsfaben.Vertreterfreigabe : this.Urlaubsfaben.Vertreterablehnung;
        }
      }
      return Color;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'file', 'GetUrlaubStatuscolorByKonversation', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: const_1.ConstProvider
  }, {
    type: graph_1.Graphservice
  }, {
    type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: http_1.HttpClient
  }];
};
exports.DatabaseUrlaubService = DatabaseUrlaubService;
exports.DatabaseUrlaubService = DatabaseUrlaubService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], DatabaseUrlaubService);

/***/ }),

/***/ 34388:
/*!*****************************************!*\
  !*** ./src/app/services/debug/debug.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DebugProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const basics_1 = __webpack_require__(/*! ../basics/basics */ 14652);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
const error_service_1 = __webpack_require__(/*! ../error/error.service */ 34396);
let DebugProvider = class DebugProvider {
  Basics;
  nav;
  Fehlerservice;
  Const;
  Typen = {
    Page: 'Page',
    Component: 'Component',
    Provider: 'Provider',
    Directive: 'Directive',
    Service: 'Service'
  };
  Debugmessageliste;
  constructor(Basics, nav, Fehlerservice, Const) {
    this.Basics = Basics;
    this.nav = nav;
    this.Fehlerservice = Fehlerservice;
    this.Const = Const;
    try {
      this.Debugmessageliste = [];
    } catch (error) {}
  }
  ShowErrorMessage(message, script, funktion, typ) {
    try {
      console.log('File: ' + script + ' | Function: ' + funktion + ' | Message: ' + message);
      this.Debugmessageliste.push({
        Skript: script,
        Message: message,
        Function: funktion,
        Color: 'red'
      });
    } catch (error2) {
      debugger;
    }
  }
  ShowMessage(message, script, funktion, typ) {
    try {
      let data = {
        message: message,
        code: '',
        stack: ''
      };
      console.log('File: ' + script + ' | Function: ' + funktion + ' | Message: ' + message);
      this.Debugmessageliste.push({
        Skript: script,
        Message: message,
        Function: funktion,
        Color: 'blue'
      });
    } catch (error) {
      debugger;
    }
  }
  static ctorParameters = () => [{
    type: basics_1.BasicsProvider
  }, {
    type: angular_1.NavController
  }, {
    type: error_service_1.ErrorService
  }, {
    type: const_1.ConstProvider
  }];
};
exports.DebugProvider = DebugProvider;
exports.DebugProvider = DebugProvider = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], DebugProvider);

/***/ }),

/***/ 21052:
/*!****************************************************!*\
  !*** ./src/app/services/diplay/display.service.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DisplayService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const lodash_es_1 = __webpack_require__(/*! lodash-es */ 55600);
let DisplayService = class DisplayService {
  Debug;
  Dialognamen = {
    Auswahldialog: 'Auswahldialog',
    Mitarbeiterauswahl: 'Mitarbeiterauswahl',
    Projekteditor: 'Projekteditor',
    Beteiligteneditor: 'Beteiligteneditor',
    Firmeneditor: 'Firmeneditor',
    Mitarbeitereditor: 'Mitarbeitereditor',
    Standorteditor: 'Standorteditor',
    Changelogeditor: 'Changelogeditor',
    Favoriteneditor: 'Favoriteneditor',
    Favoritenauswahl: 'Favoritenauswahl',
    Projekteauswahl: 'Projekteauswahl',
    Bauteileditor: 'Bauteileditor',
    Geschosseditor: 'Geschosseditor',
    Raumeditor: 'Raumeditor',
    AufgabeProjektauswahl: 'AufgabeProjektauswahl',
    Projektpunteditor: 'Projektpunteditor',
    Beteiligteauswahl: 'Beteiligteauswahl',
    Firmenauswahl: 'Firmenauswahl',
    Protokolleditor: 'Protokolleditor',
    Kostengruppenauswahl: 'Kostengruppenauswahl',
    Raumauswahl: 'Raumauswahl',
    Protokolllistefilter: 'Protokolllistefilter',
    Aufgabenlistefilter: 'Aufgabenlistefilter',
    Meinewocheeditor: 'Meinewocheeditor',
    ProjektpunktStatusDatePicker: 'ProjektpunktStatusDatePicker',
    ProjektpunktDateKwPicker: 'ProjektpunktDateKwPicker',
    Verzeichnisauswahl: 'Verzeichnisauswahl',
    Bilderauswahl: 'Bilderauswahl',
    Outlookkontakteauswahl: 'Outlookkontakteauswahl',
    ProjektSendeEmail: 'ProjektSendeEmail',
    Bautagebucheditor: 'Bautagebucheditor',
    Bautagebucheintrageditor: 'Bautagebucheintrageditor',
    LOPListeEditor: 'LOPListeEditor',
    LOPListeEintragEditor: 'LOPListeEintragEditor',
    Planungsmatrixeintrageditor: 'Planungsmatrixeintrageditor',
    Notizenkapiteleditor: 'Notizenkapiteleditor',
    Festlegungkategorieneditor: 'Festlegungkategorieneditor',
    Simontabelleeditor: 'Simontabelleeditor',
    Simontabellelesitungeditor: 'Simontabellelesitungeditor',
    RechnungEditor: 'RechnungEditor'
  };
  Dialogliste;
  constructor(Debug) {
    this.Debug = Debug;
    try {
      this.Dialogliste = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Display', 'constructor', this.Debug.Typen.Service);
    }
  }
  ResetDialogliste() {
    try {
      this.Dialogliste = [];
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Display', 'ResetDialogliste', this.Debug.Typen.Service);
    }
  }
  AddDialog(name, zindex) {
    try {
      let Dialog = lodash.find(this.Dialogliste, {
        Dialogname: name
      });
      if (lodash.isUndefined(Dialog)) {
        this.Dialogliste.push({
          Dialogname: name,
          ZIndex: zindex
        });
      } else {
        this.Debug.ShowErrorMessage(new Error('Add Dialog Fehler: ' + name), 'Dialog', 'AddDialog', this.Debug.Typen.Service);
      }
      (0, lodash_es_1.forEach)(this.Dialogliste, Eintrag => {
        console.log(Eintrag);
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Dialog', 'AddDialog', this.Debug.Typen.Service);
    }
  }
  RemoveDialog(name) {
    try {
      this.Dialogliste = lodash.filter(this.Dialogliste, dialog => {
        return dialog.Dialogname !== name;
      });
      if (this.Dialogliste.length === 0) {
        this.Debug.ShowMessage('Dialogliste ist leer.', 'Dialog', 'RemoveDialog', this.Debug.Typen.Service);
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Dialog', 'RemoveDialog', this.Debug.Typen.Service);
    }
  }
  ShowOpacity(name) {
    try {
      let Maximum = 0;
      let Wert = 0;
      let Dialogname;
      (0, lodash_es_1.forEach)(this.Dialogliste, Eintrag => {
        if (Eintrag.ZIndex > Maximum) Maximum = Eintrag.ZIndex;
        if (Eintrag.Dialogname === name) {
          Wert = Eintrag.ZIndex;
          Dialogname = Eintrag.Dialogname;
        }
      });
      if (Wert >= Maximum) {
        // this.Debug.ShowMessage(Dialogname + ' ganz oben. Z-Index: ' + Wert, 'Dialog', 'ShowOpacity', this.Debug.Typen.Service);
        return true;
      } else return false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Dialog', 'ShowOpacity', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }];
};
exports.DisplayService = DisplayService;
exports.DisplayService = DisplayService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], DisplayService);

/***/ }),

/***/ 34396:
/*!*************************************************!*\
  !*** ./src/app/services/error/error.service.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ErrorService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
let ErrorService = class ErrorService {
  Const;
  // public Fehlerparameter: Fehlermeldungparameterstruktur;
  Fehlermeldung;
  CanGoBack;
  constructor(Const) {
    this.Const = Const;
    try {
      this.Fehlermeldung = [];
      this.CanGoBack = true;
    } catch (error) {}
  }
  static ctorParameters = () => [{
    type: const_1.ConstProvider
  }];
};
exports.ErrorService = ErrorService;
exports.ErrorService = ErrorService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], ErrorService);

/***/ }),

/***/ 8608:
/*!*****************************************!*\
  !*** ./src/app/services/graph/graph.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 76964)["default"]);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Graphservice = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const msal_angular_1 = __webpack_require__(/*! @azure/msal-angular */ 38460);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
const platform_browser_1 = __webpack_require__(/*! @angular/platform-browser */ 50168);
const database_authentication_service_1 = __webpack_require__(/*! ../database-authentication/database-authentication.service */ 97092);
const microsoft_graph_client_1 = __webpack_require__(/*! @microsoft/microsoft-graph-client */ 14232);
const tools_1 = __webpack_require__(/*! ../tools/tools */ 19668);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 7992);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
// import {DatabaseOutlookemailService} from "../database-email/database-outlookemail.service";
const basics_1 = __webpack_require__(/*! ../basics/basics */ 14652);
let Graphservice = class Graphservice {
  msalGuardConfig;
  Debug;
  Const;
  AuthService;
  Tools;
  Basics;
  Pool;
  domSanitizer;
  ImageZoomOut = new core_1.EventEmitter();
  Graphuser;
  Teamsliste;
  UserimageSRC;
  TeamsRootfilelist;
  TeamsCurrentfilelist;
  TeamsSubdirectorylist;
  CurrentTeamsID;
  // public Outlookkontakteliste: Outlookkontaktestruktur[];
  CurrentPDFDownload;
  KalenderKW;
  // public Outlookpresetcolors:Outlookpresetcolorsstruktur[];
  BAESiteID;
  FilebrowserModus;
  FilebrowserModusvarianten = {
    Alle_Projekte: 'Alle_Projekte',
    Current_Projekt: 'Current_Projekt'
  };
  constructor(msalGuardConfig, Debug, Const, AuthService, Tools, Basics, Pool, domSanitizer) {
    this.msalGuardConfig = msalGuardConfig;
    this.Debug = Debug;
    this.Const = Const;
    this.AuthService = AuthService;
    this.Tools = Tools;
    this.Basics = Basics;
    this.Pool = Pool;
    this.domSanitizer = domSanitizer;
    try {
      this.Graphuser = null;
      this.UserimageSRC = null;
      this.Teamsliste = [];
      this.TeamsRootfilelist = [];
      this.TeamsCurrentfilelist = [];
      this.TeamsSubdirectorylist = [];
      this.CurrentTeamsID = 'ea457111-b3f1-4c73-a8ae-cb1cbaf6d244'; // Köferinger Straße 20
      this.CurrentPDFDownload = null;
      // this.Outlookkontakteliste  = [];
      this.FilebrowserModus = this.FilebrowserModusvarianten.Alle_Projekte;
      this.KalenderKW = (0, moment_1.default)().locale('de').isoWeek();
      /*
      this.Outlookpresetcolors   = [
               { Name: 'none',     Value: 'none',    Fontcolor: 'white' },
        { Name: 'Preset0',  Value: '#dc626d', Fontcolor: 'black' }, // Red
        { Name: 'Preset1',  Value: '#e8825d', Fontcolor: 'black' },
        { Name: 'Preset2',  Value: '#ffcd8f', Fontcolor: 'black' }, // Brown
        { Name: 'Preset3',  Value: '#5f5f58', Fontcolor: 'white' }, // Yellow
        { Name: 'Preset4',  Value: '#52ce90', Fontcolor: 'black' }, // Green
        { Name: 'Preset5',  Value: '#57d2da', Fontcolor: 'white' }, // Teal
        { Name: 'Preset6',  Value: '#5c5f53', Fontcolor: 'white' }, // Olive
        { Name: 'Preset7',  Value: '#5ca9e5', Fontcolor: 'white' },  // Blue
        { Name: 'Preset8',  Value: '#53525a', Fontcolor: 'white' }, // Purple
        { Name: 'Preset9',  Value: '#ee5fb7', Fontcolor: 'black' },
        { Name: 'Preset10', Value: '#c5ced1', Fontcolor: 'white' }, // 'Steel'
        { Name: 'Preset11', Value: '#5d6567', Fontcolor: 'white' },
        { Name: 'Preset12', Value: '#c3c5bb', Fontcolor: 'white' },
        { Name: 'Preset13', Value: '#9fadb1', Fontcolor: 'white' },
        { Name: 'Preset14', Value: '#8f8f8f', Fontcolor: 'white'}, // Black
        { Name: 'Preset15', Value: '#ac4e5e', Fontcolor: 'black' },
        { Name: 'Preset16', Value: '#df8e64', Fontcolor: 'white' },
        { Name: 'Preset17', Value: '#bc8f6f', Fontcolor: 'white' },
        { Name: 'Preset18', Value: '#dac257', Fontcolor: 'black' },
        { Name: 'Preset19', Value: '#4ca64c', Fontcolor: 'white' },
        { Name: 'Preset20', Value: '#4bb4b7', Fontcolor: 'white' },
        { Name: 'Preset21', Value: '#85b44c', Fontcolor: 'white' }, // DarkOlive
        { Name: 'Preset22', Value: '#4179a3', Fontcolor: 'white' }, // DarkBlue
        { Name: 'Preset23', Value: '#8f6fbc', Fontcolor: 'white' },
        { Name: 'Preset24', Value: '#c34e98', Fontcolor: 'black' },
               { Name: 'PresetFeiertag', Value: '#b0d6f2', Fontcolor: 'black' },
      ];
              */
      this.BAESiteID = 'baeeu.sharepoint.com,1b93d6ea-3f8b-4416-9ff1-a50aaba6f8ca,134790cc-e062-4882-ae5e-18813809cc87'; // Projekte Seite
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Graph', 'constructor', this.Debug.Typen.Service);
    }
  }
  /*
  public async GetOwnOutlookcontacts(withemailonly: boolean): Promise<any> {
       try {
         let Valueliste: any[]    = [];
      let data: any;
      let nexturl: any;
      let count: number = 0;
      let Eintrag: Outlookkontaktestruktur;
         let token = await this.AuthService.RequestToken('Contacts.ReadWrite');
         if(token !== null) {
           const graphClient = Client.init({ authProvider: (done: AuthProviderCallback) => {
               done(null, token);
          }
        });
           data = await graphClient.api('/me/contacts').count().get();
           if(!lodash.isUndefined(data['@odata.count'])) count = data['@odata.count'];
           if(!lodash.isUndefined(data.value)) {
             Valueliste.push(data.value);
             if(!lodash.isUndefined(data['@odata.nextLink'])) {
               do {
                 nexturl = data['@odata.nextLink'];
              data    = await graphClient.api(nexturl).get();
                 if(!lodash.isUndefined(data.value)) Valueliste.push(data.value);
               }
            while(!lodash.isUndefined(data['@odata.nextLink']));
               if(!lodash.isUndefined(data.value)) Valueliste.push(data.value);
          }
        }
           this.Outlookkontakteliste = [];
           for(let Liste of Valueliste) {
             for(Eintrag of Liste) {
               if(Eintrag.givenName !== null && Eintrag.givenName.toLowerCase() === 'lars' || Eintrag.surname !== null && Eintrag.surname.toLowerCase() === 'lars') {
                 debugger;
            }
               if(Eintrag.title !== null && Eintrag.title !== '' && Eintrag.displayName !== null) {
                 Eintrag.displayName = Eintrag.displayName.replace(Eintrag.title + ' ', '');
            }
               if(lodash.isUndefined(Eintrag.businessAddress)) {
                 Eintrag.businessAddress = {
                   street: '',
                city: '',
                state: '',
                postalCode: '',
                countryOrRegion: ''
              };
            }
               if(lodash.isUndefined(Eintrag.businessAddress.street)          || Eintrag.businessAddress.street          === null) Eintrag.businessAddress.street          = '';
            if(lodash.isUndefined(Eintrag.businessAddress.city)            || Eintrag.businessAddress.city            === null) Eintrag.businessAddress. city           = '';
            if(lodash.isUndefined(Eintrag.businessAddress.postalCode)      || Eintrag.businessAddress.postalCode      === null) Eintrag.businessAddress.postalCode      = '';
            if(lodash.isUndefined(Eintrag.businessAddress.state)           || Eintrag.businessAddress.state           === null) Eintrag.businessAddress.state           = '';
            if(lodash.isUndefined(Eintrag.businessAddress.countryOrRegion) || Eintrag.businessAddress.countryOrRegion === null) Eintrag.businessAddress.countryOrRegion = '';
               if(lodash.isUndefined(Eintrag.title)       || Eintrag.title       === null) Eintrag.title       = '';
            if(lodash.isUndefined(Eintrag.displayName) || Eintrag.displayName === null) Eintrag.displayName = '';
            if(lodash.isUndefined(Eintrag.surname)     || Eintrag.surname     === null) Eintrag.surname     = '';
            if(lodash.isUndefined(Eintrag.givenName)   || Eintrag.givenName   === null) Eintrag.givenName   = '';
            if(lodash.isUndefined(Eintrag.companyName) || Eintrag.companyName === null) Eintrag.companyName = '';
               if(Eintrag.surname === '' && Eintrag.givenName !== '') {
                 Eintrag.surname   = Eintrag.givenName;
              Eintrag.givenName = '';
            }
               if(Eintrag.surname === '' && Eintrag.givenName === '' && Eintrag.displayName === '') {
                 Eintrag.IsCompany   = true;
              Eintrag.surname     = Eintrag.companyName;
              Eintrag.companyName = '';
            }
            else {
                 Eintrag.IsCompany = false;
            }
               if(withemailonly) {
                 if(Eintrag.emailAddresses.length > 0) this.Outlookkontakteliste.push(Eintrag);
            }
            else {
                 this.Outlookkontakteliste.push(Eintrag);
            }
          }
        }
           return Promise.resolve(true);
      }
      else {
           return Promise.reject(false);
      }
       } catch (error) {
         this.Debug.ShowErrorMessage(error, 'Graph', 'GetOwnOutlookcontacts', this.Debug.Typen.Service);
    }
  }
  */
  /*
     public OutlookcontactToBeteiligte(kontakt: Outlookkontaktestruktur): Projektbeteiligtestruktur {
       try {
         let Beteiligter: Projektbeteiligtestruktur;
      let Beteiligteneintragtyp:string;
         if(kontakt.IsCompany) {
           Beteiligteneintragtyp = this.Const.Beteiligteneintragtypen.Firma;
      }
      else {
           Beteiligteneintragtyp = this.Const.Beteiligteneintragtypen.Person;
      }
   
         Beteiligter = {
           Anrede: kontakt.title,
        BeteiligtenID: kontakt.id,
        FirmaID: null,
        Email: kontakt.emailAddresses.length > 0 ? kontakt.emailAddresses[0].address : '',
        Possition: kontakt.profession,
        Mobil: kontakt.mobilePhone,
        Name: kontakt.surname,
        Vorname: kontakt.givenName,
        Ort: kontakt.businessAddress.city,
        PLZ: kontakt.businessAddress.postalCode,
        Strasse: "",
        Telefon: kontakt.businessPhones.length > 0 ? kontakt.businessPhones[0] : '',
        Verfasser: {
             Vorname: this.Pool.Mitarbeiterdaten.Vorname,
          Name:  this.Pool.Mitarbeiterdaten.Name,
          Email: this.Pool.Mitarbeiterdaten.Email
        },
      };
         return Beteiligter;
       } catch (error) {
         this.Debug.ShowErrorMessage(error, 'Graph', 'OutlookcontactToBeteiligte', this.Debug.Typen.Service);
    }
  }
  */
  GetOwnUserinfo() {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this.AuthService.RequestToken('user.read');
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        return new Promise((resolve, reject) => {
          if (token !== null) {
            graphClient.api('/me').select('*').get().then(result => {
              _this.Graphuser = result;
              resolve(true);
            }).catch(error => {
              switch (error.code) {
                case "InvalidAuthenticationToken":
                  // this.AuthService.AccessTokenExpired = true;
                  _this.AuthService.UnsetActiveUser();
                  _this.Tools.SetRootPage(_this.Const.Pages.HomePage);
                  break;
                default:
                  // debugger;
                  break;
              }
              reject(error);
            });
          } else {
            reject(false);
          }
        });
      } catch (error) {
        _this.Debug.ShowErrorMessage(error, 'Graph', 'GetOwnUserinfo', _this.Debug.Typen.Service);
      }
    })();
  }
  /*
     public async GetOwnOutlookCategories(): Promise<Outlookkategoriesstruktur[]> {
       try {
         let token = await this.AuthService.RequestToken('MailboxSettings.Read');
      let data: any;
      let Liste: Outlookkategoriesstruktur[] = [];
         const graphClient = Client.init({ authProvider: (done: AuthProviderCallback) => {
             done(null, token);
        }
      });
         try {
           data = await graphClient.api('/me/outlook/masterCategories').get();
           if(!lodash.isUndefined(data.value)) {
             for(let Eintrag of data.value) {
               Liste.push(Eintrag);
               console.log(Eintrag.id);
          }
        }
           Liste.push({
             displayName: 'Feiertag',
          id:          'feiertrag',
          color:       'PresetFeiertag'
        });
           Liste.sort( (a: Outlookkategoriesstruktur, b: Outlookkategoriesstruktur) => {
             if (a.displayName < b.displayName) return -1;
          if (a.displayName > b.displayName) return 1;
          return 0;
        });
           return Liste;
      }
      catch(error: any) {
           return error;
      }
    }
    catch (error)  {
         this.Debug.ShowErrorMessage(error, 'Graph', 'GetOwnOutlookCategories', this.Debug.Typen.Service);
    }
  }
   
   */
  /*
     public async GetTeamsSubdirictoryfilelist(teamsid: string, file: Teamsfilesstruktur, showfiles: boolean) {
       try {
         let token = await this.AuthService.RequestToken('user.read');
      let Eintrag: Teamsfilesstruktur;
         this.TeamsRootfilelist = [];
         const graphClient = Client.init({ authProvider: (done: AuthProviderCallback) => {
             done(null, token);
        }
      });
         return new Promise((resolve, reject) => {
           if(token !== null) {
   
          graphClient.api('/groups/' + teamsid + '/drive/items/' + file.id + '/children').get().then((result: any) => {
               for(Eintrag of result.value) {
                 if(!lodash.isUndefined(Eintrag.folder)) Eintrag.isfolder = true;
              else Eintrag.isfolder = false;
                 this.TeamsRootfilelist.push(Eintrag);
            }
               if(showfiles === false) this.TeamsRootfilelist = lodash.filter(this.TeamsRootfilelist, {isfolder : true});
               this.TeamsCurrentfilelist = this.TeamsRootfilelist;
               this.TeamsSubdirectorylist.push(file);
               resolve(true);
             }).catch((error: GraphError) => {
               reject(error);
          });
        }
        else {
             reject(false);
        }
      });
       } catch (error) {
         this.Debug.ShowErrorMessage(error, 'Graph', 'GetTeamsSubdirictoryfilelist', this.Debug.Typen.Service);
    }
  }
      */
  GetEmptyTeamsfile() {
    try {
      return {
        cTag: "",
        createdBy: {
          user: {
            displayName: "",
            email: "",
            id: ""
          }
        },
        createdDateTime: "",
        eTag: "",
        fileSystemInfo: {
          createdDateTime: "",
          lastModifiedDateTime: ""
        },
        id: "",
        lastModifiedBy: {},
        lastModifiedDateTime: "",
        name: "",
        parentReference: {
          driveId: "",
          driveType: "",
          id: "",
          path: ""
        },
        shared: {
          scope: ""
        },
        size: 0,
        webUrl: ""
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Graph', 'GetEmptyTeamsfile', this.Debug.Typen.Service);
    }
  }
  GetSiteSubdirictoryfilelist(file, showfiles) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this2.AuthService.RequestToken('user.read');
        let Eintrag;
        let Dateiliste = [];
        let Verzeichnisliste = [];
        _this2.TeamsRootfilelist = [];
        _this2.TeamsCurrentfilelist = [];
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        return new Promise((resolve, reject) => {
          if (token !== null) {
            graphClient.api('/sites/' + _this2.BAESiteID + '/drive/items/' + file.id + '/children').get().then(result => {
              for (Eintrag of result.value) {
                if (lodash.isUndefined(Eintrag.file)) {
                  Eintrag.isfolder = true;
                  Verzeichnisliste.push(Eintrag);
                } else {
                  Eintrag.isfolder = false;
                  Dateiliste.push(Eintrag);
                }
                // this.TeamsRootfilelist.push(Eintrag);
              }
              Verzeichnisliste.sort((a, b) => {
                if (a.name < b.name) return -1;
                if (a.name > b.name) return 1;
                return 0;
              });
              Dateiliste.sort((a, b) => {
                if (a.name < b.name) return -1;
                if (a.name > b.name) return 1;
                return 0;
              });
              if (showfiles === false) {
                _this2.TeamsRootfilelist = Verzeichnisliste;
                // this.TeamsRootfilelist = lodash.filter(this.TeamsRootfilelist, {isfolder : true});
              } else {
                _this2.TeamsRootfilelist = Verzeichnisliste;
                _this2.TeamsRootfilelist = _this2.TeamsRootfilelist.concat(Dateiliste);
              }
              _this2.TeamsCurrentfilelist = _this2.TeamsRootfilelist;
              if (lodash.isUndefined(lodash.find(_this2.TeamsSubdirectorylist, eintrag => {
                return eintrag.id === file.id;
              }))) {
                _this2.TeamsSubdirectorylist.push(file);
              } else {}
              resolve(true);
            }).catch(error => {
              debugger;
              reject(error);
            });
          } else {
            reject(false);
          }
        });
      } catch (error) {
        _this2.Debug.ShowErrorMessage(error, 'Graph', 'GetSiteSubdirictoryfilelist', _this2.Debug.Typen.Service);
      }
    })();
  }
  DownloadPDFTeamsFile(teamsid, file) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this3.AuthService.RequestToken('user.read');
        let Download = {
          name: file.name,
          id: '',
          context: '',
          url: ''
        };
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        return new Promise((resolve, reject) => {
          if (token !== null) {
            graphClient.api('/groups/' + teamsid + '/drive/items/' + file.id + '?select=id,@microsoft.graph.downloadUrl').get().then(result => {
              Download.id = result.id;
              Download.url = result['@microsoft.graph.downloadUrl'];
              Download.context = result['@odata.context'];
              _this3.CurrentPDFDownload = Download;
              resolve(Download);
            }).catch(error => {
              debugger;
              reject(error);
            });
          } else {
            reject(null);
          }
        });
      } catch (error) {
        _this3.Debug.ShowErrorMessage(error, 'Graph', 'DownloadPDFTeamsFile', _this3.Debug.Typen.Service);
      }
    })();
  }
  DownloadPDFSiteFile(file) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this4.AuthService.RequestToken('user.read');
        let Download = {
          name: file.name,
          id: '',
          context: '',
          url: ''
        };
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        return new Promise((resolve, reject) => {
          if (token !== null) {
            graphClient.api('/sites/' + _this4.BAESiteID + '/drive/items/' + file.id + '?select=id,@microsoft.graph.downloadUrl').get().then(result => {
              Download.id = result.id;
              Download.url = result['@microsoft.graph.downloadUrl'];
              Download.context = result['@odata.context'];
              _this4.CurrentPDFDownload = Download;
              resolve(Download);
            }).catch(error => {
              debugger;
              reject(error);
            });
          } else {
            reject(null);
          }
        });
      } catch (error) {
        _this4.Debug.ShowErrorMessage(error, 'Graph', 'DownloadPDFSiteFile', _this4.Debug.Typen.Service);
      }
    })();
  }
  DownloadPDFSiteFileViaLink(fileid) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this5.AuthService.RequestToken('user.read');
        let Link = document.createElement('a');
        let Download = {
          name: '',
          id: '',
          context: '',
          url: ''
        };
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        return new Promise((resolve, reject) => {
          if (token !== null) {
            graphClient.api('/sites/' + _this5.BAESiteID + '/drive/items/' + fileid + '?select=id,@microsoft.graph.downloadUrl').get().then(result => {
              Download.id = result.id;
              Download.url = result['@microsoft.graph.downloadUrl'];
              Download.context = result['@odata.context'];
              _this5.CurrentPDFDownload = Download;
              document.body.appendChild(Link);
              Link.href = Download.url;
              Link.click();
              Link.remove();
              resolve(Download);
            }).catch(error => {
              debugger;
              reject(error);
            });
          } else {
            reject(null);
          }
        });
      } catch (error) {
        _this5.Debug.ShowErrorMessage(error, 'Graph', 'DownloadPDFSiteFileViaLink', _this5.Debug.Typen.Service);
      }
    })();
  }
  TestGraph() {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this6.AuthService.RequestToken('user.read');
        let GroupID = "632cc6c8-51d5-4219-8092-ed10a792e715"; // Eggolsheim
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        return new Promise((resolve, reject) => {
          if (token !== null) {
            // graphClient.api('/me/memberOf').get().then((result: any) => {
            // me/registeredDevices
            // /me/ownedObjects
            // /me/followedSites
            // /me/joinedTeams
            // /groups/ea457111-b3f1-4c73-a8ae-cb1cbaf6d244/drive/items/root/children
            graphClient.api('/groups/' + GroupID + '/drive/root:/General/11 Jour Fixe').version('beta').get().then(result => {
              // graphClient.api('/groups/ea457111-b3f1-4c73-a8ae-cb1cbaf6d244/drive/items/root/children').version('beta').get().then((result: any) => {
              debugger;
              resolve(true);
            }).catch(error => {
              debugger;
              reject(error);
            });
          } else {
            reject(false);
          }
        });
      } catch (error) {
        _this6.Debug.ShowErrorMessage(error, 'Graph', 'TestGraph', _this6.Debug.Typen.Service);
      }
    })();
  }
  TeamsCheckFileExists(teamsid, directoryid, filename) {
    var _this7 = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this7.AuthService.RequestToken('user.read');
        let FileExists = false;
        let Fileeintrag;
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        directoryid = directoryid.replace('ROOT:', '');
        return new Promise((resolve, reject) => {
          if (token !== null) {
            graphClient.api("/groups/" + teamsid + "/drive/items/" + directoryid + "/children").get().then(result => {
              for (Fileeintrag of result.value) {
                if (lodash.isUndefined(Fileeintrag.folder)) {
                  // Prüfen das Eintrag keine Directory
                  if (Fileeintrag.name === filename) {
                    // Filenamen prüfen auf Übereinstimmung
                    FileExists = true;
                  }
                }
              }
              resolve(FileExists);
            }).catch(error => {
              reject(error);
            });
          } else {
            reject(false);
          }
        });
      } catch (error) {
        _this7.Debug.ShowErrorMessage(error, 'Graph', 'TeamsCheckFileExists', _this7.Debug.Typen.Service);
      }
    })();
  }
  SiteCheckFileExists(directoryid, filename) {
    var _this8 = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this8.AuthService.RequestToken('user.read');
        let FileExists = false;
        let Fileeintrag;
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        directoryid = directoryid.replace('ROOT:', '');
        return new Promise((resolve, reject) => {
          if (token !== null) {
            graphClient.api('/sites/' + _this8.BAESiteID + '/drive/items/' + directoryid + '/children').get().then(result => {
              for (Fileeintrag of result.value) {
                if (lodash.isUndefined(Fileeintrag.folder)) {
                  // Prüfen das Eintrag keine Directory
                  if (Fileeintrag.name === filename) {
                    // Filenamen prüfen auf Übereinstimmung
                    FileExists = true;
                  }
                }
              }
              resolve(FileExists);
            }).catch(error => {
              resolve(null);
            });
          } else {
            reject(false);
          }
        });
      } catch (error) {
        _this8.Debug.ShowErrorMessage(error, 'Graph', 'SiteCheckFileExists', _this8.Debug.Typen.Service);
      }
    })();
  }
  GetTeamsSubDirectory(teamsid, dirid) {
    var _this9 = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this9.AuthService.RequestToken('user.read');
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        return new Promise((resolve, reject) => {
          if (token !== null) {
            graphClient.api('/groups/' + teamsid + '/drive/items/' + dirid).get().then(result => {
              debugger;
              resolve(result);
            }).catch(error => {
              debugger;
              resolve(null);
            });
          } else {
            reject(null);
          }
        });
      } catch (error) {
        _this9.Debug.ShowErrorMessage(error, 'Graph', 'GetTeamsSubDirectory', _this9.Debug.Typen.Service);
      }
    })();
  }
  GetSiteSubDirectory(dirid) {
    var _this10 = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this10.AuthService.RequestToken('user.read');
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        return new Promise((resolve, reject) => {
          if (token !== null) {
            graphClient.api('/sites/' + _this10.BAESiteID + '/drive/items/' + dirid).get().then(result => {
              debugger;
              resolve(result);
            }).catch(error => {
              debugger;
              resolve(null);
            });
          } else {
            reject(null);
          }
        });
      } catch (error) {
        _this10.Debug.ShowErrorMessage(error, 'Graph', 'GetSiteSubDirectory', _this10.Debug.Typen.Service);
      }
    })();
  }
  /*
     public async GetTeamsRootDirectory(teamsid: string): Promise<Teamsfilesstruktur> {
       try {
         let token = await this.AuthService.RequestToken('user.read');
         const graphClient = Client.init({ authProvider: (done: AuthProviderCallback) => {
             done(null, token);
        }
      });
         debugger;
         return new Promise((resolve, reject) => {
           if(token !== null) {
             graphClient.api('/groups/' + teamsid + '/drive/root').get().then((result: Teamsfilesstruktur) => {
               resolve(result);
             }).catch((error: GraphError) => {
   
               resolve(null);
          });
        }
        else {
             reject(null);
        }
      });
       } catch (error) {
         this.Debug.ShowErrorMessage(error, 'Graph', 'GetTeamsRootDirectory', this.Debug.Typen.Service);
    }
  }
      */
  GetAllUsers() {
    var _this11 = this;
    return _asyncToGenerator(function* () {
      try {
        let Userliste = [];
        let Valueliste = [];
        let data;
        let nexturl;
        let count = 0;
        let token = yield _this11.AuthService.RequestToken('User.ReadBasic.All'); // Der Scope ist so richtig und muss in der app.module.de in der Scopliste eingetragens ein
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        data = yield graphClient.api('/users').count().get();
        if (!lodash.isUndefined(data['@odata.count'])) count = data['@odata.count'];
        if (!lodash.isUndefined(data.value)) {
          Valueliste.push(data.value);
          if (!lodash.isUndefined(data['@odata.nextLink'])) {
            do {
              nexturl = data['@odata.nextLink'];
              data = yield graphClient.api(nexturl).get();
              if (!lodash.isUndefined(data.value)) Valueliste.push(data.value);
            } while (!lodash.isUndefined(data['@odata.nextLink']));
            if (!lodash.isUndefined(data.value)) Valueliste.push(data.value);
          }
        }
        for (let Liste of Valueliste) {
          for (let Eintrag of Liste) {
            Userliste.push(Eintrag);
          }
        }
        Userliste = lodash.filter(Userliste, currentuser => {
          return currentuser.mail !== null && currentuser.givenName !== null && currentuser.surname !== null;
        });
        return Promise.resolve(Userliste);
      } catch (error) {
        _this11.Debug.ShowErrorMessage(error, 'Graph', 'GetAllUsers', _this11.Debug.Typen.Service);
      }
    })();
  }
  SendMail(Empfaengerliste, Betreff, Nachricht) {
    var _this12 = this;
    return _asyncToGenerator(function* () {
      try {
        let data;
        let token = yield _this12.AuthService.RequestToken('Mail.ReadWrite');
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        if (_this12.Pool.Appeinstellungen.DebugNoExternalEmail === true) {
          for (let Eintrag of Empfaengerliste) {
            Eintrag.emailAddress.address = 'p.hornburger@gmail.com';
          }
        }
        if (token !== null) {
          const sendMail = {
            message: {
              subject: Betreff,
              body: {
                contentType: 'html',
                content: Nachricht
              },
              toRecipients: Empfaengerliste
            },
            saveToSentItems: 'true'
          };
          try {
            data = yield graphClient.api('/me/sendMail').post(sendMail);
            return Promise.resolve(data);
          } catch (error) {
            debugger;
          }
        } else {
          debugger;
          return Promise.reject(false);
        }
      } catch (error) {
        debugger;
        _this12.Debug.ShowErrorMessage(error, 'Graph', 'SendMail', _this12.Debug.Typen.Service);
      }
    })();
  }
  GetOwnUserimage() {
    var _this13 = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this13.AuthService.RequestToken('user.read');
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        const headers = {
          'Content-Type': 'image/jpeg'
        };
        return new Promise((resolve, reject) => {
          if (token !== null) {
            graphClient.api('/me/photo/$value').headers(headers).responseType(microsoft_graph_client_1.ResponseType.BLOB).get().then(result => {
              _this13.UserimageSRC = _this13.domSanitizer.bypassSecurityTrustUrl(URL.createObjectURL(result));
              resolve(true);
            }).catch(error => {
              switch (error.statusCode) {
                case 404:
                  // Not found
                  _this13.UserimageSRC = null;
                  resolve(true);
                  break;
                default:
                  debugger;
                  break;
              }
              reject(error);
            });
          } else {
            reject(false);
          }
        });
      } catch (error) {
        debugger;
        _this13.Debug.ShowErrorMessage(error, 'Graph', 'GetOwnUserinfo', _this13.Debug.Typen.Service);
      }
    })();
  }
  GetOtherUserimage(userid) {
    var _this14 = this;
    return _asyncToGenerator(function* () {
      try {
        let token = yield _this14.AuthService.RequestToken('user.read');
        let UserImageSRC;
        const graphClient = microsoft_graph_client_1.Client.init({
          authProvider: done => {
            done(null, token);
          }
        });
        const headers = {
          'Content-Type': 'image/jpeg'
        };
        return new Promise((resolve, reject) => {
          if (token !== null) {
            graphClient.api('/users/' + userid + '/photo/$value').headers(headers).responseType(microsoft_graph_client_1.ResponseType.BLOB).get().then(result => {
              UserImageSRC = _this14.domSanitizer.bypassSecurityTrustUrl(URL.createObjectURL(result));
              resolve(UserImageSRC);
            }).catch(error => {
              switch (error.statusCode) {
                case 404:
                  // Not found
                  UserImageSRC = null;
                  resolve(UserImageSRC);
                  break;
                default:
                  debugger;
                  break;
              }
              reject(error);
            });
          } else {
            reject(false);
          }
        });
      } catch (error) {
        debugger;
        _this14.Debug.ShowErrorMessage(error, 'Graph', 'GetOwnUserinfo', _this14.Debug.Typen.Service);
      }
    })();
  }
  static ctorParameters = () => [{
    type: undefined,
    decorators: [{
      type: core_1.Inject,
      args: [msal_angular_1.MSAL_GUARD_CONFIG]
    }]
  }, {
    type: debug_1.DebugProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_authentication_service_1.DatabaseAuthenticationService
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: basics_1.BasicsProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }, {
    type: platform_browser_1.DomSanitizer
  }];
};
exports.Graphservice = Graphservice;
exports.Graphservice = Graphservice = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], Graphservice);

/***/ }),

/***/ 33940:
/*!***************************************************************!*\
  !*** ./src/app/services/loadinganimation/loadinganimation.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.LoadingAnimationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const basics_1 = __webpack_require__(/*! ../basics/basics */ 14652);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848);
let LoadingAnimationService = class LoadingAnimationService {
  Debug;
  Loader;
  Basics;
  AjaxTime;
  constructor(Debug, Loader, Basics) {
    this.Debug = Debug;
    this.Loader = Loader;
    this.Basics = Basics;
    try {
      this.AjaxTime = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'file', 'constructor', this.Debug.Typen.Service);
    }
  }
  ShowLoadingAnimation(title, message) {
    try {
      let HTML = `
      <table cellpadding="10" cellspacing="10">
        <tr>
          <td class="loadingtitleclass">` + title + `</td>
        </tr>
        <tr>
          <td class="loadingmessageclass"><br>` + message + `</td>
        </tr>
      </table>`;
      let Options = {
        spinner: 'lines',
        message: HTML,
        cssClass: 'loadingclass',
        showBackdrop: true,
        enableBackdropDismiss: false,
        translucent: false,
        dismissOnPageChange: false
      };
      return new Promise((resolve, reject) => {
        this.AjaxTime = new Date().getTime();
        this.Loader.create(Options).then(res => {
          res.present();
          resolve(true);
        }).catch(error => {
          reject(error);
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Loading Message Provider', 'ShowLoadingAnimation', this.Debug.Typen.Service);
    }
  }
  HideLoadingAnimation(wait) {
    try {
      let WaitTime = this.Basics.Waittime;
      let TotalTime;
      if (this.AjaxTime !== null) TotalTime = new Date().getTime() - this.AjaxTime;else {
        TotalTime = WaitTime + 1;
      }
      return new Promise(resolve => {
        if (wait) {
          if (WaitTime > TotalTime) WaitTime = WaitTime - TotalTime;else WaitTime = 0;
          setTimeout(() => {
            this.Loader.dismiss().then(() => {
              resolve(true);
            }).catch(error => {
              resolve(true);
            });
          }, WaitTime);
        } else {
          return this.Loader.dismiss().then(() => {
            resolve(true);
          }).catch(error => {
            resolve(true);
          });
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Loading Message Provider', 'HideLoadingAnimation', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: angular_1.LoadingController
  }, {
    type: basics_1.BasicsProvider
  }];
};
exports.LoadingAnimationService = LoadingAnimationService;
exports.LoadingAnimationService = LoadingAnimationService = tslib_1.__decorate([(0, core_1.Injectable)()], LoadingAnimationService);

/***/ }),

/***/ 59460:
/*!*************************************************!*\
  !*** ./src/app/services/menue/menue.service.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MenueService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const tools_1 = __webpack_require__(/*! ../tools/tools */ 19668);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
let MenueService = class MenueService {
  Debug;
  Tools;
  Const;
  MainMenuebereich;
  MainMenuebereiche = {
    Home: 'Home',
    Email: 'Email',
    Debug: 'Debug',
    Logout: 'Logout',
    Einstellungen: 'Einstellungen',
    Projekte: 'Projekte',
    Urlaubsplanung: 'Urlaubsplanung'
  };
  UrlaubMenuebereich;
  UrlaubMenuebereiche = {
    Planung: 'Planung',
    Uebersicht: 'Uebersicht',
    Gesamtplanung: 'Gesamtplanung',
    Einstellungen: 'Einstellungen',
    Freigaben: 'Freigaben'
  };
  ProjekteMenuebereich;
  ProjekteMenuebereiche = {
    Aufgabenliste: 'Aufgabenliste',
    Protokolle: 'Protokolle',
    LOPListe: 'LOP Liste',
    Bautagebuch: 'Bautagebuch',
    Festlegungen: 'Festlegungen',
    Planungsmatrix: 'Planungsmatrix',
    Simontabelle: 'Simontabelle',
    Fileliste: 'Fileliste',
    Notizen: 'Notizen'
  };
  Aufgabenlisteansicht;
  Aufgabenlisteansichten = {
    Mein_Tag: 'Mein Tag',
    Meine_Woche: 'Meine Woche',
    Meilensteine: 'Meilensteine',
    Projekt: 'Projekt',
    Alle: 'Alle'
  };
  FirmaMenuebereich;
  FirmaMenuebereiche = {
    Standorte: 'Standorte',
    Mitarbeiter: 'Mitarbeiter',
    Projekte: 'Projekte',
    Favoriten: 'Favoriten',
    Play: 'Play'
  };
  FilelisteAufrufer;
  FilelisteAufrufervarianten = {
    Aufgabenliste: 'Aufgabenliste',
    Protokollliste: 'Protokollliste',
    LOPListe: 'LOP Liste',
    Bautagebuch: 'Bautagebuch',
    Festlegungen: 'Festlegungen',
    Simontabelle: 'Simontabelle',
    ImageZoom: 'ImageZoom'
  };
  constructor(Debug, Tools, Const) {
    this.Debug = Debug;
    this.Tools = Tools;
    this.Const = Const;
    try {
      this.MainMenuebereich = this.MainMenuebereiche.Projekte;
      this.FirmaMenuebereich = this.FirmaMenuebereiche.Projekte;
      this.ProjekteMenuebereich = this.ProjekteMenuebereiche.Aufgabenliste;
      this.UrlaubMenuebereich = this.UrlaubMenuebereiche.Planung;
      this.Aufgabenlisteansicht = this.Aufgabenlisteansichten.Projekt;
      this.FilelisteAufrufer = this.FilelisteAufrufervarianten.Aufgabenliste;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Menue', 'constructor', this.Debug.Typen.Service);
    }
  }
  SetCurrentPage() {
    try {
      switch (this.MainMenuebereich) {
        case this.MainMenuebereiche.Home:
          this.Tools.SetRootPage(this.Const.Pages.HomePage);
          break;
        case this.MainMenuebereiche.Email:
          this.Tools.SetRootPage(this.Const.Pages.EmaillistePage);
          break;
        case this.MainMenuebereiche.Urlaubsplanung:
          switch (this.UrlaubMenuebereich) {
            case this.UrlaubMenuebereiche.Planung:
              this.Tools.SetRootPage(this.Const.Pages.UrlaubPlanungPage);
              break;
            case this.UrlaubMenuebereiche.Uebersicht:
              this.Tools.SetRootPage(this.Const.Pages.UrlaubUebersichtPage);
              break;
            case this.UrlaubMenuebereiche.Gesamtplanung:
              this.Tools.SetRootPage(this.Const.Pages.UrlaubsgesamtuebersichtPage);
              break;
            case this.UrlaubMenuebereiche.Freigaben:
              this.Tools.SetRootPage(this.Const.Pages.UrlaubFreigabenPage);
              break;
            case this.UrlaubMenuebereiche.Einstellungen:
              this.Tools.SetRootPage(this.Const.Pages.UrlaubEinstellungenPage);
              break;
            case this.UrlaubMenuebereiche.Freigaben:
              break;
          }
          break;
        case this.MainMenuebereiche.Projekte:
          switch (this.ProjekteMenuebereich) {
            case this.ProjekteMenuebereiche.Notizen:
              this.Tools.SetRootPage(this.Const.Pages.PjNotizenListePage);
              break;
            case this.ProjekteMenuebereiche.Aufgabenliste:
              switch (this.Aufgabenlisteansicht) {
                case this.Aufgabenlisteansichten.Alle:
                  this.Tools.SetRootPage(this.Const.Pages.PjAufgabenlistePage);
                  break;
                case this.Aufgabenlisteansichten.Mein_Tag:
                  this.Tools.SetRootPage(this.Const.Pages.PjAufgabenlistePage);
                  break;
                case this.Aufgabenlisteansichten.Meine_Woche:
                  this.Tools.SetRootPage(this.Const.Pages.PjAufgabenlistePage);
                  break;
                case this.Aufgabenlisteansichten.Meilensteine:
                  this.Tools.SetRootPage(this.Const.Pages.PjAufgabenlistePage);
                  break;
                case this.Aufgabenlisteansichten.Projekt:
                  this.Tools.SetRootPage(this.Const.Pages.PjAufgabenlistePage);
                  break;
              }
              break;
            case this.ProjekteMenuebereiche.Fileliste:
              this.Tools.PushPage(this.Const.Pages.PjFilebrowserPage);
              break;
            case this.ProjekteMenuebereiche.Protokolle:
              this.Tools.SetRootPage(this.Const.Pages.PjProtokolleListePage);
              break;
            case this.ProjekteMenuebereiche.LOPListe:
              this.Tools.SetRootPage(this.Const.Pages.PjBaustelleLoplistePage);
              break;
            case this.ProjekteMenuebereiche.Bautagebuch:
              this.Tools.SetRootPage(this.Const.Pages.PjBaustelleTagebuchlistePage);
              break;
            case this.ProjekteMenuebereiche.Festlegungen:
              this.Tools.SetRootPage(this.Const.Pages.PjFestlegungslistePage);
              break;
            case this.ProjekteMenuebereiche.Planungsmatrix:
              this.Tools.SetRootPage(this.Const.Pages.PjPlanungsmatrixPage);
              break;
            case this.ProjekteMenuebereiche.Simontabelle:
              this.Tools.SetRootPage(this.Const.Pages.PjSimontabellelistePage);
              break;
          }
          break;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Menue', 'SetCurrentPage', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: const_1.ConstProvider
  }];
};
exports.MenueService = MenueService;
exports.MenueService = MenueService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], MenueService);

/***/ }),

/***/ 77200:
/*!*******************************************************!*\
  !*** ./src/app/services/navparameter/navparameter.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Navparameter = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
let Navparameter = class Navparameter {
  Const;
  NavListe;
  CanGoBack;
  Debugstatus;
  constructor(Const) {
    this.Const = Const;
    try {
      this.NavListe = [];
      this.CanGoBack = false;
      this.Debugstatus = true;
    } catch (error) {
      console.log(error, 'Nav Parameter -> constructor:' + error);
    }
  }
  RemovePage() {
    try {
      let Lastpage = null;
      if (this.NavListe.length > 1) {
        this.NavListe.splice(this.NavListe.length - 1, 1);
        Lastpage = this.NavListe[this.NavListe.length - 1];
        if (this.NavListe.length > 1) this.CanGoBack = true;else this.CanGoBack = false;
      } else this.CanGoBack = false;
      if (this.Debugstatus) {
        console.log('Navparamter -> Removed Page');
        this.PrintNavliste();
      }
      return Lastpage;
    } catch (error) {
      console.log(error, 'Nav Parameter -> RemovePage:' + error);
    }
  }
  AddPage(page) {
    try {
      this.CanGoBack = true;
      if (this.NavListe[this.NavListe.length - 1] !== page) {
        this.NavListe.push(page);
        if (this.Debugstatus) {
          console.log('Navparamter -> AddPage: ' + page);
          this.PrintNavliste();
        }
      } else {
        console.log('Add Page Failed: ' + page);
      }
    } catch (error) {
      console.log(error, 'Nav Parameter -> AddPage: ' + error);
    }
  }
  PrintNavliste() {
    try {
      let Eintrag;
      console.log('**************************');
      console.log('Navliste: ');
      for (let i = 0; i < this.NavListe.length; i++) {
        Eintrag = this.NavListe[i];
        if (i === this.NavListe.length - 1) console.log('-> ' + Eintrag);else console.log(Eintrag);
      }
      console.log('**************************');
    } catch (error) {
      console.log(error, 'Nav Parameter -> PrintNavliste: ' + error);
    }
  }
  SetRootpage(page) {
    try {
      this.CanGoBack = false;
      this.NavListe = [];
      this.NavListe.push(page);
      if (this.Debugstatus) {
        console.log('Navparamter -> SetRootpage: ' + page);
        this.PrintNavliste();
      }
    } catch (error) {
      console.log(error, 'Nav Parameter -> SetRootpage: ' + error);
    }
  }
  static ctorParameters = () => [{
    type: const_1.ConstProvider
  }];
};
exports.Navparameter = Navparameter;
exports.Navparameter = Navparameter = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], Navparameter);

/***/ }),

/***/ 34636:
/*!*******************************************************!*\
  !*** ./src/app/services/security/security.service.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SecurityService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const tools_1 = __webpack_require__(/*! ../tools/tools */ 19668);
const environment_1 = __webpack_require__(/*! ../../../environments/environment */ 36716);
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 7992);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
let SecurityService = class SecurityService {
  Debug;
  Tools;
  Const;
  Pool;
  constructor(Debug, Tools, Const, Pool) {
    this.Debug = Debug;
    this.Tools = Tools;
    this.Const = Const;
    this.Pool = Pool;
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error, 'Security', 'constructor', this.Debug.Typen.Service);
    }
  }
  CheckSecurity() {
    try {
      let Securitystatus = false;
      if (environment_1.environment.production === false) Securitystatus = true;else {
        if (this.Pool.Mitarbeiterdaten && this.Pool.Mitarbeiterdaten.Planeradministrator === true) Securitystatus = true;
      }
      /*
             if(Securitystatus === false) {
               this.Tools.SetRootPage(this.Const.Pages.HomePage);
      }
              */
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Security', 'CheckSecurity', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: debug_1.DebugProvider
  }, {
    type: tools_1.ToolsProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: database_pool_service_1.DatabasePoolService
  }];
};
exports.SecurityService = SecurityService;
exports.SecurityService = SecurityService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], SecurityService);

/***/ }),

/***/ 19668:
/*!*****************************************!*\
  !*** ./src/app/services/tools/tools.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ToolsProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 21124);
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 34388);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 78848); // Platform
const basics_1 = __webpack_require__(/*! ../basics/basics */ 14652);
const const_1 = __webpack_require__(/*! ../const/const */ 29743);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 55600));
const angular_2 = __webpack_require__(/*! @ionic/angular */ 78848);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 30816));
const navparameter_1 = __webpack_require__(/*! ../navparameter/navparameter */ 77200);
const moment_2 = tslib_1.__importDefault(__webpack_require__(/*! moment/moment */ 30816));
let ToolsProvider = class ToolsProvider {
  Basics;
  Debug;
  Const;
  NavParameter;
  nav;
  platform;
  alertCtrl;
  UID_Counter;
  IsRunningOnDeviceFirstTime;
  ShowMessage;
  DialogMessage;
  IsRunningOnDeviceValue;
  constructor(Basics, Debug, Const, NavParameter, nav, platform, alertCtrl) {
    this.Basics = Basics;
    this.Debug = Debug;
    this.Const = Const;
    this.NavParameter = NavParameter;
    this.nav = nav;
    this.platform = platform;
    this.alertCtrl = alertCtrl;
    try {
      this.UID_Counter = 0;
      this.IsRunningOnDeviceFirstTime = true;
      this.ShowMessage = false;
      this.DialogMessage = '';
      this.IsRunningOnDeviceValue = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'Constructor', this.Debug.Typen.Service);
    }
  }
  IsNumeric(n) {
    try {
      return !isNaN(parseFloat(n)) && isFinite(n);
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Tools', 'IsNumeric', this.Debug.Typen.Service);
    }
  }
  GetButtonvalueSize() {
    try {
      if (this.platform.width() <= 600) return 12;else return 6;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'GetButtonvalueSize', this.Debug.Typen.Service);
    }
  }
  GetDatumFromZeitstempel(GesendetZeitstempel) {
    try {
      let Zeitpunkt = (0, moment_2.default)(GesendetZeitstempel);
      return Zeitpunkt.format('DD.MM.YY');
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Tools', 'GetDatumFromZeitstempel', this.Debug.Typen.Service);
    }
  }
  GetZeitFromZeitstempel(GesendetZeitstempel) {
    try {
      let Zeitpunkt = (0, moment_2.default)(GesendetZeitstempel);
      return Zeitpunkt.format('HH:mm');
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Tools', 'GetZeitFromZeitstempel', this.Debug.Typen.Service);
    }
  }
  GenerateFilename(name, extention, nummer) {
    try {
      let key = name; // .toUpperCase();
      let zahl = nummer !== '' ? '_' + nummer : '';
      key = key.replace(/ /g, '_');
      key = key.replace(/ä/g, 'ae');
      key = key.replace(/Ä/g, 'AE');
      key = key.replace(/ö/g, 'oe');
      key = key.replace(/Ö/g, 'OE');
      key = key.replace(/ü/g, 'ue');
      key = key.replace(/Ü/g, 'UE');
      key = key.replace(/ß/g, 'ss');
      key = key.replace(/[^a-zA-Z0-9 ]/g, '_'); // /[&\/\\#,+()$~%.'§=^!`´;":.,*-?<>{}]/g, '_');
      return key + zahl + '.' + extention;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'GenerateProjektkey', this.Debug.Typen.Service);
    }
  }
  GenerateProjektkey(name, extention) {
    try {
      let key = name; // .toUpperCase();
      key = key.replace(/ /g, '_');
      key = key.replace(/ä/g, 'ae');
      key = key.replace(/Ä/g, 'AE');
      key = key.replace(/ö/g, 'oe');
      key = key.replace(/Ö/g, 'OE');
      key = key.replace(/ü/g, 'ue');
      key = key.replace(/Ü/g, 'UE');
      key = key.replace(/ß/g, 'ss');
      key = key.replace(/[^a-zA-Z0-9 ]/g, '_'); // /[&\/\\#,+()$~%.'§=^!`´;":.,*-?<>{}]/g, '_');
      return key;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'GenerateProjektkey', this.Debug.Typen.Service);
    }
  }
  DeepCompareObjectarrays(ListeA, ListeB) {
    try {
      let Changed = false;
      let Index;
      let key;
      let Keyliste;
      let EintragA;
      let EintragB;
      if (ListeA.length >= ListeB.length) {
        for (EintragA of ListeA) {
          // Objekt in der anderen Liste suchen
          Index = ListeB.findIndex(eintrag => {
            return EintragA[key] === eintrag[key];
          });
          if (Index === -1) {
            Changed = true;
            break;
          } else {
            // Alle Felder im Objekt vergleichen
            Keyliste = Object.keys(ListeA[Index]);
            EintragB = ListeB[Index];
            for (let Key of Keyliste) {
              if (EintragA[Key] !== EintragB[Key]) {
                Changed = true;
                break;
              }
            }
            if (Changed === true) break;
          }
        }
      } else {
        for (EintragB of ListeB) {
          // Objekt in der anderen Liste suchen
          Index = ListeA.findIndex(eintrag => {
            return EintragB[key] === eintrag[key];
          });
          if (Index === -1) {
            Changed = true;
            break;
          } else {
            Keyliste = Object.keys(ListeA[Index]);
            EintragA = ListeA[Index];
            for (let Key of Keyliste) {
              // Alle Felder im Objekt vergleichen
              if (EintragB[Key] !== EintragA[Key]) {
                Changed = true;
                break;
              }
            }
            if (Changed === true) break;
          }
        }
      }
      return Changed;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'DeepCompareObjectarrays', this.Debug.Typen.Service);
    }
  }
  JSONCompareObjectarrays(ListeA, ListeB) {
    try {
      return JSON.stringify(ListeA) !== JSON.stringify(ListeB);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'JSONCompareObjectarrays', this.Debug.Typen.Service);
    }
  }
  CompareObjectarrays(ListeA, ListeB, key) {
    try {
      let Changed = false;
      let Index;
      // this.Artikelliste = ListeA
      // Artikelliste      = ListeB
      if (ListeA.length >= ListeB.length) {
        for (let EintragA of ListeA) {
          Index = ListeB.findIndex(eintrag => {
            return EintragA[key] === eintrag[key];
          });
          if (Index === -1) {
            Changed = true;
            break;
          }
        }
      } else {
        for (let EintragB of ListeB) {
          Index = ListeA.findIndex(eintrag => {
            return EintragB[key] === eintrag[key];
          });
          if (Index === -1) {
            Changed = true;
            break;
          }
        }
      }
      return Changed;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'CompareObjectarrays', this.Debug.Typen.Service);
    }
  }
  ShowEntscheidungDialog(header, message) {
    try {
      return new Promise(resolve => {
        this.alertCtrl.create({
          header: header,
          message: message,
          cssClass: 'alertdialogclass',
          buttons: [{
            text: 'Nein',
            cssClass: 'infonoclass',
            handler: () => {
              resolve(this.Const.Dialogmessages.no);
            }
          }, {
            text: 'Ja',
            cssClass: 'infookclass',
            handler: () => {
              resolve(this.Const.Dialogmessages.ok);
            }
          }]
        }).then(dialog => {
          dialog.present();
        }).catch(error => {
          console.log(error);
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'ShowEntscheidungDialog', this.Debug.Typen.Service);
    }
  }
  ShowAuswahlDialog(header, message, wahla, wahlb) {
    try {
      return new Promise(resolve => {
        this.alertCtrl.create({
          header: header,
          cssClass: 'alertdialogclass',
          message: message,
          inputs: [{
            name: 'wahla',
            type: 'radio',
            label: wahla,
            value: this.Const.Dialogmessages.wahla,
            checked: true
          }, {
            name: 'wahlb',
            type: 'radio',
            label: wahlb,
            value: this.Const.Dialogmessages.wahlb
          }],
          buttons: [{
            text: 'Abbrechen',
            role: 'cancel',
            cssClass: 'infonotwoclass',
            handler: () => {
              resolve(null);
            }
          }, {
            text: 'Fertig',
            cssClass: 'infookclass',
            handler: data => {
              if (lodash.isUndefined(data)) {
                resolve(null);
              } else {
                resolve(data);
              }
            }
          }]
        }).then(dialog => {
          dialog.present();
        }).catch(error => {
          console.log(error);
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'ShowAuswahlDialog', this.Debug.Typen.Service);
    }
  }
  RemoveNullFromObject(obj) {
    try {
      let Eintrag;
      for (const key of Object.keys(obj)) {
        Eintrag = obj[key];
        if (Eintrag === null) {
          Eintrag = '';
          obj[key] = Eintrag;
        }
      }
      return obj;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'RemoveNullFromObject', this.Debug.Typen.Service);
    }
  }
  FormatCurrency(amount, decimalCount = 2, decimal = ",", thousands = ".") {
    try {
      decimalCount = Math.abs(decimalCount);
      decimalCount = isNaN(decimalCount) ? 2 : decimalCount;
      const negativeSign = amount < 0 ? "-" : "";
      let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
      let j = i.length > 3 ? i.length % 3 : 0;
      return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "") + ' ' + '€';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Tools', 'FormatCurrency', this.Debug.Typen.Service);
    }
  }
  FormatNumber(amount, decimalCount = 2, decimal = ",", thousands = ".") {
    try {
      decimalCount = Math.abs(decimalCount);
      decimalCount = isNaN(decimalCount) ? 2 : decimalCount;
      const negativeSign = amount < 0 ? "-" : "";
      let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
      let j = i.length > 3 ? i.length % 3 : 0;
      return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Tools', 'FormatNumber', this.Debug.Typen.Service);
    }
  }
  FormatMoney(amount, decimalCount = 2, decimal = ",", thousands = ".") {
    try {
      decimalCount = Math.abs(decimalCount);
      decimalCount = isNaN(decimalCount) ? 2 : decimalCount;
      const negativeSign = amount < 0 ? "-" : "";
      let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
      let j = i.length > 3 ? i.length % 3 : 0;
      return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Tools', 'FormatMoney', this.Debug.Typen.Service);
    }
  }
  FormatValue(wert, einheit, kommastellen) {
    try {
      let Ausgabe;
      if (wert !== null) {
        if (wert >= 1000000) {
          wert = wert / 1000000;
          if (kommastellen === 0) {
            wert = Math.round(wert);
            Ausgabe = wert.toString() + ' M';
          } else Ausgabe = wert.toFixed(kommastellen) + ' M';
        } else if (wert >= 1000) {
          wert = wert / 1000;
          if (kommastellen === 0) {
            wert = Math.round(wert);
            Ausgabe = wert.toString() + ' k';
          } else Ausgabe = wert.toFixed(kommastellen) + ' k';
        } else {
          if (wert > 0 && wert < 1) {
            if (wert < 0.000000001) {
              wert = wert * 1000000000;
              if (kommastellen === 0) wert = Math.round(wert);else Ausgabe = wert.toFixed(kommastellen);
              Ausgabe = wert.toString() + ' p';
            } else if (wert < 0.000001) {
              wert = wert * 1000000;
              if (kommastellen === 0) Ausgabe = Math.round(wert).toString();else Ausgabe = wert.toFixed(kommastellen);
              Ausgabe = Ausgabe + ' n';
            } else if (wert < 0.001) {
              wert = wert * 1000;
              if (kommastellen === 0) Ausgabe = Math.round(wert).toString();else Ausgabe = wert.toFixed(kommastellen);
              Ausgabe = Ausgabe + ' &micro;';
            } else if (wert < 1) {
              wert = wert * 1000;
              if (kommastellen === 0) Ausgabe = Math.round(wert).toString();else Ausgabe = wert.toFixed(kommastellen);
              Ausgabe = Ausgabe + ' m';
            }
          } else {
            if (kommastellen === 0) Ausgabe = Math.round(wert).toString();else Ausgabe = wert.toFixed(kommastellen);
            if (einheit !== '') Ausgabe = Ausgabe + ' ' + einheit;
          }
        }
        Ausgabe = Ausgabe.replace('.', ',');
        if (einheit !== '') Ausgabe = Ausgabe + ' ' + einheit;
        return Ausgabe;
      } else {
        return '0';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'FormatValue', this.Debug.Typen.Service);
    }
  }
  GetUniqueID(name) {
    try {
      this.UID_Counter++;
      return 'uid_' + name.replace(/-/g, '_') + '_' + this.UID_Counter.toString();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'GetUniqueID', this.Debug.Typen.Service);
    }
  }
  HexToRGB(hex) {
    try {
      let bigint;
      let r = 100;
      let g = 50;
      let b = 50;
      if (typeof hex !== 'undefined') {
        hex = hex.replace('#', '');
        bigint = parseInt(hex, 16);
        r = bigint >> 16 & 255;
        g = bigint >> 8 & 255;
        b = bigint & 255;
      }
      return r + ',' + g + ',' + b;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'HexToRGB', this.Debug.Typen.Component);
    }
  }
  SetRootPage(page) {
    try {
      return new Promise(resolve => {
        this.nav.navigateRoot(page, {
          animated: false
        }).then(() => {
          this.NavParameter.SetRootpage(page);
          resolve(true);
        }).catch(error => {
          debugger;
          console.log(error);
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'SetRootPage', this.Debug.Typen.Service);
    }
  }
  PushPage(page) {
    try {
      return new Promise(resolve => {
        this.nav.navigateForward(page, {
          animated: true
        }).then(() => {
          this.NavParameter.AddPage(page);
          resolve(true);
        }).catch(error => {
          console.log(error);
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'SetRootPage', this.Debug.Typen.Service);
    }
  }
  PopPage() {
    try {
      let Lastpage;
      return new Promise(resolve => {
        Lastpage = this.NavParameter.RemovePage();
        if (Lastpage !== null) {
          this.nav.navigateBack(Lastpage, {
            animated: false
          }).then(() => {
            resolve(true);
          }).catch(error => {
            console.log(error);
          });
        } else {
          resolve(true);
        }
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'SetRootPage', this.Debug.Typen.Service);
    }
  }
  GetBogenmass(winkel) {
    try {
      return winkel / 180 * Math.PI;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'GetBogenmass', this.Debug.Typen.Service);
    }
  }
  GetGradmass(winkel) {
    try {
      return winkel * 180 / Math.PI;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'GetGradmass', this.Debug.Typen.Service);
    }
  }
  IstGerade(wert) {
    try {
      return wert % 2 === 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'IstGerade', this.Debug.Typen.Service);
    }
  }
  IstUngerade(wert) {
    try {
      return wert % 2 !== 0;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'IstUngerade', this.Debug.Typen.Service);
    }
  }
  RundenDezimal(value, precision) {
    try {
      let multiplier = Math.pow(10, precision || 0);
      return Math.round(value * multiplier) / multiplier;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'file', 'function', this.Debug.Typen.Page);
    }
  }
  Runden(wert, stellen) {
    try {
      let Zahl = Math.pow(10, stellen);
      return (Math.round(wert * Zahl) / Zahl).toFixed(stellen);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'Runden', this.Debug.Typen.Service);
    }
  }
  GetZeitstempelwert() {
    try {
      return (0, moment_1.default)().valueOf();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'GetZeitstempel', this.Debug.Typen.Service);
    }
  }
  GetZeitpunkttext() {
    try {
      return (0, moment_1.default)().format('DD.MM.YYYY HH:mm:ss');
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'GetZeitstempel', this.Debug.Typen.Service);
    }
  }
  GetTimebasedID(tag, monat, jahr) {
    try {
      let Stunde = 12;
      let Minute = 0;
      return (0, moment_1.default)(tag + '.' + monat + '.' + jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de').valueOf().toString();
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'GetTimebasedID', this.Debug.Typen.Service);
    }
  }
  FormatLinebreaks(text) {
    try {
      if (typeof text !== 'undefined') {
        return text.replace(/(?:\r\n|\r|\n)/g, '<br>');
      } else {
        return '';
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'FormatLinebreaks', this.Debug.Typen.Service);
    }
  }
  ReplaceSonderzeichen(value) {
    try {
      value = value.replace(/ /g, '_');
      value = value.replace(/ä/g, 'ae');
      value = value.replace(/Ä/g, 'Ae');
      value = value.replace(/ö/g, 'oe');
      value = value.replace(/Ö/g, 'Oe');
      value = value.replace(/ü/g, 'ue');
      value = value.replace(/Ü/g, 'Ue');
      value = value.replace(/ß/g, 'ss');
      value = value.replace(/[&\/\\#,+()$~%.'§=^!`´;":.,*-?<>{}]/g, '');
      return value;
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'ReplaceSonderzeichen', this.Debug.Typen.Service);
    }
  }
  RundenAsText(wert, stellen) {
    try {
      let Zahl = Math.pow(10, stellen);
      let Ergo;
      Ergo = Math.round(wert * Zahl) / Zahl;
      return Ergo.toString().replace('.', ',');
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'Runden', this.Debug.Typen.Service);
    }
  }
  CheckArray(data) {
    try {
      if (this.CheckObject(data, false)) {
        if (data instanceof Array) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'CheckArray', this.Debug.Typen.Service);
    }
  }
  CheckObject(data, key) {
    try {
      if (typeof data !== 'undefined' && data !== null) {
        if (key === false) {
          return true;
        } else {
          if (typeof data[key.toString()] !== 'undefined') {
            return true;
          } else {
            return false;
          }
        }
      } else {
        return false;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'CheckObject', this.Debug.Typen.Service);
    }
  }
  ShowHinweisDialog(message) {
    try {
      return new Promise(resolve => {
        this.alertCtrl.create({
          header: 'Hinweis',
          message: message,
          cssClass: 'alertdialogclass',
          buttons: [{
            text: "Ok",
            cssClass: 'infookclass',
            handler: () => {
              resolve(true);
            }
          }]
        }).then(dialog => {
          dialog.present();
        }).catch(error => {
          console.log(error);
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'ShowHinweisDialog', this.Debug.Typen.Service);
    }
  }
  CheckEmail(email) {
    try {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    } catch (error) {
      this.Debug.ShowErrorMessage(error.message, 'Tools', 'CheckEmail', this.Debug.Typen.Service);
    }
  }
  static ctorParameters = () => [{
    type: basics_1.BasicsProvider
  }, {
    type: debug_1.DebugProvider
  }, {
    type: const_1.ConstProvider
  }, {
    type: navparameter_1.Navparameter
  }, {
    type: angular_1.NavController
  }, {
    type: angular_2.Platform
  }, {
    type: angular_1.AlertController
  }];
};
exports.ToolsProvider = ToolsProvider;
exports.ToolsProvider = ToolsProvider = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], ToolsProvider);

/***/ }),

/***/ 36716:
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.environment = void 0;
exports.environment = {
  production: true,
  useonlinedb: true
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.

/***/ }),

/***/ 27460:
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const core_1 = __webpack_require__(/*! @angular/core */ 94280);
const platform_browser_dynamic_1 = __webpack_require__(/*! @angular/platform-browser-dynamic */ 45056);
const app_module_1 = __webpack_require__(/*! ./app/app.module */ 5204);
const environment_1 = __webpack_require__(/*! ./environments/environment */ 36716);
if (environment_1.environment.production) {
  (0, core_1.enableProdMode)();
}
(0, platform_browser_dynamic_1.platformBrowserDynamic)().bootstrapModule(app_module_1.AppModule).catch(err => console.log(err));

/***/ }),

/***/ 21480:
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ lazy ^\.\/.*\.entry\.js$ include: \.entry\.js$ exclude: \.system\.entry\.js$ namespace object ***!
  \******************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./ion-accordion_2.entry.js": [
		27844,
		"common",
		"node_modules_ionic_core_dist_esm_ion-accordion_2_entry_js"
	],
	"./ion-action-sheet.entry.js": [
		55512,
		"common",
		"node_modules_ionic_core_dist_esm_ion-action-sheet_entry_js"
	],
	"./ion-alert.entry.js": [
		58104,
		"common",
		"node_modules_ionic_core_dist_esm_ion-alert_entry_js"
	],
	"./ion-app_8.entry.js": [
		51768,
		"common",
		"node_modules_ionic_core_dist_esm_ion-app_8_entry_js"
	],
	"./ion-avatar_3.entry.js": [
		76488,
		"node_modules_ionic_core_dist_esm_ion-avatar_3_entry_js"
	],
	"./ion-back-button.entry.js": [
		46640,
		"common",
		"node_modules_ionic_core_dist_esm_ion-back-button_entry_js"
	],
	"./ion-backdrop.entry.js": [
		12387,
		"node_modules_ionic_core_dist_esm_ion-backdrop_entry_js"
	],
	"./ion-breadcrumb_2.entry.js": [
		64800,
		"common",
		"node_modules_ionic_core_dist_esm_ion-breadcrumb_2_entry_js"
	],
	"./ion-button_2.entry.js": [
		60308,
		"node_modules_ionic_core_dist_esm_ion-button_2_entry_js"
	],
	"./ion-card_5.entry.js": [
		32796,
		"node_modules_ionic_core_dist_esm_ion-card_5_entry_js"
	],
	"./ion-checkbox.entry.js": [
		944,
		"node_modules_ionic_core_dist_esm_ion-checkbox_entry_js"
	],
	"./ion-chip.entry.js": [
		55060,
		"node_modules_ionic_core_dist_esm_ion-chip_entry_js"
	],
	"./ion-col_3.entry.js": [
		90128,
		"node_modules_ionic_core_dist_esm_ion-col_3_entry_js"
	],
	"./ion-datetime-button.entry.js": [
		93888,
		"default-node_modules_ionic_core_dist_esm_data-0f3ab200_js",
		"node_modules_ionic_core_dist_esm_ion-datetime-button_entry_js"
	],
	"./ion-datetime_3.entry.js": [
		59608,
		"default-node_modules_ionic_core_dist_esm_data-0f3ab200_js",
		"common",
		"node_modules_ionic_core_dist_esm_ion-datetime_3_entry_js"
	],
	"./ion-fab_3.entry.js": [
		24704,
		"common",
		"node_modules_ionic_core_dist_esm_ion-fab_3_entry_js"
	],
	"./ion-img.entry.js": [
		66792,
		"node_modules_ionic_core_dist_esm_ion-img_entry_js"
	],
	"./ion-infinite-scroll_2.entry.js": [
		58924,
		"common",
		"node_modules_ionic_core_dist_esm_ion-infinite-scroll_2_entry_js"
	],
	"./ion-input.entry.js": [
		80219,
		"default-node_modules_ionic_core_dist_esm_form-controller-21dd62b1_js-node_modules_ionic_core_-a176d1",
		"common",
		"node_modules_ionic_core_dist_esm_ion-input_entry_js"
	],
	"./ion-item-option_3.entry.js": [
		30292,
		"common",
		"node_modules_ionic_core_dist_esm_ion-item-option_3_entry_js"
	],
	"./ion-item_8.entry.js": [
		1328,
		"common",
		"node_modules_ionic_core_dist_esm_ion-item_8_entry_js"
	],
	"./ion-loading.entry.js": [
		69328,
		"common",
		"node_modules_ionic_core_dist_esm_ion-loading_entry_js"
	],
	"./ion-menu_3.entry.js": [
		22344,
		"common",
		"node_modules_ionic_core_dist_esm_ion-menu_3_entry_js"
	],
	"./ion-modal.entry.js": [
		83012,
		"common",
		"node_modules_ionic_core_dist_esm_ion-modal_entry_js"
	],
	"./ion-nav_2.entry.js": [
		23796,
		"node_modules_ionic_core_dist_esm_ion-nav_2_entry_js"
	],
	"./ion-picker-column-internal.entry.js": [
		89420,
		"common",
		"node_modules_ionic_core_dist_esm_ion-picker-column-internal_entry_js"
	],
	"./ion-picker-internal.entry.js": [
		98916,
		"node_modules_ionic_core_dist_esm_ion-picker-internal_entry_js"
	],
	"./ion-popover.entry.js": [
		62500,
		"common",
		"node_modules_ionic_core_dist_esm_ion-popover_entry_js"
	],
	"./ion-progress-bar.entry.js": [
		37464,
		"node_modules_ionic_core_dist_esm_ion-progress-bar_entry_js"
	],
	"./ion-radio_2.entry.js": [
		44624,
		"common",
		"node_modules_ionic_core_dist_esm_ion-radio_2_entry_js"
	],
	"./ion-range.entry.js": [
		47744,
		"common",
		"node_modules_ionic_core_dist_esm_ion-range_entry_js"
	],
	"./ion-refresher_2.entry.js": [
		76936,
		"common",
		"node_modules_ionic_core_dist_esm_ion-refresher_2_entry_js"
	],
	"./ion-reorder_2.entry.js": [
		60376,
		"common",
		"node_modules_ionic_core_dist_esm_ion-reorder_2_entry_js"
	],
	"./ion-ripple-effect.entry.js": [
		60272,
		"node_modules_ionic_core_dist_esm_ion-ripple-effect_entry_js"
	],
	"./ion-route_4.entry.js": [
		43216,
		"node_modules_ionic_core_dist_esm_ion-route_4_entry_js"
	],
	"./ion-searchbar.entry.js": [
		66764,
		"common",
		"node_modules_ionic_core_dist_esm_ion-searchbar_entry_js"
	],
	"./ion-segment_2.entry.js": [
		88240,
		"common",
		"node_modules_ionic_core_dist_esm_ion-segment_2_entry_js"
	],
	"./ion-select_3.entry.js": [
		56168,
		"common",
		"node_modules_ionic_core_dist_esm_ion-select_3_entry_js"
	],
	"./ion-spinner.entry.js": [
		77328,
		"common",
		"node_modules_ionic_core_dist_esm_ion-spinner_entry_js"
	],
	"./ion-split-pane.entry.js": [
		59716,
		"node_modules_ionic_core_dist_esm_ion-split-pane_entry_js"
	],
	"./ion-tab-bar_2.entry.js": [
		3220,
		"common",
		"node_modules_ionic_core_dist_esm_ion-tab-bar_2_entry_js"
	],
	"./ion-tab_2.entry.js": [
		13044,
		"node_modules_ionic_core_dist_esm_ion-tab_2_entry_js"
	],
	"./ion-text.entry.js": [
		21660,
		"node_modules_ionic_core_dist_esm_ion-text_entry_js"
	],
	"./ion-textarea.entry.js": [
		97271,
		"default-node_modules_ionic_core_dist_esm_form-controller-21dd62b1_js-node_modules_ionic_core_-a176d1",
		"node_modules_ionic_core_dist_esm_ion-textarea_entry_js"
	],
	"./ion-toast.entry.js": [
		20108,
		"common",
		"node_modules_ionic_core_dist_esm_ion-toast_entry_js"
	],
	"./ion-toggle.entry.js": [
		94936,
		"common",
		"node_modules_ionic_core_dist_esm_ion-toggle_entry_js"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = () => (Object.keys(map));
webpackAsyncContext.id = 21480;
module.exports = webpackAsyncContext;

/***/ }),

/***/ 99052:
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/@stencil/core/internal/client/ lazy ^\.\/.*\.entry\.js.*$ include: \.entry\.js$ exclude: \.system\.entry\.js$ namespace object ***!
  \*****************************************************************************************************************************************************/
/***/ ((module) => {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(() => {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = () => ([]);
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = 99052;
module.exports = webpackEmptyAsyncContext;

/***/ }),

/***/ 25004:
/*!***********************************************!*\
  !*** ./src/app/app.component.scss?ngResource ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `::ng-deep ngx-material-timepicker-content {
  --body-background-color: #7b6a58;
  --primary-font-family: "Roboto",sans-serif;
  --button-color: none !important;
  --dial-active-color: #fff;
  --dial-inactive-color: rgba(255, 255, 255, .5);
  --dial-background-color: #354547 !important;
  --dial-editable-active-color: #c7d304 !important;
  --dial-editable-background-color: #fff;
  --clock-face-time-active-color: #fff;
  --clock-face-time-inactive-color: #6c6c6c;
  --clock-face-inner-time-inactive-color: #929292;
  --clock-face-time-disabled-color: #c5c5c5;
  --clock-face-background-color: #354547;
  --clock-hand-color: #c7d304 !important;
}`, "",{"version":3,"sources":["webpack://./src/app/app.component.scss"],"names":[],"mappings":"AAAA;EACE,gCAAA;EACA,0CAAA;EACA,+BAAA;EACA,yBAAA;EACA,8CAAA;EACA,2CAAA;EACA,gDAAA;EACA,sCAAA;EACA,oCAAA;EACA,yCAAA;EACA,+CAAA;EACA,yCAAA;EACA,sCAAA;EACA,sCAAA;AACF","sourcesContent":["::ng-deep ngx-material-timepicker-content{\n  --body-background-color: #7b6a58;\n  --primary-font-family: 'Roboto',sans-serif;\n  --button-color: none !important;\n  --dial-active-color: #fff;\n  --dial-inactive-color: rgba(255, 255, 255, .5);\n  --dial-background-color: #354547 !important;\n  --dial-editable-active-color: #c7d304 !important;\n  --dial-editable-background-color: #fff;\n  --clock-face-time-active-color: #fff;\n  --clock-face-time-inactive-color: #6c6c6c;\n  --clock-face-inner-time-inactive-color: #929292;\n  --clock-face-time-disabled-color: #c5c5c5;\n  --clock-face-background-color: #354547;\n  --clock-hand-color: #c7d304 !important;\n}\n\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 16789:
/*!***************************************************************************************************!*\
  !*** ./src/app/components-page/fi-changelog-editor/fi-changelog-editor.component.scss?ngResource ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.infotable td {
  font-size: 90%;
  color: #444444;
}

.keeperdivclass {
  width: 100%;
  height: 100%;
  position: absolute;
}

.contentdivclass {
  left: 50%;
  position: absolute;
  transform: translate(-50%);
}

.contentinnerclass {
  border-left: 3px solid #354547;
  border-right: 3px solid #354547;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: row;
}`, "",{"version":3,"sources":["webpack://./src/app/components-page/fi-changelog-editor/fi-changelog-editor.component.scss"],"names":[],"mappings":"AAEE;EAEE,cAAA;EACA,cAAA;AAFJ;;AAMA;EAEE,WAAA;EACA,YAAA;EACA,kBAAA;AAJF;;AAOA;EAEE,SAAA;EACA,kBAAA;EACA,0BAAA;AALF;;AAQA;EAEE,8BAAA;EACA,+BAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;AANF","sourcesContent":[".infotable {\n\n  td {\n\n    font-size: 90%;\n    color: #444444;\n  }\n}\n\n.keeperdivclass {\n\n  width: 100%;\n  height: 100%;\n  position:absolute;\n}\n\n.contentdivclass {\n\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.contentinnerclass {\n\n  border-left:  3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n}\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 34776:
/*!*********************************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.component.scss?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.infotable td {
  font-size: 80%;
  color: #444444;
}

.ergonametextclass {
  font-weight: bold;
}

.emptymessageclass {
  display: flex;
  justify-content: center;
  align-items: center;
  padding-top: 100px;
}

.keeperdivclass {
  width: 100%;
  height: 100%;
  position: absolute;
}

.innerkeeperclass {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: row;
  border-left: 3px solid #354547;
}

.contentdivclass {
  left: 50%;
  position: absolute;
  transform: translate(-50%);
  display: flex;
  flex-direction: column;
}

.menufilterbuttonclass {
  padding: 2px;
  padding-right: 4px;
  cursor: pointer;
  background: #7b6a58;
  border-radius: 4px;
}

.innerkeeperlisteclass {
  width: 100%;
  height: 100%;
  overflow: auto;
}

.innerkeeperalphabetclass {
  width: 44px;
  height: 100%;
  overflow: auto;
}`, "",{"version":3,"sources":["webpack://./src/app/components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.component.scss"],"names":[],"mappings":"AAGE;EAEE,cAAA;EACA,cAAA;AAHJ;;AAOA;EAEE,iBAAA;AALF;;AAQA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,kBAAA;AANF;;AAUA;EAEE,WAAA;EACA,YAAA;EACA,kBAAA;AARF;;AAWA;EAEE,WAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;EACA,8BAAA;AATF;;AAYA;EAEE,SAAA;EACA,kBAAA;EACA,0BAAA;EACA,aAAA;EACA,sBAAA;AAVF;;AAaA;EAEE,YAAA;EACA,kBAAA;EACA,eAAA;EACA,mBAAA;EACA,kBAAA;AAXF;;AAeA;EAEE,WAAA;EACA,YAAA;EACA,cAAA;AAbF;;AAgBA;EAEE,WAAA;EACA,YAAA;EACA,cAAA;AAdF","sourcesContent":["\n.infotable {\n\n  td {\n\n    font-size: 80%;\n    color: #444444;\n  }\n}\n\n.ergonametextclass {\n\n  font-weight: bold;\n}\n\n.emptymessageclass {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  padding-top: 100px;\n}\n\n\n.keeperdivclass {\n\n  width: 100%;\n  height: 100%;\n  position:absolute;\n}\n\n.innerkeeperclass {\n\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  border-left: 3px solid #354547;\n}\n\n.contentdivclass {\n\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n  display: flex;\n  flex-direction: column;\n}\n\n.menufilterbuttonclass {\n\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n\n.innerkeeperlisteclass {\n\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.innerkeeperalphabetclass {\n\n  width:  44px;\n  height: 100%;\n  overflow: auto;\n}\n\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 16228:
/*!*******************************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.component.scss?ngResource ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.infotable td {
  font-size: 90%;
  color: #444444;
}

.keeperdivclass {
  width: 100%;
  height: 100%;
  position: absolute;
}

.contentdivclass {
  left: 50%;
  position: absolute;
  transform: translate(-50%);
  display: flex;
  flex-direction: column;
}

.contentinnerclass {
  border-left: 3px solid #307ac1;
  border-right: 3px solid #307ac1;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: row;
}

.menubuttonclass {
  cursor: pointer;
}

.trennertdclass {
  width: 30px;
}

.positionclass {
  background: white;
  height: 30px;
  width: 300px;
}

.positionclass:hover {
  background: silver;
}

.keeperdivclass {
  display: flex;
  flex-direction: row;
  position: relative;
  width: 100%;
  height: 100%;
}

.poslisteclass {
  height: 100%;
  width: 65%;
  overflow: auto;
}

.poseditorclass {
  height: 100%;
  width: 35%;
  overflow: auto;
  border-left: 2px solid #444444;
}`, "",{"version":3,"sources":["webpack://./src/app/components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.component.scss"],"names":[],"mappings":"AAEE;EAEE,cAAA;EACA,cAAA;AAFJ;;AAMA;EAEE,WAAA;EACA,YAAA;EACA,kBAAA;AAJF;;AAOA;EAEE,SAAA;EACA,kBAAA;EACA,0BAAA;EACA,aAAA;EACA,sBAAA;AALF;;AAQA;EAEE,8BAAA;EACA,+BAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;AANF;;AASA;EAEE,eAAA;AAPF;;AAUA;EAEE,WAAA;AARF;;AAWA;EAEE,iBAAA;EACA,YAAA;EACA,YAAA;AATF;;AAWA;EAEE,kBAAA;AATF;;AAYA;EAEE,aAAA;EACA,mBAAA;EACA,kBAAA;EACA,WAAA;EACA,YAAA;AAVF;;AAaA;EAEE,YAAA;EACA,UAAA;EACA,cAAA;AAXF;;AAcA;EAEE,YAAA;EACA,UAAA;EACA,cAAA;EACA,8BAAA;AAZF","sourcesContent":[".infotable {\n\n  td {\n\n    font-size: 90%;\n    color: #444444;\n  }\n}\n\n.keeperdivclass {\n\n  width: 100%;\n  height: 100%;\n  position:absolute;\n}\n\n.contentdivclass {\n\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n  display: flex;\n  flex-direction: column;\n}\n\n.contentinnerclass {\n\n  border-left:  3px solid #307ac1;\n  border-right: 3px solid #307ac1;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n}\n\n.menubuttonclass {\n\n  cursor: pointer;\n}\n\n.trennertdclass {\n\n  width: 30px;\n}\n\n.positionclass {\n\n  background: white;\n  height: 30px;\n  width: 300px;\n}\n.positionclass:hover {\n\n  background: silver;\n}\n\n.keeperdivclass {\n\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.poslisteclass {\n\n  height: 100%;\n  width: 65%;\n  overflow: auto;\n}\n\n.poseditorclass {\n\n  height: 100%;\n  width: 35%;\n  overflow: auto;\n  border-left: 2px solid #444444;\n\n}\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 31880:
/*!*************************************************************************************************!*\
  !*** ./src/app/components-page/fi-standort-editor/fi-standort-editor.component.scss?ngResource ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.infotable td {
  font-size: 90%;
  color: #444444;
}

.keeperdivclass {
  width: 100%;
  height: 100%;
  position: absolute;
}

.contentdivclass {
  left: 50%;
  position: absolute;
  transform: translate(-50%);
}

.contentinnerclass {
  border-left: 3px solid #2190df;
  border-right: 3px solid #2190df;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: row;
}`, "",{"version":3,"sources":["webpack://./src/app/components-page/fi-standort-editor/fi-standort-editor.component.scss"],"names":[],"mappings":"AAEE;EAEE,cAAA;EACA,cAAA;AAFJ;;AAMA;EAEE,WAAA;EACA,YAAA;EACA,kBAAA;AAJF;;AAOA;EAEE,SAAA;EACA,kBAAA;EACA,0BAAA;AALF;;AAQA;EAEE,8BAAA;EACA,+BAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;AANF","sourcesContent":[".infotable {\n\n  td {\n\n    font-size: 90%;\n    color: #444444;\n  }\n}\n\n.keeperdivclass {\n\n  width: 100%;\n  height: 100%;\n  position:absolute;\n}\n\n.contentdivclass {\n\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.contentinnerclass {\n\n  border-left:  3px solid #2190df;\n  border-right: 3px solid #2190df;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n}\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 61204:
/*!**************************************************************************************************!*\
  !*** ./src/app/components/abstand-element-fixed/abstand-element-fixed.component.scss?ngResource ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ``, "",{"version":3,"sources":[],"names":[],"mappings":"","sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 85209:
/*!********************************************************************************!*\
  !*** ./src/app/components/alphabet-relative/alphabet-relative.scss?ngResource ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.alphabetclass {
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.alphabetitem {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
  color: white;
  font-size: 80%;
  cursor: pointer;
}`, "",{"version":3,"sources":["webpack://./src/app/components/alphabet-relative/alphabet-relative.scss"],"names":[],"mappings":"AAAA;EAEE,YAAA;EACA,WAAA;EACA,aAAA;EACA,sBAAA;EACA,uBAAA;AAAF;;AAGA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,YAAA;EACA,YAAA;EACA,cAAA;EACA,eAAA;AADF","sourcesContent":[".alphabetclass {\n\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center; // horizontal\n}\n\n.alphabetitem {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center;     // vertical\n  flex-grow: 1;\n  color: white;\n  font-size: 80%;\n  cursor: pointer;\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 21784:
/*!**************************************************************!*\
  !*** ./src/app/components/alphabet/alphabet.scss?ngResource ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.alphabetclass {
  position: absolute;
  background: #ffffff;
  right: 0px;
  width: 12vw;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.alphabetitem {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
  color: white;
  font-size: 80%;
  cursor: pointer;
}`, "",{"version":3,"sources":["webpack://./src/app/components/alphabet/alphabet.scss"],"names":[],"mappings":"AAAA;EAEE,kBAAA;EACA,mBAAA;EACA,UAAA;EACA,WAAA;EACA,aAAA;EACA,sBAAA;EACA,uBAAA;AAAF;;AAGA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,YAAA;EACA,YAAA;EACA,cAAA;EACA,eAAA;AADF","sourcesContent":[".alphabetclass {\n\n  position: absolute;\n  background: #ffffff;\n  right: 0px;\n  width: 12vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center; // horizontal\n}\n\n.alphabetitem {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center;     // vertical\n  flex-grow: 1;\n  color: white;\n  font-size: 80%;\n  cursor: pointer;\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 32844:
/*!**************************************************************************!*\
  !*** ./src/app/components/auswahl-dialog/auswahl-dialog.scss?ngResource ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.keeperdivclass {
  width: 100%;
  height: 100%;
  position: absolute;
}

.innerkeeperclass {
  overflow: auto;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: row;
  border-left: 3px solid #2190df;
  border-right: 3px solid #2190df;
}

.contentdivclass {
  left: 50%;
  position: absolute;
  transform: translate(-50%);
  display: flex;
  flex-direction: column;
}

.menufilterbuttonclass {
  padding: 2px;
  padding-right: 4px;
  cursor: pointer;
  background: #7b6a58;
  border-radius: 4px;
}`, "",{"version":3,"sources":["webpack://./src/app/components/auswahl-dialog/auswahl-dialog.scss"],"names":[],"mappings":"AACA;EAEE,WAAA;EACA,YAAA;EACA,kBAAA;AADF;;AAIA;EAEE,cAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;EACA,8BAAA;EACA,+BAAA;AAFF;;AAKA;EAEE,SAAA;EACA,kBAAA;EACA,0BAAA;EACA,aAAA;EACA,sBAAA;AAHF;;AAMA;EAEE,YAAA;EACA,kBAAA;EACA,eAAA;EACA,mBAAA;EACA,kBAAA;AAJF","sourcesContent":["\n.keeperdivclass {\n\n  width: 100%;\n  height: 100%;\n  position:absolute;\n}\n\n.innerkeeperclass {\n\n  overflow: auto;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  border-left:  3px solid #2190df;\n  border-right: 3px solid #2190df;\n}\n\n.contentdivclass {\n\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n  display: flex;\n  flex-direction: column;\n}\n\n.menufilterbuttonclass {\n\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 94928:
/*!********************************************************************************!*\
  !*** ./src/app/components/button-value-date/button-value-date.scss?ngResource ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.buttonclass {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 44px;
  border-radius: 4px;
  padding: 2px;
  display: flex;
}

.buttontextclass {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  min-height: 44px;
  width: 100%;
  height: 100%;
}

.outerinfokeeperclass {
  height: 100%;
  width: 60%;
  padding: 2px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.infokeeperclass {
  color: white;
  height: 34px;
  padding: 2px;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 4px;
}

ion-datetime {
  height: auto;
  width: auto;
  max-width: 350px;
  --background: #354547;
}

ion-modal {
  --width: 290px;
  --height: 382px;
  --border-radius: 8px;
}

ion-modal ion-datetime {
  height: 382px;
}`, "",{"version":3,"sources":["webpack://./src/app/components/button-value-date/button-value-date.scss"],"names":[],"mappings":"AACA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;EACA,YAAA;EACA,aAAA;AADF;;AAIA;EAEE,aAAA;EACA,2BAAA;EACA,mBAAA;EACA,gBAAA;EACA,WAAA;EACA,YAAA;AAFF;;AAKA;EAEE,YAAA;EACA,UAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAHF;;AAOA;EAEE,YAAA;EACA,YAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,kBAAA;AALF;;AAQA;EACE,YAAA;EACA,WAAA;EACA,gBAAA;EACA,qBAAA;AALF;;AAQA;EACE,cAAA;EACA,eAAA;EACA,oBAAA;AALF;;AAQA;EACE,aAAA;AALF","sourcesContent":["\n.buttonclass {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  width: 100%;\n  height: 44px;\n  border-radius: 4px;\n  padding: 2px;\n  display: flex;\n}\n\n.buttontextclass {\n\n  display: flex;\n  justify-content: flex-start; // horizontal\n  align-items: center; // vertical\n  min-height: 44px;\n  width: 100%;\n  height: 100%;\n}\n\n.outerinfokeeperclass {\n\n  height: 100%;\n  width: 60%;\n  padding: 2px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n\n}\n\n.infokeeperclass {\n\n  color: white;\n  height: 34px;\n  padding: 2px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center;     // vertical\n  border-radius: 4px;\n}\n\nion-datetime {\n  height: auto;\n  width:  auto;\n  max-width: 350px;\n  --background: #354547;\n}\n\nion-modal {\n  --width: 290px;\n  --height: 382px;\n  --border-radius: 8px;\n}\n\nion-modal ion-datetime {\n  height: 382px;\n}\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 26788:
/*!**********************************************************************!*\
  !*** ./src/app/components/button-value/button-value.scss?ngResource ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.buttonclass {
  position: relative;
  width: 100%;
  height: 44px;
  border-radius: 4px;
  padding: 2px;
  display: flex;
}

.buttontextclass {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  min-height: 8px;
  width: 100%;
  height: 100%;
}

.outerinfokeeperclass {
  height: 100%;
  padding: 2px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.infokeeperclass {
  color: white;
  height: 34px;
  width: 100%;
  padding: 2px;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 4px;
}`, "",{"version":3,"sources":["webpack://./src/app/components/button-value/button-value.scss"],"names":[],"mappings":"AACA;EAEE,kBAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;EACA,YAAA;EACA,aAAA;AADF;;AAIA;EAEE,aAAA;EACA,2BAAA;EACA,mBAAA;EACA,eAAA;EACA,WAAA;EACA,YAAA;AAFF;;AAMA;EAEE,YAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAJF;;AASA;EAEE,YAAA;EACA,YAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EAEA,uBAAA;EACA,mBAAA;EACA,kBAAA;AARF","sourcesContent":["\n.buttonclass {\n\n  position: relative;\n  width: 100%;\n  height: 44px;\n  border-radius: 4px;\n  padding: 2px;\n  display: flex;\n}\n\n.buttontextclass {\n\n  display: flex;\n  justify-content: flex-start; // horizontal\n  align-items: center; // vertical\n  min-height: 8px;\n  width: 100%;\n  height: 100%;\n}\n\n\n.outerinfokeeperclass {\n\n  height: 100%;\n  padding: 2px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n\n}\n\n\n.infokeeperclass {\n\n  color: white;\n  height: 34px;\n  width: 100%;\n  padding: 2px;\n  display: flex;\n  // border: 1px solid white;\n  justify-content: center; // horizontal\n  align-items: center;     // vertical\n  border-radius: 4px;\n}\n\n\n\n\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 94016:
/*!**********************************************************************************!*\
  !*** ./src/app/components/checkbox-clon/checkbox-clon.component.scss?ngResource ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.keeperdivclass {
  padding: 2px;
  position: relative;
  width: 24px;
  height: 24px;
  border: 2px solid gray;
  border-radius: 4px;
  display: flex;
  justify-content: center;
  align-items: center;
}`, "",{"version":3,"sources":["webpack://./src/app/components/checkbox-clon/checkbox-clon.component.scss"],"names":[],"mappings":"AACA;EAEE,YAAA;EACA,kBAAA;EACA,WAAA;EACA,YAAA;EACA,sBAAA;EACA,kBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AADF","sourcesContent":["\n.keeperdivclass {\n\n  padding: 2px;\n  position: relative;\n  width: 24px;\n  height: 24px;\n  border: 2px solid gray;\n  border-radius: 4px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 24660:
/*!********************************************************************************************!*\
  !*** ./src/app/components/input-clone-keeper/input-clone-keeper.component.scss?ngResource ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ``, "",{"version":3,"sources":[],"names":[],"mappings":"","sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 25196:
/*!******************************************************************************!*\
  !*** ./src/app/components/input-clone/input-clone.component.scss?ngResource ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.framedivclass {
  width: 100%;
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;
}

.inputclass {
  border: 1px solid blue;
  border: none;
  --padding-bottom: 0px;
  --padding-end: 0px;
  --padding-start: 0px;
  --padding-top: 0px;
  --color: black;
}

ion-label {
  color: black;
}

ion-textarea {
  margin-top: 0px;
  border: none;
  --padding-bottom: 100px;
  --padding-end: 0px;
  --padding-start: 0px;
  --padding-top: 0px;
  --color: black;
}

.uppercellclass {
  font-size: 80%;
  padding-left: 4px;
  padding-right: 4px;
  padding-top: 4px;
  padding-bottom: 2px;
}

.lowercellclass {
  padding-left: 4px;
  padding-right: 4px;
  padding-top: 0px;
  padding-bottom: 4px;
}`, "",{"version":3,"sources":["webpack://./src/app/components/input-clone/input-clone.component.scss"],"names":[],"mappings":"AAAA;EAEE,WAAA;EACA,aAAA;EACA,2BAAA;EACA,uBAAA;AAAF;;AAIA;EAEE,sBAAA;EACA,YAAA;EACA,qBAAA;EACA,kBAAA;EACA,oBAAA;EACA,kBAAA;EACA,cAAA;AAFF;;AAKA;EAEE,YAAA;AAHF;;AAQA;EAEE,eAAA;EACA,YAAA;EACA,uBAAA;EACA,kBAAA;EACA,oBAAA;EACA,kBAAA;EACA,cAAA;AANF;;AASA;EAEE,cAAA;EACA,iBAAA;EACA,kBAAA;EACA,gBAAA;EACA,mBAAA;AAPF;;AAWA;EAEE,iBAAA;EACA,kBAAA;EACA,gBAAA;EACA,mBAAA;AATF","sourcesContent":[".framedivclass {\n\n  width: 100%;\n  display: flex;\n  justify-content: flex-start; // horizontal\n  align-items: flex-start; // vertikal\n\n}\n\n.inputclass {\n\n  border: 1px solid blue;\n  border: none;\n  --padding-bottom: 0px;\n  --padding-end:    0px;\n  --padding-start:  0px;\n  --padding-top:    0px;\n  --color: black;\n}\n\nion-label {\n\n  color: black;\n}\n\n\n\nion-textarea {\n\n  margin-top: 0px;\n  border: none;\n  --padding-bottom: 100px;\n  --padding-end:    0px;\n  --padding-start:  0px;\n  --padding-top:    0px;\n  --color: black;\n}\n\n.uppercellclass {\n\n  font-size:      80%;\n  padding-left:   4px;\n  padding-right:  4px;\n  padding-top:    4px;\n  padding-bottom: 2px;\n\n\n}\n.lowercellclass {\n\n  padding-left:   4px;\n  padding-right:  4px;\n  padding-top:    0px;\n  padding-bottom: 4px;\n}\n\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 82868:
/*!********************************************************************!*\
  !*** ./src/app/components/page-footer/page-footer.scss?ngResource ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.keeperclass {
  background: #307ac1;
  color: white;
  width: 100%;
  min-height: 40px;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: flex-end;
}`, "",{"version":3,"sources":["webpack://./src/app/components/page-footer/page-footer.scss"],"names":[],"mappings":"AAAA;EAEE,mBAAA;EACA,YAAA;EACA,WAAA;EACA,gBAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;EACA,yBAAA;AAAF","sourcesContent":[".keeperclass {\n\n  background: #307ac1;\n  color: white;\n  width: 100%;\n  min-height: 40px;\n  height: 100%;\n  display: flex;\n  align-items: center; // vertikal\n  justify-content: flex-end; // horizontal\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 78920:
/*!**********************************************************************************!*\
  !*** ./src/app/components/page-header-center/page-header-center.scss?ngResource ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.keeperdivclass {
  width: 100%;
  background: #2190df;
  min-height: 52px;
  display: flex;
  align-items: center;
  justify-content: flex-start;
}`, "",{"version":3,"sources":["webpack://./src/app/components/page-header-center/page-header-center.scss"],"names":[],"mappings":"AAAA;EAEE,WAAA;EACA,mBAAA;EACA,gBAAA;EACA,aAAA;EACA,mBAAA;EACA,2BAAA;AAAF","sourcesContent":[".keeperdivclass {\n\n  width: 100%;\n  background: #2190df;\n  min-height: 52px;\n  display: flex;\n  align-items: center; // vertikal\n  justify-content: flex-start; // horizontal\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 49732:
/*!****************************************************************************************!*\
  !*** ./src/app/components/page-header-menu/page-header-menu.component.scss?ngResource ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.menubuttonclass {
  cursor: pointer;
}

.menufilterbuttonclass {
  padding: 2px;
  padding-right: 4px;
  cursor: pointer;
  background: #454545;
  border-radius: 4px;
}

.planungheaderdiv {
  border-radius: 6px;
  width: 40px;
  height: 40px;
  background: #454545;
  color: white;
  font-size: 90%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.trennertdclass {
  width: 30px;
}

.trennerdivclass {
  width: 1px;
  min-height: 30px;
  height: 100%;
  background: silver;
}

.trennerbigdivclass {
  width: 1px;
  min-height: 64px;
  height: 100%;
  background: silver;
}

ion-searchbar {
  width: 300px;
  height: 50px;
  --border-radius: none;
  --box-shadow: none;
  --background: black;
}

.iconboxclass {
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 6px;
  width: 40px;
  height: 40px;
  background: #444444;
}

.menubuttonclass {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  width: 100%;
  min-height: 50px;
  padding: 2px;
}

.buttonclass {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 140px;
  min-height: 34px;
  height: 100%;
  padding: 2px;
  border: 1px solid white;
  border-radius: 6px;
  cursor: pointer;
}

.buttonsmallclass {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 50px;
  min-height: 34px;
  height: 100%;
  border: 1px solid white;
  border-radius: 6px;
  cursor: pointer;
}

.statusvaianteclass {
  padding: 6px;
  border-radius: 3px;
  width: auto;
  white-space: nowrap;
  color: white;
  font-size: 80%;
}

.wocheheaderdivclass {
  background: #354547;
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
}

.userimagesmall {
  display: inline-block;
  width: 40px;
  height: 40px;
  margin-top: 4px;
  border-radius: 50%;
  object-fit: cover;
}

.userkuerzelsmall {
  display: inline-block;
  width: 40px;
  height: 40px;
  margin-right: 4px;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  background: #454545;
  color: white;
  font-weight: bold;
}`, "",{"version":3,"sources":["webpack://./src/app/components/page-header-menu/page-header-menu.component.scss"],"names":[],"mappings":"AACA;EAEE,eAAA;AADF;;AAIA;EAEE,YAAA;EACA,kBAAA;EACA,eAAA;EACA,mBAAA;EACA,kBAAA;AAFF;;AAKA;EAEE,kBAAA;EACA,WAAA;EACA,YAAA;EACA,mBAAA;EACA,YAAA;EACA,cAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAHF;;AAMA;EAEE,WAAA;AAJF;;AAOA;EAEE,UAAA;EACA,gBAAA;EACA,YAAA;EACA,kBAAA;AALF;;AAQA;EAEE,UAAA;EACA,gBAAA;EACA,YAAA;EACA,kBAAA;AANF;;AASA;EAEE,YAAA;EACA,YAAA;EACA,qBAAA;EACA,kBAAA;EACA,mBAAA;AAPF;;AAUA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,kBAAA;EACA,WAAA;EACA,YAAA;EACA,mBAAA;AARF;;AAWA;EAEE,aAAA;EACA,2BAAA;EACA,mBAAA;EACA,WAAA;EACA,gBAAA;EACA,YAAA;AATF;;AAYA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,YAAA;EACA,gBAAA;EACA,YAAA;EACA,YAAA;EACA,uBAAA;EACA,kBAAA;EACA,eAAA;AAVF;;AAaA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,WAAA;EACA,gBAAA;EACA,YAAA;EACA,uBAAA;EACA,kBAAA;EACA,eAAA;AAXF;;AAcA;EAEE,YAAA;EACA,kBAAA;EACA,WAAA;EACA,mBAAA;EACA,YAAA;EACA,cAAA;AAZF;;AAcA;EAEE,mBAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAZF;;AAgBA;EAEE,qBAAA;EACA,WAAA;EACA,YAAA;EACA,eAAA;EACA,kBAAA;EACA,iBAAA;AAdF;;AAiBA;EAEE,qBAAA;EACA,WAAA;EACA,YAAA;EACA,iBAAA;EACA,kBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,mBAAA;EACA,YAAA;EACA,iBAAA;AAfF","sourcesContent":["\n.menubuttonclass {\n\n  cursor: pointer;\n}\n\n.menufilterbuttonclass {\n\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #454545;\n  border-radius: 4px;\n}\n\n.planungheaderdiv {\n\n  border-radius: 6px;\n  width: 40px;\n  height: 40px;\n  background: #454545;\n  color: white;\n  font-size: 90%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n.trennertdclass {\n\n  width: 30px;\n}\n\n.trennerdivclass {\n\n  width: 1px;\n  min-height: 30px;\n  height: 100%;\n  background: silver;\n}\n\n.trennerbigdivclass {\n\n  width: 1px;\n  min-height: 64px;\n  height: 100%;\n  background: silver;\n}\n\nion-searchbar {\n\n  width: 300px;\n  height: 50px;\n  --border-radius: none;\n  --box-shadow: none;\n  --background: black;\n}\n\n.iconboxclass {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  border-radius: 6px;\n  width: 40px;\n  height: 40px;\n  background: #444444;\n}\n\n.menubuttonclass {\n\n  display: flex;\n  justify-content: flex-start; // horizontal\n  align-items: center; // vertikal\n  width: 100%;\n  min-height: 50px;\n  padding: 2px;\n}\n\n.buttonclass {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  width: 140px;\n  min-height: 34px;\n  height: 100%;\n  padding: 2px;\n  border: 1px solid white;\n  border-radius: 6px;\n  cursor: pointer;\n}\n\n.buttonsmallclass {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  width: 50px;\n  min-height: 34px;\n  height: 100%;\n  border: 1px solid white;\n  border-radius: 6px;\n  cursor: pointer;\n}\n\n.statusvaianteclass {\n\n  padding: 6px;\n  border-radius: 3px;\n  width: auto;\n  white-space: nowrap;\n  color: white;\n  font-size: 80%;\n}\n.wocheheaderdivclass {\n\n  background: #354547;\n  color: white;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  // font-weight: bold;\n}\n\n.userimagesmall {\n\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  margin-top: 4px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.userkuerzelsmall {\n\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  margin-right: 4px;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  background: #454545;\n  color: white;\n  font-weight: bold;\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 23804:
/*!********************************************************************!*\
  !*** ./src/app/components/page-header/page-header.scss?ngResource ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `ion-progress-bar {
  --background: #444444;
  --progress-background: #307ac1;
}

.keeperdivclass {
  width: 100%;
  background: #307ac1;
  min-height: 52px;
  /*
  display: flex;
  align-items: center; // vertikal
  justify-content: flex-start; // horizontal

   */
}

.loadingdivclass {
  position: absolute;
  width: 400px;
  height: 300px;
  z-index: 10000;
  top: 200px;
  left: 50%;
  transform: translate(-50%, 0);
}

.headerdivclass {
  background: #307ac1;
  width: 100%;
  height: 30px;
  padding: 4px;
  color: white;
  display: flex;
  justify-content: flex-start;
  align-items: center;
}

.contentdivclass {
  border-left: 3px solid #307ac1;
  border-right: 3px solid #307ac1;
  background: white;
  width: 100%;
  height: 120px;
  padding: 6px;
  display: flex;
  justify-content: center;
  align-items: center;
}`, "",{"version":3,"sources":["webpack://./src/app/components/page-header/page-header.scss"],"names":[],"mappings":"AAAA;EACE,qBAAA;EACA,8BAAA;AACF;;AAEA;EAEE,WAAA;EACA,mBAAA;EACA,gBAAA;EACA;;;;;IAAA;AAKF;;AAGA;EAEE,kBAAA;EACA,YAAA;EACA,aAAA;EACA,cAAA;EACA,UAAA;EACA,SAAA;EACA,6BAAA;AADF;;AAIA;EAEE,mBAAA;EACA,WAAA;EAAa,YAAA;EACb,YAAA;EACA,YAAA;EACA,aAAA;EACA,2BAAA;EACA,mBAAA;AADF;;AAIA;EAEE,8BAAA;EACA,+BAAA;EACA,iBAAA;EACA,WAAA;EACA,aAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAFF","sourcesContent":["ion-progress-bar {\n  --background: #444444;\n  --progress-background: #307ac1;\n}\n\n.keeperdivclass {\n\n  width: 100%;\n  background: #307ac1;\n  min-height: 52px;\n  /*\n  display: flex;\n  align-items: center; // vertikal\n  justify-content: flex-start; // horizontal\n\n   */\n}\n\n.loadingdivclass {\n\n  position: absolute;\n  width: 400px;\n  height: 300px;\n  z-index: 10000;\n  top: 200px;\n  left: 50%;\n  transform: translate(-50%, 0);\n}\n\n.headerdivclass {\n\n  background: #307ac1;\n  width: 100%; height: 30px;\n  padding: 4px;\n  color: white;\n  display: flex;\n  justify-content: flex-start; // horizontal\n  align-items: center; // vertikal\n}\n\n.contentdivclass {\n\n  border-left: 3px solid #307ac1;\n  border-right: 3px solid #307ac1;\n  background: white;\n  width: 100%;\n  height: 120px;\n  padding: 6px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 23340:
/*!******************************************************************************************!*\
  !*** ./src/app/components/page-modal-keeper/page-modal-keeper.component.scss?ngResource ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.keeperdivclass {
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  position: absolute;
  z-index: 1000;
}

.contentdivclass {
  background: blue;
  left: 50%;
  position: absolute;
  transform: translate(-50%);
}

.menufilterbuttonclass {
  padding: 2px;
  padding-right: 4px;
  cursor: pointer;
  background: #7b6a58;
  border-radius: 4px;
}`, "",{"version":3,"sources":["webpack://./src/app/components/page-modal-keeper/page-modal-keeper.component.scss"],"names":[],"mappings":"AACA;EAEE,WAAA;EACA,YAAA;EACA,8BAAA;EACA,kBAAA;EACA,aAAA;AADF;;AAIA;EAEE,gBAAA;EACA,SAAA;EACA,kBAAA;EACA,0BAAA;AAFF;;AAKA;EAEE,YAAA;EACA,kBAAA;EACA,eAAA;EACA,mBAAA;EACA,kBAAA;AAHF","sourcesContent":["\n.keeperdivclass {\n\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  position:absolute;\n  z-index: 1000;\n}\n\n.contentdivclass {\n\n  background: blue;\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 19584:
/*!**********************************************************************************************!*\
  !*** ./src/app/components/pj-urlaubsplanung-kalender/urlausplanung-kalender.scss?ngResource ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.frameclass {
  border: 1px solid #307ac1;
  background: white;
  color: white;
  padding: 4px;
  width: 100%;
  height: 100%;
}

.tagrahmenclass {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  border: 1px solid #444444;
}

.feiertagdivclass {
  width: 100%;
  height: 20px;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
}

.feriendivclass {
  width: 100%;
  height: 20px;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
}

.taginfodivclass {
  font-weight: bold;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  height: inherit;
  height: 26px;
  color: #307ac1;
}

.kwinfodivclass {
  font-weight: bold;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 30px;
  color: #307ac1;
}

.taginfospacedivclass {
  color: red;
  height: 20px;
  width: 100%;
}

.wochenendedivclass {
  font-weight: bold;
  color: white;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 30px;
  background: #34495E;
}

.wochenendespacedivclass {
  background: #34495E;
  height: 20px;
  width: 100%;
}

.tagdivclass {
  cursor: pointer;
  font-weight: bold;
  color: black;
  width: 100%;
  height: 30px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.tagexterndivclass {
  border-top: 1px solid red;
  cursor: pointer;
  color: white;
  font-size: 80%;
  font-weight: bold;
  width: 100%;
  height: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
}

.tagexternemptydivclass {
  border-top: 1px solid;
  cursor: pointer;
  color: white;
  font-size: 80%;
  width: 100%;
  height: 20px;
  display: flex;
  box-sizing: border-box;
  justify-content: center;
  align-items: center;
}

.buttoninfoclass {
  width: 100%;
  height: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legenderounddivclass {
  font-weight: bold;
  color: white;
  width: 10px;
  border: 1px solid #444444;
  height: 10px;
  border-radius: 50%;
}

/*

.ferientagdivclass {

  cursor: pointer;
  font-weight: bold;
  color: white;
  width: 100%;
  display: flex;
  justify-content: center; // horizontal
  align-items: center; // vertikal
  height: 30px;
  background: burlywood;
}

 */
.kwdivclass {
  border-radius: 50px;
  height: 38px;
  background: none;
  color: black;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}`, "",{"version":3,"sources":["webpack://./src/app/components/pj-urlaubsplanung-kalender/urlausplanung-kalender.scss"],"names":[],"mappings":"AAEA;EAEE,yBAAA;EACA,iBAAA;EACA,YAAA;EACA,YAAA;EACA,WAAA;EACA,YAAA;AAFF;;AAKA;EAEE,aAAA;EACA,sBAAA;EACA,WAAA;EACA,YAAA;EACA,yBAAA;AAHF;;AAMA;EAEE,WAAA;EACA,YAAA;EACA,eAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAJF;;AAOA;EAEE,WAAA;EACA,YAAA;EACA,eAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AALF;;AAQA;EAEE,iBAAA;EACA,WAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;EACA,YAAA;EACA,cAAA;AANF;;AASA;EAEE,iBAAA;EACA,WAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,YAAA;EACA,cAAA;AAPF;;AAUA;EAEE,UAAA;EACA,YAAA;EACA,WAAA;AARF;;AAWA;EAEE,iBAAA;EACA,YAAA;EACA,WAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,YAAA;EACA,mBAAA;AATF;;AAYA;EAEE,mBAAA;EACA,YAAA;EACA,WAAA;AAVF;;AAcA;EAEE,eAAA;EACA,iBAAA;EACA,YAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAZF;;AAeA;EAEE,yBAAA;EACA,eAAA;EACA,YAAA;EACA,cAAA;EACA,iBAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,sBAAA;AAbF;;AAgBA;EAEE,qBAAA;EACA,eAAA;EACA,YAAA;EACA,cAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,sBAAA;EACA,uBAAA;EACA,mBAAA;AAdF;;AAmBA;EAEE,WAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAjBF;;AAoBA;EAEE,iBAAA;EACA,YAAA;EACA,WAAA;EACA,yBAAA;EACA,YAAA;EACA,kBAAA;AAlBF;;AAsBA;;;;;;;;;;;;;;;EAAA;AAiBA;EAEE,mBAAA;EACA,YAAA;EACA,gBAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;AArBF","sourcesContent":["\n\n.frameclass {\n\n  border: 1px solid #307ac1;\n  background: white;\n  color: white;\n  padding: 4px;\n  width: 100%;\n  height: 100%\n}\n\n.tagrahmenclass {\n\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #444444;\n}\n\n.feiertagdivclass {\n\n  width: 100%;\n  height: 20px;\n  cursor: pointer;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n.feriendivclass {\n\n  width: 100%;\n  height: 20px;\n  cursor: pointer;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n.taginfodivclass {\n\n  font-weight: bold;\n  width: 100%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  height: inherit;\n  height: 26px;\n  color: #307ac1;\n}\n\n.kwinfodivclass {\n\n  font-weight: bold;\n  width: 100%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  height: 30px;\n  color: #307ac1;\n}\n\n.taginfospacedivclass {\n\n  color: red;\n  height: 20px;\n  width: 100%;\n}\n\n.wochenendedivclass {\n\n  font-weight: bold;\n  color: white;\n  width: 100%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  height: 30px;\n  background: #34495E;\n}\n\n.wochenendespacedivclass {\n\n  background: #34495E;\n  height: 20px;\n  width: 100%;\n}\n\n\n.tagdivclass {\n\n  cursor: pointer;\n  font-weight: bold;\n  color: black;\n  width: 100%;\n  height: 30px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n.tagexterndivclass {\n\n  border-top: 1px solid red;\n  cursor: pointer;\n  color: white;\n  font-size: 80%;\n  font-weight: bold;\n  width: 100%;\n  height: 20px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  box-sizing: border-box;\n}\n\n.tagexternemptydivclass {\n\n  border-top: 1px solid;\n  cursor: pointer;\n  color: white;\n  font-size: 80%;\n  width: 100%;\n  height: 20px;\n  display: flex;\n  box-sizing: border-box;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n\n\n.buttoninfoclass {\n\n  width: 100%;\n  height: 10px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n.legenderounddivclass {\n\n  font-weight: bold;\n  color: white;\n  width: 10px;\n  border: 1px solid #444444;\n  height: 10px;\n  border-radius: 50%;\n}\n\n\n/*\n\n.ferientagdivclass {\n\n  cursor: pointer;\n  font-weight: bold;\n  color: white;\n  width: 100%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  height: 30px;\n  background: burlywood;\n}\n\n */\n\n.kwdivclass {\n\n  border-radius: 50px;\n  height: 38px;\n  background: none;\n  color: black;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  cursor: pointer;\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 66673:
/*!**************************************************************************************!*\
  !*** ./src/app/pages/common-einstellungen/common-einstellungen.page.scss?ngResource ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `#container {
  text-align: center;
  position: absolute;
  left: 0;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
}

.sendmailcircle {
  width: 12px;
  height: 12px;
  border-radius: 50%;
}

#container strong {
  font-size: 20px;
  line-height: 26px;
}

#container p {
  font-size: 16px;
  line-height: 22px;
  color: #8c8c8c;
  margin: 0;
}

#container a {
  text-decoration: none;
}`, "",{"version":3,"sources":["webpack://./src/app/pages/common-einstellungen/common-einstellungen.page.scss"],"names":[],"mappings":"AAAA;EACE,kBAAA;EAEA,kBAAA;EACA,OAAA;EACA,QAAA;EACA,QAAA;EACA,2BAAA;AAAF;;AAGA;EAEE,WAAA;EACA,YAAA;EACA,kBAAA;AADF;;AAIA;EACE,eAAA;EACA,iBAAA;AADF;;AAIA;EACE,eAAA;EACA,iBAAA;EAEA,cAAA;EAEA,SAAA;AAHF;;AAMA;EACE,qBAAA;AAHF","sourcesContent":["#container {\n  text-align: center;\n\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n.sendmailcircle {\n\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n}\n\n#container strong {\n  font-size: 20px;\n  line-height: 26px;\n}\n\n#container p {\n  font-size: 16px;\n  line-height: 22px;\n\n  color: #8c8c8c;\n\n  margin: 0;\n}\n\n#container a {\n  text-decoration: none;\n}\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 94264:
/*!********************************************************************!*\
  !*** ./src/app/pages/common-home/common-home.page.scss?ngResource ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.projektbuttoniconclass {
  height: 90px;
  width: 100px;
  z-index: 100;
  position: absolute;
  display: flex;
  justify-content: center;
  align-items: center;
}

.projektbuttoniconerrorclass {
  height: 90px;
  width: 100px;
  z-index: 200;
  position: absolute;
  display: flex;
  justify-content: center;
  align-items: center;
}

.trennerdiv {
  width: 100px;
  height: 10px;
  border-radius: 4px;
  margin: 6px;
}

.trennerdivclass {
  width: 1px;
  min-height: 30px;
  height: 100%;
  background: silver;
}

.buttonclass {
  display: flex;
  justify-content: center;
  align-items: center;
  border: 2px solid gray;
  border-radius: 10px;
  width: 160px;
  height: 140px;
  cursor: pointer;
  background: white;
}

.changelogdiv {
  border: 2px solid gray;
  border-radius: 10px;
  width: 360px;
  height: 300px;
  position: absolute;
  padding: 8px;
  left: 20px;
  bottom: 20px;
  background: white;
  z-index: 1000;
  overflow: auto;
}

.outputdiv {
  border: 2px solid gray;
  border-radius: 10px;
  width: 500px;
  height: 600px;
  position: absolute;
  position: absolute;
  padding: 8px;
  left: 20px;
  top: 560px;
  background: white;
  z-index: 1000;
  overflow: auto;
}

.userimagesmall {
  display: inline-block;
  width: 40px;
  height: 40px;
  margin-top: 4px;
  border-radius: 50%;
  object-fit: cover;
}

.userimage {
  display: inline-block;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  object-fit: cover;
}

.userkuerzelsmall {
  display: inline-block;
  width: 40px;
  height: 40px;
  margin-right: 4px;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  color: white;
  font-weight: bold;
}

.buttonbigclass {
  display: flex;
  justify-content: center;
  align-items: center;
  border: 2px solid gray;
  border-radius: 10px;
  width: 360px;
  height: 220px;
  cursor: pointer;
  background: white;
}

.buttonsmallclass {
  display: flex;
  justify-content: center;
  align-items: center;
  border: 2px solid gray;
  border-radius: 10px;
  width: 80px;
  height: 80px;
  cursor: pointer;
  background: white;
}

.favlistedivclass {
  display: flex;
  justify-content: center;
  align-items: center;
  border: 2px solid gray;
  border-radius: 10px;
  width: 400px;
  cursor: pointer;
  background: white;
  overflow: auto;
}

.menubuttonclass {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  width: 100%;
  min-height: 50px;
  padding: 2px;
}`, "",{"version":3,"sources":["webpack://./src/app/pages/common-home/common-home.page.scss"],"names":[],"mappings":"AAAA;EAEE,YAAA;EACA,YAAA;EACA,YAAA;EACA,kBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAAF;;AAEC;EAEE,YAAA;EACA,YAAA;EACD,YAAA;EACA,kBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAAF;;AAIA;EAEE,YAAA;EACA,YAAA;EACA,kBAAA;EACA,WAAA;AAFF;;AAKA;EAEE,UAAA;EACA,gBAAA;EACA,YAAA;EACA,kBAAA;AAHF;;AAMA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,sBAAA;EACA,mBAAA;EACA,YAAA;EACA,aAAA;EACA,eAAA;EACA,iBAAA;AAJF;;AAOA;EAEE,sBAAA;EACA,mBAAA;EACA,YAAA;EACA,aAAA;EACA,kBAAA;EACA,YAAA;EACA,UAAA;EACA,YAAA;EACA,iBAAA;EACA,aAAA;EACA,cAAA;AALF;;AAQA;EAEE,sBAAA;EACA,mBAAA;EACA,YAAA;EACA,aAAA;EACA,kBAAA;EACA,kBAAA;EACA,YAAA;EACA,UAAA;EACA,UAAA;EACA,iBAAA;EACA,aAAA;EACA,cAAA;AANF;;AASA;EAEE,qBAAA;EACA,WAAA;EACA,YAAA;EACA,eAAA;EACA,kBAAA;EACA,iBAAA;AAPF;;AAUA;EAEE,qBAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;EACA,iBAAA;AARF;;AAWA;EAEE,qBAAA;EACA,WAAA;EACA,YAAA;EACA,iBAAA;EACA,kBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,YAAA;EACA,iBAAA;AATF;;AAYA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,sBAAA;EACA,mBAAA;EACA,YAAA;EACA,aAAA;EACA,eAAA;EACA,iBAAA;AAVF;;AAaA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,sBAAA;EACA,mBAAA;EACA,WAAA;EACA,YAAA;EACA,eAAA;EACA,iBAAA;AAXF;;AAcA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,sBAAA;EACA,mBAAA;EACA,YAAA;EACA,eAAA;EACA,iBAAA;EACA,cAAA;AAZF;;AAeA;EAEE,aAAA;EACA,2BAAA;EACA,mBAAA;EACA,WAAA;EACA,gBAAA;EACA,YAAA;AAbF","sourcesContent":[".projektbuttoniconclass {\n\n  height: 90px;\n  width: 100px;\n  z-index: 100;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n}.projektbuttoniconerrorclass {\n\n   height: 90px;\n   width: 100px;\n  z-index: 200;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n\n.trennerdiv {\n\n  width: 100px;\n  height: 10px;\n  border-radius: 4px;\n  margin: 6px;\n}\n\n.trennerdivclass {\n\n  width: 1px;\n  min-height: 30px;\n  height: 100%;\n  background: silver;\n}\n\n.buttonclass {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  border: 2px solid gray;\n  border-radius: 10px;\n  width: 160px;\n  height: 140px;\n  cursor: pointer;\n  background: white;\n}\n\n.changelogdiv {\n\n  border: 2px solid gray;\n  border-radius: 10px;\n  width: 360px;\n  height: 300px;\n  position: absolute;\n  padding: 8px;\n  left: 20px;\n  bottom: 20px;\n  background: white;\n  z-index: 1000;\n  overflow: auto;\n}\n\n.outputdiv {\n\n  border: 2px solid gray;\n  border-radius: 10px;\n  width: 500px;\n  height: 600px;\n  position: absolute;\n  position: absolute;\n  padding: 8px;\n  left: 20px;\n  top: 560px;\n  background: white;\n  z-index: 1000;\n  overflow: auto;\n}\n\n.userimagesmall {\n\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  margin-top: 4px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.userimage {\n\n  display: inline-block;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.userkuerzelsmall {\n\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  margin-right: 4px;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  color: white;\n  font-weight: bold;\n}\n\n.buttonbigclass {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  border: 2px solid gray;\n  border-radius: 10px;\n  width: 360px;\n  height: 220px;\n  cursor: pointer;\n  background: white;\n}\n\n.buttonsmallclass {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  border: 2px solid gray;\n  border-radius: 10px;\n  width: 80px;\n  height: 80px;\n  cursor: pointer;\n  background: white;\n}\n\n.favlistedivclass {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  border: 2px solid gray;\n  border-radius: 10px;\n  width: 400px;\n  cursor: pointer;\n  background: white;\n  overflow: auto;\n}\n\n.menubuttonclass {\n\n  display: flex;\n  justify-content: flex-start; // horizontal\n  align-items: center; // vertikal\n  width: 100%;\n  min-height: 50px;\n  padding: 2px;\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 52856:
/*!****************************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-einstellungen/common-urlaub-einstellungen.page.scss?ngResource ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.legendedivclass {
  font-weight: bold;
  color: white;
  width: 30px;
  border: 1px solid #444444;
  height: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legendeexterndivclass {
  width: 30px;
  border: 1px solid red;
  height: 20px;
  font-size: 80%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legenderounddivclass {
  font-weight: bold;
  color: white;
  width: 10px;
  border: 1px solid #444444;
  height: 10px;
  border-radius: 50%;
  cursor: pointer;
}

.monatedivclass {
  height: 30px;
  width: 100px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  border-radius: 4px;
  border: 1px solid #444444;
  cursor: pointer;
  color: black;
  background: white;
}

.monatedivclass:hover {
  color: white;
  background: #307ac1;
}`, "",{"version":3,"sources":["webpack://./src/app/pages/common-urlaub-einstellungen/common-urlaub-einstellungen.page.scss"],"names":[],"mappings":"AAAA;EAEE,iBAAA;EACA,YAAA;EACA,WAAA;EACA,yBAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAAF;;AAGA;EAEE,WAAA;EACA,qBAAA;EACA,YAAA;EACA,cAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AADF;;AAKA;EAEE,iBAAA;EACA,YAAA;EACA,WAAA;EACA,yBAAA;EACA,YAAA;EACA,kBAAA;EACA,eAAA;AAHF;;AAMA;EAEE,YAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,iBAAA;EACA,kBAAA;EACA,yBAAA;EACA,eAAA;EACA,YAAA;EACA,iBAAA;AAJF;;AAOA;EAEE,YAAA;EACA,mBAAA;AALF","sourcesContent":[".legendedivclass {\n\n  font-weight: bold;\n  color: white;\n  width: 30px;\n  border: 1px solid #444444;\n  height: 20px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n\n}\n.legendeexterndivclass {\n\n  width: 30px;\n  border: 1px solid red;\n  height: 20px;\n  font-size: 80%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n\n}\n\n.legenderounddivclass {\n\n  font-weight: bold;\n  color: white;\n  width: 10px;\n  border: 1px solid #444444;\n  height: 10px;\n  border-radius: 50%;\n  cursor: pointer;\n}\n\n.monatedivclass {\n\n  height: 30px;\n  width: 100px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  font-weight: bold;\n  border-radius: 4px;\n  border: 1px solid #444444;\n  cursor: pointer;\n  color: black;\n  background: white;\n}\n\n.monatedivclass:hover {\n\n  color: white;\n  background: #307ac1;\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 95552:
/*!********************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-freigaben/common-urlaub-freigaben.page.scss?ngResource ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.contentkeeperdivclass {
  position: relative;
  width: 100%;
  height: 100%;
}

.contentdivclass {
  position: absolute;
  width: 100%;
  height: 100%;
  z-index: 10;
  overflow: auto;
}

.legendebuttonclass {
  width: 14px;
  height: 100%;
  background: #307ac1;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

.legendekeeperdivclass {
  position: absolute;
  height: 1000px;
  background: silver;
  right: 0px;
  top: 0px;
  z-index: 20;
  overflow: visible;
}

.legendedivclass {
  font-weight: bold;
  font-size: 80%;
  color: white;
  width: 36px;
  border: 1px solid #444444;
  height: 24px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legendenewdivclass {
  width: 36px;
  height: 24px;
  display: flex;
  flex-direction: row;
}

.legendeinnerdivclass {
  color: white;
  font-size: 90%;
  width: 50%;
  height: 24px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legendebreitdivclass {
  font-weight: bold;
  font-size: 80%;
  color: white;
  width: 60px;
  border: 1px solid #444444;
  height: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legendeexterndivclass {
  width: 30px;
  border: 1px solid red;
  height: 20px;
  font-size: 80%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legenderounddivclass {
  font-weight: bold;
  color: white;
  width: 10px;
  border: 1px solid #444444;
  height: 10px;
  border-radius: 50%;
  cursor: pointer;
}

.monatedivclass {
  height: 30px;
  width: 100px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  border-radius: 4px;
  border: 1px solid #444444;
  cursor: pointer;
  color: black;
  background: white;
}

.monatedivclass:hover {
  color: white;
  background: #307ac1;
}`, "",{"version":3,"sources":["webpack://./src/app/pages/common-urlaub-freigaben/common-urlaub-freigaben.page.scss"],"names":[],"mappings":"AAAA;EAEE,kBAAA;EACA,WAAA;EACA,YAAA;AAAF;;AAGA;EAEE,kBAAA;EACA,WAAA;EACA,YAAA;EACA,WAAA;EACA,cAAA;AADF;;AAIA;EAEE,WAAA;EACA,YAAA;EACA,mBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;AAFF;;AAKA;EAEE,kBAAA;EACA,cAAA;EACA,kBAAA;EACA,UAAA;EACA,QAAA;EACA,WAAA;EACA,iBAAA;AAHF;;AAMA;EAEE,iBAAA;EACA,cAAA;EACA,YAAA;EACA,WAAA;EACA,yBAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAJF;;AAOA;EAEE,WAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;AALF;;AAQA;EAEE,YAAA;EACA,cAAA;EACA,UAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AANF;;AASA;EAEE,iBAAA;EACA,cAAA;EACA,YAAA;EACA,WAAA;EACA,yBAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAPF;;AAWA;EAEE,WAAA;EACA,qBAAA;EACA,YAAA;EACA,cAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AATF;;AAaA;EAEE,iBAAA;EACA,YAAA;EACA,WAAA;EACA,yBAAA;EACA,YAAA;EACA,kBAAA;EACA,eAAA;AAXF;;AAcA;EAEE,YAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,iBAAA;EACA,kBAAA;EACA,yBAAA;EACA,eAAA;EACA,YAAA;EACA,iBAAA;AAZF;;AAeA;EAEE,YAAA;EACA,mBAAA;AAbF","sourcesContent":[".contentkeeperdivclass {\n\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.contentdivclass {\n\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: 10;\n  overflow: auto;\n}\n\n.legendebuttonclass {\n\n  width: 14px;\n  height: 100%;\n  background: #307ac1;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  cursor: pointer;\n}\n\n.legendekeeperdivclass {\n\n  position: absolute;\n  height: 1000px;\n  background: silver;\n  right: 0px;\n  top: 0px;\n  z-index: 20;\n  overflow: visible;\n}\n\n.legendedivclass {\n\n  font-weight: bold;\n  font-size: 80%;\n  color: white;\n  width: 36px;\n  border: 1px solid #444444;\n  height: 24px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n.legendenewdivclass {\n\n  width: 36px;\n  height: 24px;\n  display: flex;\n  flex-direction: row;\n}\n\n.legendeinnerdivclass {\n\n  color: white;\n  font-size: 90%;\n  width: 50%;\n  height: 24px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n.legendebreitdivclass {\n\n  font-weight: bold;\n  font-size: 80%;\n  color: white;\n  width: 60px;\n  border: 1px solid #444444;\n  height: 20px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n\n.legendeexterndivclass {\n\n  width: 30px;\n  border: 1px solid red;\n  height: 20px;\n  font-size: 80%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n\n}\n\n.legenderounddivclass {\n\n  font-weight: bold;\n  color: white;\n  width: 10px;\n  border: 1px solid #444444;\n  height: 10px;\n  border-radius: 50%;\n  cursor: pointer;\n}\n\n.monatedivclass {\n\n  height: 30px;\n  width: 100px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  font-weight: bold;\n  border-radius: 4px;\n  border: 1px solid #444444;\n  cursor: pointer;\n  color: black;\n  background: white;\n}\n\n.monatedivclass:hover {\n\n  color: white;\n  background: #307ac1;\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 46841:
/*!**********************************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-gesamtuebersicht/common-urlaub-gesamtuebersicht.page.scss?ngResource ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.contentdivclass {
  position: relative;
  width: 100%;
  height: 100%;
  z-index: 10;
  overflow: visible;
}

.legendebuttonclass {
  width: 14px;
  background: #307ac1;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

.legendekeeperdivclass {
  position: absolute;
  background: silver;
  right: 0px;
  top: 0px;
  bottom: 0px;
  z-index: 20;
  overflow: visible;
  display: flex;
  flex-direction: row;
}

.headerdivclass {
  position: absolute;
  left: 0px;
  top: 0px;
  width: 100%;
}

.innercontentdivclass {
  position: absolute;
  left: 0px;
  width: 100%;
  overflow: auto;
}

.urlaubclass {
  width: 38px;
  height: 20px;
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 80%;
}

.homeofficeclass {
  width: 38px;
  height: 36px;
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 80%;
}

.monatedivclass {
  height: 30px;
  width: 100px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  border-radius: 4px;
  border: 1px solid #444444;
  cursor: pointer;
  color: black;
  background: white;
}

.legendedivclass {
  font-weight: bold;
  color: white;
  width: 30px;
  border: 1px solid #444444;
  height: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legendeexterndivclass {
  width: 30px;
  border: 1px solid red;
  height: 20px;
  font-size: 80%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legenderounddivclass {
  font-weight: bold;
  color: white;
  width: 10px;
  border: 1px solid #444444;
  height: 10px;
  border-radius: 50%;
  cursor: pointer;
}

.monatedivclass:hover {
  color: white;
  background: #307ac1;
}`, "",{"version":3,"sources":["webpack://./src/app/pages/common-urlaub-gesamtuebersicht/common-urlaub-gesamtuebersicht.page.scss"],"names":[],"mappings":"AAAA;EAEE,kBAAA;EACA,WAAA;EACA,YAAA;EACA,WAAA;EACA,iBAAA;AAAF;;AAGA;EAEE,WAAA;EACA,mBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;AADF;;AAIA;EAEE,kBAAA;EACA,kBAAA;EACA,UAAA;EACA,QAAA;EACA,WAAA;EACA,WAAA;EACA,iBAAA;EACA,aAAA;EACA,mBAAA;AAFF;;AAKA;EAEE,kBAAA;EACA,SAAA;EACA,QAAA;EACA,WAAA;AAHF;;AAMA;EAEE,kBAAA;EACA,SAAA;EACA,WAAA;EACA,cAAA;AAJF;;AAOA;EAEE,WAAA;EACA,YAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,cAAA;AALF;;AAQA;EAEE,WAAA;EACA,YAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,cAAA;AANF;;AASA;EAEE,YAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,iBAAA;EACA,kBAAA;EACA,yBAAA;EACA,eAAA;EACA,YAAA;EACA,iBAAA;AAPF;;AAUA;EAEE,iBAAA;EACA,YAAA;EACA,WAAA;EACA,yBAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AARF;;AAWA;EAEE,WAAA;EACA,qBAAA;EACA,YAAA;EACA,cAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AATF;;AAaA;EAEE,iBAAA;EACA,YAAA;EACA,WAAA;EACA,yBAAA;EACA,YAAA;EACA,kBAAA;EACA,eAAA;AAXF;;AAeA;EAEE,YAAA;EACA,mBAAA;AAbF","sourcesContent":[".contentdivclass {\n\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 10;\n  overflow: visible;\n}\n\n.legendebuttonclass {\n\n  width: 14px;\n  background: #307ac1;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  cursor: pointer;\n}\n\n.legendekeeperdivclass {\n\n  position: absolute;\n  background: silver;\n  right: 0px;\n  top:   0px;\n  bottom: 0px;\n  z-index: 20;\n  overflow: visible;\n  display: flex;\n  flex-direction: row;\n}\n\n.headerdivclass {\n\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  width: 100%;\n}\n\n.innercontentdivclass {\n\n  position: absolute;\n  left: 0px;\n  width: 100%;\n  overflow: auto;\n}\n\n.urlaubclass {\n\n  width: 38px;\n  height: 20px;\n  color: white;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  font-size: 80%;\n}\n\n.homeofficeclass {\n\n  width: 38px;\n  height: 36px;\n  color: white;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  font-size: 80%;\n}\n\n.monatedivclass {\n\n  height: 30px;\n  width: 100px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  font-weight: bold;\n  border-radius: 4px;\n  border: 1px solid #444444;\n  cursor: pointer;\n  color: black;\n  background: white;\n}\n\n.legendedivclass {\n\n  font-weight: bold;\n  color: white;\n  width: 30px;\n  border: 1px solid #444444;\n  height: 20px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n\n}\n.legendeexterndivclass {\n\n  width: 30px;\n  border: 1px solid red;\n  height: 20px;\n  font-size: 80%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n\n}\n\n.legenderounddivclass {\n\n  font-weight: bold;\n  color: white;\n  width: 10px;\n  border: 1px solid #444444;\n  height: 10px;\n  border-radius: 50%;\n  cursor: pointer;\n}\n\n\n.monatedivclass:hover {\n\n  color: white;\n  background: #307ac1;\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 70192:
/*!****************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-planung/common-urlaub-planung.page.scss?ngResource ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.festlegenbuttondiv {
  background: #444444;
  border-radius: 4px;
  padding: 4px;
  display: flex;
  justify-content: center;
  align-items: center;
  color: white;
  width: 100%;
  min-height: 30px;
  cursor: pointer;
}

.datumdivclass {
  width: 200px;
  height: 60px;
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
  background: #307ac1;
  color: white;
  font-weight: bold;
  border: 1px solid #444444;
  border-radius: 4px;
  padding: 4px;
}

.datumcanceldivclass {
  width: 60px;
  height: 60px;
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
  background: red;
  color: white;
  font-weight: bold;
  border: 1px solid #444444;
  border-radius: 4px;
  cursor: pointer;
  padding: 4px;
}

.datumokdivclass {
  width: 120px;
  height: 60px;
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
  background: green;
  color: white;
  font-weight: bold;
  border: 1px solid #444444;
  border-radius: 4px;
  cursor: pointer;
  padding: 4px;
}

.contentkeeperdivclass {
  position: relative;
  width: 100%;
  height: 100%;
}

.contentdivclass {
  position: absolute;
  width: 100%;
  height: 100%;
  z-index: 10;
  overflow: auto;
}

.legendebuttonclass {
  width: 14px;
  height: 100%;
  background: #307ac1;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

.legendekeeperdivclass {
  position: absolute;
  height: 1000px;
  background: silver;
  right: 0px;
  top: 0px;
  z-index: 20;
  overflow: visible;
}

.legendedivclass {
  font-size: 90%;
  font-weight: bold;
  color: white;
  width: 36px;
  height: 24px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legendenewdivclass {
  width: 36px;
  height: 24px;
  display: flex;
  flex-direction: row;
}

.legendeinnerdivclass {
  color: white;
  font-size: 90%;
  width: 50%;
  height: 24px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legendeexterndivclass {
  width: 30px;
  border: 1px solid red;
  height: 20px;
  font-size: 80%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legenderounddivclass {
  font-weight: bold;
  color: white;
  width: 10px;
  border: 1px solid #444444;
  height: 10px;
  border-radius: 50%;
  cursor: pointer;
}

.monatedivclass {
  height: 30px;
  width: 100px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  border-radius: 4px;
  border: 1px solid #444444;
  cursor: pointer;
  color: black;
  background: white;
}

.monatedivclass:hover {
  color: white;
  background: #307ac1;
}

.monatlableclass {
  height: 32px;
  display: flex;
  justify-content: flex-start;
  align-items: center;
}`, "",{"version":3,"sources":["webpack://./src/app/pages/common-urlaub-planung/common-urlaub-planung.page.scss"],"names":[],"mappings":"AAAA;EAEE,mBAAA;EACA,kBAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,YAAA;EACA,WAAA;EACA,gBAAA;EACA,eAAA;AAAF;;AAEA;EAEE,YAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,kBAAA;EACA,mBAAA;EACA,YAAA;EACA,iBAAA;EACA,yBAAA;EACA,kBAAA;EACA,YAAA;AAAF;;AAGA;EAEE,WAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,kBAAA;EACA,eAAA;EACA,YAAA;EACA,iBAAA;EACA,yBAAA;EACA,kBAAA;EACA,eAAA;EACA,YAAA;AADF;;AAIA;EAEE,YAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,kBAAA;EACA,iBAAA;EACA,YAAA;EACA,iBAAA;EACA,yBAAA;EACA,kBAAA;EACA,eAAA;EACA,YAAA;AAFF;;AAKA;EAEE,kBAAA;EACA,WAAA;EACA,YAAA;AAHF;;AAMA;EAEE,kBAAA;EACA,WAAA;EACA,YAAA;EACA,WAAA;EACA,cAAA;AAJF;;AAOA;EAEE,WAAA;EACA,YAAA;EACA,mBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;AALF;;AAQA;EAEE,kBAAA;EACA,cAAA;EACA,kBAAA;EACA,UAAA;EACA,QAAA;EACA,WAAA;EACA,iBAAA;AANF;;AASA;EAEE,cAAA;EACA,iBAAA;EACA,YAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAPF;;AAUA;EAEE,WAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;AARF;;AAWA;EAEE,YAAA;EACA,cAAA;EACA,UAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AATF;;AAYA;EAEE,WAAA;EACA,qBAAA;EACA,YAAA;EACA,cAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAVF;;AAcA;EAEE,iBAAA;EACA,YAAA;EACA,WAAA;EACA,yBAAA;EACA,YAAA;EACA,kBAAA;EACA,eAAA;AAZF;;AAeA;EAEE,YAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,iBAAA;EACA,kBAAA;EACA,yBAAA;EACA,eAAA;EACA,YAAA;EACA,iBAAA;AAbF;;AAgBA;EAEE,YAAA;EACA,mBAAA;AAdF;;AAiBA;EAEE,YAAA;EACA,aAAA;EACA,2BAAA;EACA,mBAAA;AAfF","sourcesContent":[".festlegenbuttondiv {\n\n  background: #444444;\n  border-radius: 4px;\n  padding: 4px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  color: white;\n  width: 100%;\n  min-height: 30px;\n  cursor: pointer;\n}\n.datumdivclass {\n\n  width: 200px;\n  height: 60px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  text-align: center;\n  background: #307ac1;\n  color: white;\n  font-weight: bold;\n  border: 1px solid #444444;\n  border-radius: 4px;\n  padding: 4px;\n}\n\n.datumcanceldivclass {\n\n  width: 60px;\n  height: 60px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  text-align: center;\n  background: red;\n  color: white;\n  font-weight: bold;\n  border: 1px solid #444444;\n  border-radius: 4px;\n  cursor: pointer;\n  padding: 4px;\n}\n\n.datumokdivclass {\n\n  width: 120px;\n  height: 60px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  text-align: center;\n  background: green;\n  color: white;\n  font-weight: bold;\n  border: 1px solid #444444;\n  border-radius: 4px;\n  cursor: pointer;\n  padding: 4px;\n}\n\n.contentkeeperdivclass {\n\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.contentdivclass {\n\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: 10;\n  overflow: auto;\n}\n\n.legendebuttonclass {\n\n  width: 14px;\n  height: 100%;\n  background: #307ac1;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  cursor: pointer;\n}\n\n.legendekeeperdivclass {\n\n  position: absolute;\n  height: 1000px;\n  background: silver;\n  right: 0px;\n  top: 0px;\n  z-index: 20;\n  overflow: visible;\n}\n\n.legendedivclass {\n\n  font-size: 90%;\n  font-weight: bold;\n  color: white;\n  width: 36px;\n  height: 24px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n.legendenewdivclass {\n\n  width: 36px;\n  height: 24px;\n  display: flex;\n  flex-direction: row;\n}\n\n.legendeinnerdivclass {\n\n  color: white;\n  font-size: 90%;\n  width: 50%;\n  height: 24px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n.legendeexterndivclass {\n\n  width: 30px;\n  border: 1px solid red;\n  height: 20px;\n  font-size: 80%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n\n}\n\n.legenderounddivclass {\n\n  font-weight: bold;\n  color: white;\n  width: 10px;\n  border: 1px solid #444444;\n  height: 10px;\n  border-radius: 50%;\n  cursor: pointer;\n}\n\n.monatedivclass {\n\n  height: 30px;\n  width: 100px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  font-weight: bold;\n  border-radius: 4px;\n  border: 1px solid #444444;\n  cursor: pointer;\n  color: black;\n  background: white;\n}\n\n.monatedivclass:hover {\n\n  color: white;\n  background: #307ac1;\n}\n\n.monatlableclass {\n\n  height: 32px;\n  display: flex;\n  justify-content: flex-start; // horizontal\n  align-items: center; // vertikal\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 58680:
/*!**********************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-uebersicht/common-urlaub-uebersicht.page.scss?ngResource ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.contentdivclass {
  position: relative;
  width: 100%;
  height: 100%;
  z-index: 10;
  overflow: visible;
}

.legendebuttonclass {
  width: 14px;
  height: 100%;
  background: #307ac1;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

.legendekeeperdivclass {
  position: absolute;
  height: 1000px;
  background: silver;
  right: 0px;
  top: 0px;
  z-index: 20;
  overflow: visible;
}

.legendedivclass {
  font-weight: bold;
  color: white;
  width: 30px;
  border: 1px solid #444444;
  height: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legendeexterndivclass {
  width: 30px;
  border: 1px solid red;
  height: 20px;
  font-size: 80%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.legenderounddivclass {
  font-weight: bold;
  color: white;
  width: 10px;
  border: 1px solid #444444;
  height: 10px;
  border-radius: 50%;
  cursor: pointer;
}

.monatedivclass {
  height: 30px;
  width: 200px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  border-radius: 4px;
  border: 1px solid #444444;
  cursor: pointer;
  color: black;
  background: white;
}

.monatedivclass:hover {
  color: white;
  background: #307ac1;
}`, "",{"version":3,"sources":["webpack://./src/app/pages/common-urlaub-uebersicht/common-urlaub-uebersicht.page.scss"],"names":[],"mappings":"AAAA;EAEE,kBAAA;EACA,WAAA;EACA,YAAA;EACA,WAAA;EACA,iBAAA;AAAF;;AAGA;EAEE,WAAA;EACA,YAAA;EACA,mBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;AADF;;AAIA;EAEE,kBAAA;EACA,cAAA;EACA,kBAAA;EACA,UAAA;EACA,QAAA;EACA,WAAA;EACA,iBAAA;AAFF;;AAKA;EAEE,iBAAA;EACA,YAAA;EACA,WAAA;EACA,yBAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAHF;;AAMA;EAEE,WAAA;EACA,qBAAA;EACA,YAAA;EACA,cAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AAJF;;AAQA;EAEE,iBAAA;EACA,YAAA;EACA,WAAA;EACA,yBAAA;EACA,YAAA;EACA,kBAAA;EACA,eAAA;AANF;;AASA;EAEE,YAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,iBAAA;EACA,kBAAA;EACA,yBAAA;EACA,eAAA;EACA,YAAA;EACA,iBAAA;AAPF;;AAUA;EAEE,YAAA;EACA,mBAAA;AARF","sourcesContent":[".contentdivclass {\n\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 10;\n  overflow: visible;\n}\n\n.legendebuttonclass {\n\n  width: 14px;\n  height: 100%;\n  background: #307ac1;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  cursor: pointer;\n}\n\n.legendekeeperdivclass {\n\n  position: absolute;\n  height: 1000px;\n  background: silver;\n  right: 0px;\n  top: 0px;\n  z-index: 20;\n  overflow: visible;\n}\n\n.legendedivclass {\n\n  font-weight: bold;\n  color: white;\n  width: 30px;\n  border: 1px solid #444444;\n  height: 20px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n\n}\n.legendeexterndivclass {\n\n  width: 30px;\n  border: 1px solid red;\n  height: 20px;\n  font-size: 80%;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n\n}\n\n.legenderounddivclass {\n\n  font-weight: bold;\n  color: white;\n  width: 10px;\n  border: 1px solid #444444;\n  height: 10px;\n  border-radius: 50%;\n  cursor: pointer;\n}\n\n.monatedivclass {\n\n  height: 30px;\n  width: 200px;\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  font-weight: bold;\n  border-radius: 4px;\n  border: 1px solid #444444;\n  cursor: pointer;\n  color: black;\n  background: white;\n}\n\n.monatedivclass:hover {\n\n  color: white;\n  background: #307ac1;\n}\n\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 33200:
/*!**************************************************************************!*\
  !*** ./src/app/pages/common-wartung/common-wartung.page.scss?ngResource ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.buttonbigclass {
  display: flex;
  justify-content: center;
  align-items: center;
  border: 2px solid gray;
  border-radius: 10px;
  width: 360px;
  height: 220px;
  cursor: pointer;
  background: white;
}`, "",{"version":3,"sources":["webpack://./src/app/pages/common-wartung/common-wartung.page.scss"],"names":[],"mappings":"AAAA;EAEE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,sBAAA;EACA,mBAAA;EACA,YAAA;EACA,aAAA;EACA,eAAA;EACA,iBAAA;AAAF","sourcesContent":[".buttonbigclass {\n\n  display: flex;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n  border: 2px solid gray;\n  border-radius: 10px;\n  width: 360px;\n  height: 220px;\n  cursor: pointer;\n  background: white;\n}\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 19384:
/*!*******************************************************************************!*\
  !*** ./src/app/pages/fi-mitarbeiterliste/fi-mitarbeiterliste.scss?ngResource ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.infotable td {
  font-size: 80%;
  color: #444444;
}

.ergonametextclass {
  font-weight: bold;
}`, "",{"version":3,"sources":["webpack://./src/app/pages/fi-mitarbeiterliste/fi-mitarbeiterliste.scss"],"names":[],"mappings":"AAGE;EAEE,cAAA;EACA,cAAA;AAHJ;;AAOA;EAEE,iBAAA;AALF","sourcesContent":["\n.infotable {\n\n  td {\n\n    font-size: 80%;\n    color: #444444;\n  }\n}\n\n.ergonametextclass {\n\n  font-weight: bold;\n}\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 19012:
/*!***************************************************************************!*\
  !*** ./src/app/pages/fi-standorteliste/fi-standorteliste.scss?ngResource ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 19728);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ 67804);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.infotable td {
  font-size: 80%;
  color: #444444;
}

.ergonametextclass {
  font-weight: bold;
}`, "",{"version":3,"sources":["webpack://./src/app/pages/fi-standorteliste/fi-standorteliste.scss"],"names":[],"mappings":"AAGE;EAEE,cAAA;EACA,cAAA;AAHJ;;AAOA;EAEE,iBAAA;AALF","sourcesContent":["\n.infotable {\n\n  td {\n\n    font-size: 80%;\n    color: #444444;\n  }\n}\n\n.ergonametextclass {\n\n  font-weight: bold;\n}\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 92348:
/*!***************************************************!*\
  !*** ./node_modules/moment/locale/ sync ^\.\/.*$ ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./af": 22408,
	"./af.js": 22408,
	"./ar": 83632,
	"./ar-dz": 98564,
	"./ar-dz.js": 98564,
	"./ar-kw": 59628,
	"./ar-kw.js": 59628,
	"./ar-ly": 60764,
	"./ar-ly.js": 60764,
	"./ar-ma": 8087,
	"./ar-ma.js": 8087,
	"./ar-ps": 84152,
	"./ar-ps.js": 84152,
	"./ar-sa": 36932,
	"./ar-sa.js": 36932,
	"./ar-tn": 97064,
	"./ar-tn.js": 97064,
	"./ar.js": 83632,
	"./az": 78216,
	"./az.js": 78216,
	"./be": 90432,
	"./be.js": 90432,
	"./bg": 54440,
	"./bg.js": 54440,
	"./bm": 45340,
	"./bm.js": 45340,
	"./bn": 91936,
	"./bn-bd": 43392,
	"./bn-bd.js": 43392,
	"./bn.js": 91936,
	"./bo": 11440,
	"./bo.js": 11440,
	"./br": 51592,
	"./br.js": 51592,
	"./bs": 15056,
	"./bs.js": 15056,
	"./ca": 25992,
	"./ca.js": 25992,
	"./cs": 15944,
	"./cs.js": 15944,
	"./cv": 60928,
	"./cv.js": 60928,
	"./cy": 86160,
	"./cy.js": 86160,
	"./da": 22112,
	"./da.js": 22112,
	"./de": 6456,
	"./de-at": 44712,
	"./de-at.js": 44712,
	"./de-ch": 29100,
	"./de-ch.js": 29100,
	"./de.js": 6456,
	"./dv": 28776,
	"./dv.js": 28776,
	"./el": 91928,
	"./el.js": 91928,
	"./en-au": 67528,
	"./en-au.js": 67528,
	"./en-ca": 20736,
	"./en-ca.js": 20736,
	"./en-gb": 13976,
	"./en-gb.js": 13976,
	"./en-ie": 41600,
	"./en-ie.js": 41600,
	"./en-il": 53344,
	"./en-il.js": 53344,
	"./en-in": 24072,
	"./en-in.js": 24072,
	"./en-nz": 46264,
	"./en-nz.js": 46264,
	"./en-sg": 7816,
	"./en-sg.js": 7816,
	"./eo": 51920,
	"./eo.js": 51920,
	"./es": 82808,
	"./es-do": 2772,
	"./es-do.js": 2772,
	"./es-mx": 83368,
	"./es-mx.js": 83368,
	"./es-us": 48288,
	"./es-us.js": 48288,
	"./es.js": 82808,
	"./et": 33892,
	"./et.js": 33892,
	"./eu": 35736,
	"./eu.js": 35736,
	"./fa": 68544,
	"./fa.js": 68544,
	"./fi": 83640,
	"./fi.js": 83640,
	"./fil": 24616,
	"./fil.js": 24616,
	"./fo": 27128,
	"./fo.js": 27128,
	"./fr": 50552,
	"./fr-ca": 59120,
	"./fr-ca.js": 59120,
	"./fr-ch": 17980,
	"./fr-ch.js": 17980,
	"./fr.js": 50552,
	"./fy": 7912,
	"./fy.js": 7912,
	"./ga": 34464,
	"./ga.js": 34464,
	"./gd": 98864,
	"./gd.js": 98864,
	"./gl": 32056,
	"./gl.js": 32056,
	"./gom-deva": 75804,
	"./gom-deva.js": 75804,
	"./gom-latn": 98648,
	"./gom-latn.js": 98648,
	"./gu": 76036,
	"./gu.js": 76036,
	"./he": 14000,
	"./he.js": 14000,
	"./hi": 48800,
	"./hi.js": 48800,
	"./hr": 55176,
	"./hr.js": 55176,
	"./hu": 192,
	"./hu.js": 192,
	"./hy-am": 94840,
	"./hy-am.js": 94840,
	"./id": 78240,
	"./id.js": 78240,
	"./is": 23608,
	"./is.js": 23608,
	"./it": 56816,
	"./it-ch": 25136,
	"./it-ch.js": 25136,
	"./it.js": 56816,
	"./ja": 17272,
	"./ja.js": 17272,
	"./jv": 83248,
	"./jv.js": 83248,
	"./ka": 4768,
	"./ka.js": 4768,
	"./kk": 93624,
	"./kk.js": 93624,
	"./km": 48168,
	"./km.js": 48168,
	"./kn": 69372,
	"./kn.js": 69372,
	"./ko": 37088,
	"./ko.js": 37088,
	"./ku": 63357,
	"./ku-kmr": 54068,
	"./ku-kmr.js": 54068,
	"./ku.js": 63357,
	"./ky": 3672,
	"./ky.js": 3672,
	"./lb": 43592,
	"./lb.js": 43592,
	"./lo": 16096,
	"./lo.js": 16096,
	"./lt": 92672,
	"./lt.js": 92672,
	"./lv": 69056,
	"./lv.js": 69056,
	"./me": 63280,
	"./me.js": 63280,
	"./mi": 95037,
	"./mi.js": 95037,
	"./mk": 48600,
	"./mk.js": 48600,
	"./ml": 93795,
	"./ml.js": 93795,
	"./mn": 19288,
	"./mn.js": 19288,
	"./mr": 63656,
	"./mr.js": 63656,
	"./ms": 71744,
	"./ms-my": 92804,
	"./ms-my.js": 92804,
	"./ms.js": 71744,
	"./mt": 28536,
	"./mt.js": 28536,
	"./my": 21764,
	"./my.js": 21764,
	"./nb": 64752,
	"./nb.js": 64752,
	"./ne": 82948,
	"./ne.js": 82948,
	"./nl": 49572,
	"./nl-be": 5900,
	"./nl-be.js": 5900,
	"./nl.js": 49572,
	"./nn": 14904,
	"./nn.js": 14904,
	"./oc-lnc": 57328,
	"./oc-lnc.js": 57328,
	"./pa-in": 81496,
	"./pa-in.js": 81496,
	"./pl": 25928,
	"./pl.js": 25928,
	"./pt": 85764,
	"./pt-br": 91248,
	"./pt-br.js": 91248,
	"./pt.js": 85764,
	"./ro": 37168,
	"./ro.js": 37168,
	"./ru": 97904,
	"./ru.js": 97904,
	"./sd": 68448,
	"./sd.js": 68448,
	"./se": 84480,
	"./se.js": 84480,
	"./si": 65696,
	"./si.js": 65696,
	"./sk": 77120,
	"./sk.js": 77120,
	"./sl": 83544,
	"./sl.js": 83544,
	"./sq": 71544,
	"./sq.js": 71544,
	"./sr": 53696,
	"./sr-cyrl": 33444,
	"./sr-cyrl.js": 33444,
	"./sr.js": 53696,
	"./ss": 32504,
	"./ss.js": 32504,
	"./sv": 39011,
	"./sv.js": 39011,
	"./sw": 74144,
	"./sw.js": 74144,
	"./ta": 81280,
	"./ta.js": 81280,
	"./te": 90504,
	"./te.js": 90504,
	"./tet": 36472,
	"./tet.js": 36472,
	"./tg": 77024,
	"./tg.js": 77024,
	"./th": 69872,
	"./th.js": 69872,
	"./tk": 63364,
	"./tk.js": 63364,
	"./tl-ph": 25164,
	"./tl-ph.js": 25164,
	"./tlh": 60048,
	"./tlh.js": 60048,
	"./tr": 86976,
	"./tr.js": 86976,
	"./tzl": 4224,
	"./tzl.js": 4224,
	"./tzm": 64316,
	"./tzm-latn": 72264,
	"./tzm-latn.js": 72264,
	"./tzm.js": 64316,
	"./ug-cn": 18984,
	"./ug-cn.js": 18984,
	"./uk": 25152,
	"./uk.js": 25152,
	"./ur": 57068,
	"./ur.js": 57068,
	"./uz": 47880,
	"./uz-latn": 7400,
	"./uz-latn.js": 7400,
	"./uz.js": 47880,
	"./vi": 35368,
	"./vi.js": 35368,
	"./x-pseudo": 71252,
	"./x-pseudo.js": 71252,
	"./yo": 98595,
	"./yo.js": 98595,
	"./zh-cn": 23036,
	"./zh-cn.js": 23036,
	"./zh-hk": 37563,
	"./zh-hk.js": 37563,
	"./zh-mo": 94952,
	"./zh-mo.js": 94952,
	"./zh-tw": 8240,
	"./zh-tw.js": 8240
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 92348;

/***/ }),

/***/ 10440:
/*!***********************************************!*\
  !*** ./src/app/app.component.html?ngResource ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-app>\n  <ion-router-outlet #Outlet [style.zoom.%]=\"Zoomfaktor\"></ion-router-outlet>\n</ion-app>\n";

/***/ }),

/***/ 18144:
/*!***************************************************************************************************!*\
  !*** ./src/app/components-page/fi-changelog-editor/fi-changelog-editor.component.html?ngResource ***!
  \***************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Changelogeditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"weiss\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <ion-grid *ngIf=\"DB.CurrentChangelog\">\n            <ion-row>\n              <ion-col>\n                <input-clone Titel=\"Version\" [(Value)]=\"DB.CurrentChangelog.Version\" [Required]=\"false\" [MaxLength]=\"100\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <input-clone Titel=\"Beschreibung\" [(Value)]=\"DB.CurrentChangelog.Beschreibung\" [Required]=\"true\" [MinLength]=\"3\" [MaxLength]=\"200\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <input-clone Titel=\"Datum\" [Value]=\"GetDatum()\" [Enabled]=\"false\"></input-clone>\n              </ion-col>\n              <ion-col></ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col size=\"12\"><br><br></ion-col>\n            </ion-row>\n            <ion-row *ngIf=\"DB.CurrentChangelog._id !== null\">\n              <ion-col>\n                <table>\n                  <tr>\n                    <td><checkbox-clon [Checked]=\"CanDelete\" (CheckChanged)=\"CanDeleteCheckedChanged($event)\"></checkbox-clon></td>\n                    <td style=\"width: 6px\"></td>\n                    <td>\n                      <ion-button size=\"small\" color=\"rot\" [disabled]=\"!CanDelete\" (click)=\"DeleteButtonClicked()\">\n                        <ion-icon name=\"trash-outline\" style=\"font-size: 20px\"></ion-icon>\n                        <ion-text>Eintrag löschen</ion-text>\n                      </ion-button>\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n\n  </ion-grid>\n\n        </div>\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"weiss\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'weiss' : 'grau'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 38691:
/*!*********************************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.component.html?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none;  width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Mitarbeiterauswahl) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.bottom.px]=\"PositionY\" [style.top.px]=\"PositionY\"  (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"weiss\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n            <tr>\n              <td colspan=\"3\">\n                <ion-button size=\"small\" color=\"grau\" (click)=\"StandortfilterButtonClicked()\">\n                  <ion-icon name=\"funnel-outline\"></ion-icon>\n                  {{GetStandortfiller()}}\n                </ion-button>\n              </td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"innerkeeperclass\">\n          <div class=\"innerkeeperlisteclass\">\n\n            <ion-list *ngIf=\"Mitarbeiterliste && Anzeigeliste.length > 0\">\n              <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Mitarbeiter of Anzeigeliste, let i = index\" (click)=\"MitrabeiterButtonClicked(Mitarbeiter)\">\n                <ion-grid class=\"maingridclass\">\n                  <ion-row  *ngIf=\"Mitarbeiterbuchstabenliste[i] !== ''\">\n                    <ion-col size=\"12\">\n                      <ion-text color=\"orange\"><b>{{Mitarbeiterbuchstabenliste[i]}}</b></ion-text>\n                    </ion-col>\n                  </ion-row>\n                  <ion-row>\n                    <ion-col size=\"12\">\n                      <div class=\"kontaktclass\">\n                        <table class=\"paddingsmalltable\" width=\"100%\">\n                          <tr>\n                            <td>\n                              <table *ngIf=\"Mitarbeiter !== null\" cellspacing=\"0\" cellpadding=\"0\">\n                                <tr>\n                                  <td><checkbox-clon [Index]=\"i\" (CheckChanged)=\"CheckedChanged($event)\" [Checked]=\"Mitarbeiter.Selected\"></checkbox-clon></td>\n                                  <td *ngIf=\"!Mitarbeiter.Filtered\">\n                                    {{Mitarbeiter.Name}} {{Mitarbeiter.Vorname}} / {{Mitarbeiter.Kuerzel}}\n                                  </td>\n                                  <td *ngIf=\"Mitarbeiter.Filtered\">\n                                    <span>{{Mitarbeiter.Text_A}}</span><span style=\"color: green\">{{Mitarbeiter.Text_B}}</span><span>{{Mitarbeiter.Text_C}}</span> / {{Mitarbeiter.Kuerzel}}\n                                  </td>\n                                </tr>\n                              </table>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>\n                              <table class=\"infotable\" style=\"white-space:nowrap;\">\n                                <tr>\n                                  <td style=\"width: 28px\"></td>\n                                  <td class=\"ergonametextclass\">Standort:</td><td>{{DBStandort.GetStandort(Mitarbeiter.StandortID)}}</td><td style=\"width: 20px\"></td>\n                                </tr>\n                              </table>\n                          </tr>\n                        </table>\n                      </div>\n                    </ion-col>\n                  </ion-row>\n                </ion-grid>\n              </ion-item>\n            </ion-list>\n\n            <div *ngIf=\"Mitarbeiterliste && Anzeigeliste.length === 0\" class=\"emptymessageclass\">\n              keine Einträge unter diesem Filter vorhanden\n            </div>\n\n          </div>\n          <div class=\"innerkeeperalphabetclass\">\n            <alphabet-relative #SmallAlphabet (AlphabetClicked)=\"AlphabetClicked($event)\"\n                      [Buchstabenliste]=\"Mitarbeiteralphabet\"\n                      [Breite]=\"Alphapetbreite\"\n                      [Auswahl]=\"Mitarbeiteralphabetauswahl\"></alphabet-relative>\n          </div>\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"weiss\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"weiss\" name=\"checkmark-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n";

/***/ }),

/***/ 64576:
/*!*******************************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.component.html?ngResource ***!
  \*******************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Mitarbeitereditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.top.px]=\"PositionY\" [style.bottom.px]=\"PositionY\"  [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"weiss\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n              <td align=\"center\" class=\"trennertdclass\"><div class=\"trennerdivclass\"></div></td>\n              <td>\n                <div class=\"menubuttonclass\" (click)=\"AllgemeinMenuButtonClicked()\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"reader-outline\" [color]=\"Bereich === Bereiche.Allgemein ? 'schwarz' : 'weiss'\"></ion-icon></td>\n                      <td [style.color]=\"Bereich === Bereiche.Allgemein ? '#000000' : 'white'\">Allgemein</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n              <td style=\"width: 20px;\"></td>\n              <td>\n                <div class=\"menubuttonclass\" (click)=\"PositionenMenuButtonClicked()\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"briefcase-outline\" [color]=\"Bereich === Bereiche.Positionen ? 'schwarz' : 'weiss'\"></ion-icon></td>\n                      <td [style.color]=\"Bereich === Bereiche.Positionen ? '#000000' : 'white'\">Positionen</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <ng-container *ngIf=\"Bereich === Bereiche.Allgemein\">\n            <ion-grid *ngIf=\"DB.CurrentMitarbeiter\">\n              <ion-row>\n                <ion-col>\n                  <ion-text color=\"baeblau\"><b>Mitarbeiter</b></ion-text>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col size=\"6\">\n                  <button-value [Buttontext]=\"'Anrede'\" [Wert_A]=\"GetAnrede()\" (ButtonClicked)=\"AnredeClickedEvent.emit()\"></button-value>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                  <input-clone [(Value)]=\"DB.CurrentMitarbeiter.Vorname\"  [Required]=\"true\" [MaxLength]=\"100\"  Titel=\"Vorname\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n                </ion-col>\n                <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                  <input-clone [(Value)]=\"DB.CurrentMitarbeiter.Name\" [Required]=\"true\" [MaxLength]=\"100\"  Titel=\"Name\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                  <input-clone [(Value)]=\"DB.CurrentMitarbeiter.Kuerzel\" [Required]=\"true\" [MinLength]=\"3\" [MaxLength]=\"10\"  Titel=\"Mitarbeiterkürzel\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n                </ion-col>\n                <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                  <!--\n                  <input-clone [(Value)]=\"DB.CurrentMitarbeiter.Jobtitel\" [Required]=\"true\" [MinLength]=\"3\" [MaxLength]=\"100\"  Titel=\"Jobtitel\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n                  -->\n                  <input-clone [Enabled]=\"false\" [Clickable]=\"true\" [Value]=\"DB.GetPositionsbezeichnung(DB.CurrentMitarbeiter.PositionID)\" [DisabledColor]=\"'gray'\" (click)=\"PositionClicked()\"  Titel=\"Position\"></input-clone>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                  <input-clone\n                    [Enabled]=\"false\"\n                    [Clickable]=\"true\"\n                    [DisabledColor]=\"DB.CurrentMitarbeiter.StandortID !== '' ? Basics.Farben.Burnicklgrau : Basics.Farben.Orange\"  [Value]=\"StandortDB.GetStandort(DB.CurrentMitarbeiter.StandortID)\"  (click)=\"StandortClicked()\"  Titel=\"Standort\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n                </ion-col>\n                <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                  <input-clone [Inputtype]=\"'email'\" [Required]=\"true\" [MinHeight]=\"30\" [(Value)]=\"DB.CurrentMitarbeiter.Email\" Titel=\"Email\" [Enabled]=\"EmailinputEnabled\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col>\n                  <ion-text color=\"baeblau\"><b>Kontakt</b></ion-text>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                  <input-clone [(Value)]=\"DB.CurrentMitarbeiter.Telefon\" Titel=\"Telefon\"></input-clone>\n                </ion-col>\n                <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                  <input-clone [(Value)]=\"DB.CurrentMitarbeiter.Mobil\" Titel=\"Mobil\"></input-clone>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col size=\"12\"></ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col>\n                  <ion-text color=\"baeblau\"><b>Urlaub</b></ion-text>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col size=\"6\">\n                  <button-value [Buttontext]=\"'Urlaubstage'\" [Wert_A]=\"DB.CurrentMitarbeiter.Urlaub !== 1 ? DB.CurrentMitarbeiter.Urlaub + ' Tage' : '1 Tag'\" (ButtonClicked)=\"UrlaubClickedEvent.emit()\"></button-value>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col size=\"6\">\n                  <button-value [Buttontext]=\"'Resturlaub'\" [Wert_A]=\"DB.CurrentMitarbeiter.Resturlaub !== 1 ? DB.CurrentMitarbeiter.Resturlaub + ' Tage' : '1 Tag'\" (ButtonClicked)=\"ResturlaubEvent.emit()\"></button-value>\n                </ion-col>\n              </ion-row>\n\n              <ion-row *ngIf=\"DB.CurrentMitarbeiter._id !== null && Pool.Mitarbeiterdaten !== null\">\n                <ion-col>\n                  <table class=\"paddingtable\">\n                    <tr>\n                      <td><checkbox-clon [Enabled]=\"Pool.Mitarbeiterdaten.Planeradministrator === true\" [Checked]=\"DB.CurrentMitarbeiter.Planeradministrator\" (CheckChanged)=\"PlaneradministratorCheckboxChanged($event)\"></checkbox-clon></td>\n                      <td>Administrator</td>\n                    </tr>\n                  </table>\n                </ion-col>\n              </ion-row>\n              <ion-row *ngIf=\"DB.CurrentMitarbeiter._id !== null && Pool.Mitarbeiterdaten !== null\">\n                <ion-col>\n                  <table class=\"paddingtable\" border=\"1\">\n                    <td colspan=\"2\"></td><td *ngFor=\"let Standort of Pool.Standorteliste\" style=\"width: 100px; text-align: center\">{{Standort.Ort}}</td>\n                    <tr>\n                      <td><checkbox-clon [Enabled]=\"Pool.Mitarbeiterdaten.Planeradministrator === true\" [Checked]=\"DB.CurrentMitarbeiter.Urlaubsfreigaben\" (CheckChanged)=\"UrlaubsfreigabenCheckboxChanged($event)\"></checkbox-clon></td>\n                      <td>Urlaub Freigaben</td>\n                      <td *ngFor=\"let Standort of Pool.Standorteliste\" align=\"center\">\n                        <checkbox-clon [Enabled]=\"DB.CurrentMitarbeiter.Urlaubsfreigaben\" [Value]=\"Standort._id\" [Checked]=\"UrlaubsfreigabeChecked(Standort._id)\" (CheckChanged)=\"UrlaubsfreigabeChanged($event)\"></checkbox-clon>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td><checkbox-clon [Enabled]=\"Pool.Mitarbeiterdaten.Planeradministrator === true\" [Checked]=\"DB.CurrentMitarbeiter.Homeofficefreigaben\" (CheckChanged)=\"HomeofficefreigabenCheckboxChanged($event)\"></checkbox-clon></td>\n                      <td>Homeoffice Freigaben</td>\n                      <td *ngFor=\"let Standort of Pool.Standorteliste\" align=\"center\">\n                        <checkbox-clon [Enabled]=\"DB.CurrentMitarbeiter.Homeofficefreigaben\" [Value]=\"Standort._id\" [Checked]=\"HomeofficefreigabeChecked(Standort._id)\" (CheckChanged)=\"HomeofficefreigabeChanged($event)\"></checkbox-clon>\n                      </td>\n                    </tr>\n                  </table>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col size=\"12\"></ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col>\n                  <ion-text color=\"baeblau\"><b>Sonstiges</b></ion-text>\n                </ion-col>\n              </ion-row>\n              <ion-row *ngIf=\"DB.CurrentMitarbeiter._id !== null\">\n                <ion-col>\n                  <table>\n                    <tr>\n                      <td><checkbox-clon [Checked]=\"DB.CurrentMitarbeiter.Archiviert\" (CheckChanged)=\"ArchivierenCheckboxChanged($event)\"></checkbox-clon></td>\n                      <td style=\"width: 6px\"></td>\n                      <td>Eintrag archivieren</td>\n                    </tr>\n                  </table>\n                </ion-col>\n              </ion-row>\n            </ion-grid>\n\n          </ng-container>\n          <ng-container *ngIf=\"Bereich === Bereiche.Positionen\">\n\n            <div class=\"keeperdivclass\">\n\n              <div class=\"poslisteclass\">\n                <ion-list>\n                  <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Position of Pool.Mitarbeiterpositionenliste\" (click)=\"PositionButtonClicked(Position)\">\n                    <table class=\"paddingtable\">\n                      <tr>\n                        <td>\n                          <div class=\"positionclass\">{{Position.Bezeichnung}}</div>\n                        </td>\n                      </tr>\n                    </table>\n\n                  </ion-item>\n                </ion-list>\n\n              </div>\n              <div class=\"poseditorclass\">\n\n                <table class=\"paddingtable\">\n                  <tr *ngIf=\"AddNewPosition === false && EditPosition === false\">\n                    <td><ion-button color=\"grau\" size=\"small\" (click)=\"NeuePositionButtonClicked()\">Neue Position eintragen</ion-button></td>\n                  </tr>\n                  <tr *ngIf=\"AddNewPosition === true || EditPosition === true\">\n                    <td style=\"width: 400px;\">\n                      <input-clone [(Value)]=\"DB.CurrentPosition.Bezeichnung\"  [Required]=\"true\" [MaxLength]=\"200\"  [Titel]=\"AddNewPosition ? 'Neue Position' : 'Position bearbeiten'\" (TextChanged)=\"NewPositionTextChanged($event)\"></input-clone>\n                    </td>\n                  </tr>\n                  <tr *ngIf=\"AddNewPosition || EditPosition === true\">\n                    <td>\n                      <table class=\"paddingtable\">\n                        <tr>\n                          <td><ion-button (click)=\"PositionCancelButtonClicked()\" color=\"rot\" size=\"small\"><ion-icon name=\"close-outline\"></ion-icon></ion-button></td>\n                          <td><ion-button (click)=\"PositionOkButtonClicked()\" color=\"gruen\" size=\"small\"><ion-icon name=\"checkmark-outline\"></ion-icon></ion-button></td>\n                      </table>\n                    </td>\n                  </tr>\n                </table>\n\n              </div>\n            </div>\n          </ng-container>\n\n        </div>\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"weiss\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'weiss' : 'grau'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n          <!--\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <ion-button size=\"small\" color=\"rot\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon name=\"close-outline\"></ion-icon>\n                </ion-button>\n              <td style=\"width: 100%\"></td>\n              <td>\n                <ion-button [disabled]=\"Valid === false\" size=\"small\" color=\"gruen\" (click)=\"OkButtonClicked()\">\n                  <ion-icon name=\"checkmark-outline\"></ion-icon>\n                </ion-button>\n              </td>\n            </tr>\n          </table>\n          -->\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 45230:
/*!*************************************************************************************************!*\
  !*** ./src/app/components-page/fi-standort-editor/fi-standort-editor.component.html?ngResource ***!
  \*************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Standorteditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"weiss\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <ion-grid *ngIf=\"DB.CurrentStandort && Pool.Mitarbeiterdaten !== null\">\n            <ion-row>\n              <ion-col>\n                <ion-text color=\"baeblau\"><b>Allgemein</b></ion-text>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <input-clone Titel=\"Standortname\" [(Value)]=\"DB.CurrentStandort.Standort\" [Required]=\"true\"  [MaxLength]=\"100\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n              <ion-col>\n                <input-clone Titel=\"Kürzel\" [(Value)]=\"DB.CurrentStandort.Kuerzel\" [Required]=\"true\" [MinLength]=\"3\" [MaxLength]=\"10\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <input-clone Titel=\"Straße\" [(Value)]=\"DB.CurrentStandort.Strasse\" [Required]=\"true\" [MaxLength]=\"100\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n              <ion-col></ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <input-clone Titel=\"PLZ\" [Required]=\"true\" [MinLength]=\"4\" [MaxLength]=\"5\" [(Value)]=\"DB.CurrentStandort.PLZ\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n              <ion-col>\n                <input-clone Titel=\"Ort\" [Required]=\"true\" [MaxLength]=\"100\" [(Value)]=\"DB.CurrentStandort.Ort\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col size=\"6\">\n                <button-value [Buttontext]=\"'Land'\" [Wert_A]=\"GetLand()\" (ButtonClicked)=\"LandClickedEvent.emit()\"></button-value>\n              </ion-col>\n              <ion-col size=\"6\" *ngIf=\"DB.CurrentStandort.Land === 'DE'\">\n                <button-value [Buttontext]=\"'Bundesland'\" [Wert_A]=\"GetBundesland()\" (ButtonClicked)=\"BundeslandClickedEvent.emit()\"></button-value>\n              </ion-col>\n            </ion-row>\n            <ion-row *ngIf=\"DB.CurrentStandort.Land === 'DE'\">\n              <ion-col size=\"6\">\n                <button-value [Buttontext]=\"'Konfession'\" [Wert_A]=\"GetKonfession()\" (ButtonClicked)=\"KonfessionClickedEvent.emit()\"></button-value>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <ion-text color=\"baeblau\"><b>Kontakt</b></ion-text>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <input-clone Titel=\"Telefon\" Inputtype=\"text\" [(Value)]=\"DB.CurrentStandort.Telefon\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n              <ion-col>\n                <input-clone Titel=\"Email\"  Inputtype=\"email\" [MaxLength]=\"255\" [Required]=\"true\" [(Value)]=\"DB.CurrentStandort.Email\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <ion-text color=\"baeblau\"><b>Urlaub + Homeoffice</b></ion-text>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <table  class=\"paddingtable\">\n                  <tr>\n                    <td>Berechtigte Mitarbeiter/innen die die Homeoffice- und Urlaubsanfragen für diesen Standort erhalten:</td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <table  class=\"paddingsmalltable\">\n                  <tr>\n                    <td><ion-icon name=\"sunny\" color=\"orange\" style=\"font-size: 20px\"></ion-icon></td><td style=\"font-size: 90%;font-weight: bold;\">Urlaubsfreigaben</td>\n                  </tr>\n                </table>\n              </ion-col>\n              <ion-col>\n                <table  class=\"paddingsmalltable\">\n                  <tr>\n                    <td><ion-icon name=\"home\" color=\"blau\" style=\"font-size: 20px\"></ion-icon></td><td style=\"font-size: 90%;font-weight: bold;\">Homeofficefreigaben</td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <table  class=\"paddingsmalltable\">\n                  <tr *ngFor=\"let Mitarbeiter of DBMitarbeiter.GetUrlausbsfreigeberliste(DB.CurrentStandort._id)\">\n                    <td>\n                      <checkbox-clon [Enabled]=\"Pool.Mitarbeiterdaten.Planeradministrator\"\n                                     [Value]=\"Mitarbeiter._id\"\n                                     [Checked]=\"UrlaubsfreigabeChecked(Mitarbeiter._id)\"\n                                     (CheckChanged)=\"UrlaubsfreigabeCheckChanged($event, Mitarbeiter._id)\">\n                      </checkbox-clon>\n                    </td>\n                    <td style=\"font-size: 100%; color: #444444;\">{{Mitarbeiter.Vorname}} {{Mitarbeiter.Name}}</td>\n                  </tr>\n                </table>\n              </ion-col>\n              <ion-col>\n                <table  class=\"paddingsmalltable\">\n                  <tr *ngFor=\"let Mitarbeiter of DBMitarbeiter.GetHomeofficefreigeberliste(DB.CurrentStandort._id)\">\n                    <td>\n                      <checkbox-clon [Enabled]=\"Pool.Mitarbeiterdaten.Planeradministrator\"\n                                     [Value]=\"Mitarbeiter._id\"\n                                     [Checked]=\"HomeofficefreigabeChecked(Mitarbeiter._id)\"\n                                     (CheckChanged)=\"HomeofficefreigabeCheckChanged($event, Mitarbeiter._id)\">\n                      </checkbox-clon>\n                    </td>\n                    <td style=\"font-size: 100%; color: #444444;\">{{Mitarbeiter.Vorname}} {{Mitarbeiter.Name}}</td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n            <ion-row *ngIf=\"DB.CurrentStandort._id !== null\">\n              <ion-col>\n                <table>\n                  <tr>\n                    <td><checkbox-clon [Checked]=\"CanDelete\" (CheckChanged)=\"CanDeleteCheckedChanged($event)\"></checkbox-clon></td>\n                    <td style=\"width: 6px\"></td>\n                    <td>\n                      <ion-button size=\"small\" color=\"rot\" [disabled]=\"!CanDelete\" (click)=\"DeleteButtonClicked()\">\n                        <ion-icon name=\"trash-outline\" style=\"font-size: 20px\"></ion-icon>\n                        <ion-text>Eintrag löschen</ion-text>\n                      </ion-button>\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n\n  </ion-grid>\n\n        </div>\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"weiss\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <!--\n              <td *ngIf=\"DB.CurrentStandort._id !== null\">\n                <table width=\"180px\">\n                  <tr>\n                    <td>\n                      <checkbox-clon (CheckChanged)=\"CanDeleteCheckedChanged($event)\" [Checked]=\"CanDelete\"></checkbox-clon>\n                    </td>\n                    <td style=\"font-size: 90%; color: white;\">löschen aktivieren</td>\n                    <td>\n                      <div class=\"rootbuttonclass\" (click)=\"DeleteButtonClicked()\">\n                        <ion-icon style=\"font-size: 28px\" [color]=\"CanDelete === true ? 'rot' : 'burnicklbraun'\" name=\"trash\"></ion-icon>\n                      </div>\n                    </td>\n                  </tr>\n                </table>\n              </td>\n              -->\n\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'weiss' : 'grau'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 98436:
/*!**************************************************************************************************!*\
  !*** ./src/app/components/abstand-element-fixed/abstand-element-fixed.component.html?ngResource ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div style=\"height: 400px; width: 100%\"></div>\n";

/***/ }),

/***/ 87104:
/*!********************************************************************************!*\
  !*** ./src/app/components/alphabet-relative/alphabet-relative.html?ngResource ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div [ngStyle]=\"Style\" class=\"alphabetclass\">\n\n\n  <div *ngFor=\"let Buchstabe of Filterliste; let i = index\" class=\"alphabetitem\"\n        (click)=\"AlphabetClickedHandler(Buchstabe)\">\n       <ion-badge style=\"background: none; border: 2px solid\" [style.color]=\"Buchstabe === Auswahl ? this.Basics.Farben.BAEBlau : this.Basics.Farben.BAEBlau\"\n                  [style.border-color]=\"Buchstabe === Auswahl ? this.Basics.Farben.BAEBlau : this.Basics.Farben.BAEHellgrau\">\n          {{Buchstabe}}\n       </ion-badge>\n  </div>\n\n</div>\n\n<!--\nBuchstabe === Auswahl ? this.Basics.Farben.Burnicklgruen : 'none'\"\n                  -->\n";

/***/ }),

/***/ 27272:
/*!**************************************************************!*\
  !*** ./src/app/components/alphabet/alphabet.html?ngResource ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div class=\"alphabetclass\" [ngStyle]=\"Style\">\n\n  <div *ngFor=\"let Buchstabe of Filterliste; let i = index\" class=\"alphabetitem\"\n        (click)=\"AlphabetClickedHandler(Buchstabe)\">\n       <ion-badge style=\"background: none; border: 2px solid\" [style.color]=\"Buchstabe === Auswahl ? '#2190df' : '#2190df'\"\n                  [style.border-color]=\"Buchstabe === Auswahl ? '#2190df' : this.Basics.Farben.BAEHellgrau\">\n          {{Buchstabe}}\n       </ion-badge>\n  </div>\n\n</div>\n\n<!--\nBuchstabe === Auswahl ? this.Basics.Farben.Burnicklgruen : 'none'\"\n                  -->\n";

/***/ }),

/***/ 10824:
/*!**************************************************************************!*\
  !*** ./src/app/components/auswahl-dialog/auswahl-dialog.html?ngResource ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none;  width: 100%; height: 100%\">\n  <div class=\"keeperdivclass\"\n       [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Auswahldialog) === true ? 'rgba(0, 0, 0, 0.5)' : 'none'\"\n       (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.bottom.px]=\"PositionY\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"weiss\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"innerkeeperclass\">\n          <ion-radio-group [value]=\"Auswahlindex\" (ionChange)=\"IndexChangedHandler($event)\">\n            <table class=\"paddingtable\">\n              <tr>\n                <td colspan=\"3\" style=\"height: 6px\"></td>\n              </tr>\n              <tr *ngFor=\"let Eintrag of Auswahlliste; let i = index\">\n                <td>\n                  <ion-radio [value]=\"Eintrag.Index\" mode=\"md\"></ion-radio>\n                </td>\n                <td style=\"font-weight: bold\" [innerHTML]=\"Eintrag.FirstColumn   | safe : 'html'\"></td>\n                <td                           [innerHTML]=\"Eintrag.SecoundColumn | safe : 'html'\"></td>\n              </tr>\n              <tr>\n                <td colspan=\"3\" style=\"height: 6px\"></td>\n              </tr>\n            </table>\n          </ion-radio-group>\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 32px\" color=\"weiss\" name=\"close-outline\"></ion-icon>\n                </div>\n\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"weiss\" name=\"save-outline\"></ion-icon>\n                </div>\n\n              </td>\n            </tr>\n          </table>\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 63104:
/*!********************************************************************************!*\
  !*** ./src/app/components/button-value-date/button-value-date.html?ngResource ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div class=\"buttonclass\" tappable  [id]=\"ElementID\"  [style.background]=\"Enabled ? Buttoncolor : Basics.Farben.ButtongrauDisabled\">\n\n  <div style=\"height: 100%; width: 60%;\">\n    <div class=\"buttontextclass\">\n      <table class=\"paddingtable\" cellspacing=\"0\" cellpadding=\"0\">\n        <tr>\n          <td height=\"100%\" valign=\"middle\">\n            <ion-text color=\"weiss\">{{Buttontext}}</ion-text>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n  <div class=\"outerinfokeeperclass\">\n    <div [style.width.px]=\"ValueBreite\" class=\"infokeeperclass\" [style.background]=\"InnerBackgroundcolor\">\n\n      <table>\n        <tr>\n          <td style=\"color: white\">{{Datum !== null ? Datum.format('DD.MM.YYYY') : '------'}}</td>\n          <ng-container *ngIf=\"ShowKW\">\n            <td style=\"width: 16px; text-align: center; font-size: 26px\">&bull;</td>\n            <td>KW{{Datum.isoWeek()}}</td>\n          </ng-container>\n        </tr>\n      </table>\n\n    </div>\n  </div>\n</div>\n<!--\n<ion-button *ngIf=\"ToolboxDesign === false\" [id]=\"ElementID\" [size]=\"Buttonsize\" [color]=\"Enabled ? Basics.Ionicfarben.Blau : Basics.Ionicfarben.GRAU\">{{Buttontext}}</ion-button>\n-->\n<ion-modal [trigger]=\"Enabled === true ? ElementID : null\">\n  <ng-template>\n    <ion-content force-overscroll=\"false\">\n\n      <!--\n      monthNames=\"Januar, Februar, März, April, Mai, Juni, Juli, August, September, Oktober, November, Dezember\"\n      monthShortNames=\"Jan., Feb., Mrz., Apr., Mai, Jun., Jul., Aug., Sep., Okt., Nov., Dez.\" first-day-of-week=\"1\"\n      [value]=\"Datum.format('YYYY-MM-DD')\" (ionChange)=\"DateChangedHandler($event)\"\n      -->\n        <ion-datetime #DatePicker style=\"background: #307ac1; color: white;\"\n\n                      locale=\"de-DE\"\n                      showDefaultButtons=\"true\"\n                      doneText=\"Fertig\"\n                      cancelText=\"Abbrechen\"\n                      [min]=\"Minimumstring\"\n                      [max]=\"Maximumstring\"\n                      presentation=\"date\" [value]=\"Datum.format('YYYY-MM-DD')\" color=\"burnicklgruen\" (ionChange)=\"DateChangedHandler($event)\">\n        </ion-datetime>\n    </ion-content>\n  </ng-template>\n</ion-modal>\n\n";

/***/ }),

/***/ 79008:
/*!**********************************************************************!*\
  !*** ./src/app/components/button-value/button-value.html?ngResource ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div class=\"buttonclass\" tappable (click)=\"ButtonClickedHandler()\" [style.background]=\"Enabled ? Buttoncolor : Basics.Farben.ButtongrauDisabled\">\n    <div style=\"height: 100%;\" [style.width.%]=\"Linkebreite\">\n        <div class=\"buttontextclass\">\n            <table class=\"paddingtable\" cellspacing=\"0\" cellpadding=\"0\">\n                <tr>\n                    <td height=\"100%\" valign=\"middle\">\n                        <ion-text color=\"weiss\">{{Buttontext}}</ion-text>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div class=\"outerinfokeeperclass\" [style.width.%]=\"Rechtebreite\">\n        <div class=\"infokeeperclass\" [style.background]=\"Buttonvaluecolor\">\n            <table *ngIf=\"Wert_B === ''\" cellpadding=\"0\" cellspacing=\"0\">\n                <tr>\n                    <td [innerHTML]=\"Wert_A_String\" align=\"center\"></td>\n                </tr>\n            </table>\n            <table  *ngIf=\"Wert_B !== ''\" width=\"100%\">\n                <tr>\n                    <td align=\"center\" [innerHTML]=\"Wert_A_String\"></td>\n                </tr>\n                <tr>\n                    <td align=\"center\" class=\"ergotextclass\" [innerHTML]=\"Wert_B\"></td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n\n\n\n\n";

/***/ }),

/***/ 32062:
/*!**********************************************************************************!*\
  !*** ./src/app/components/checkbox-clon/checkbox-clon.component.html?ngResource ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div class=\"keeperdivclass\" [style.background]=\"Background\" (click)=\"DivClickedHnadler($event)\">\n  <img [hidden]=\"!Checked\" [src]=\"ImgSource\" style=\"width: 18px; height: 18px\">\n</div>\n";

/***/ }),

/***/ 45236:
/*!********************************************************************************************!*\
  !*** ./src/app/components/input-clone-keeper/input-clone-keeper.component.html?ngResource ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "Valid: {{Valid}}\n<ng-content>\n\n</ng-content>\n";

/***/ }),

/***/ 38620:
/*!******************************************************************************!*\
  !*** ./src/app/components/input-clone/input-clone.component.html?ngResource ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div class=\"framedivclass\"\n     [style.cursor]=\"Clickable === true ? 'pointer' : 'default'\"\n     [style.min-height.px]=\"MinHeight\"\n     [style.border]=\"Enabled === true ? Valid === true ? OkBorder : RequiredBorder : DisabledBorder\">\n  <table width=\"100%\">\n\n    <tr *ngIf=\"Titel !== null && Titel !== '' && Enabled === false\" [style.color]=\"Titelcolor\">\n      <td class=\"uppercellclass\">{{Titel}}</td>\n      <td style=\"text-align: right\" [hidden]=\"Clickable === false\"><ion-icon color=\"burnicklgruen\" name=\"list-outline\" style=\"font-size: 20px\"></ion-icon></td>\n      <td *ngIf=\"Einheit !== null\"></td>\n    </tr>\n\n    <tr *ngIf=\"Lines === 1\">\n      <td style=\"width: auto;\" class=\"lowercellclass\" colspan=\"2\">\n        <ion-input *ngIf=\"Enabled === true\" [style.font-size.px]=\"Textsize\" [inputmode]=\"Inputtype\" class=\"inputclass\"  [label]=\"Titel\" labelPlacement=\"stacked\"\n                   [debounce]=\"Debouncetime\"\n                    autocomplete=\"off\"\n                   [value]=\"Value\"\n                   [color]=\"Textcolor\"\n                   (ionInput)= \"TextChangedHandler($event)\"></ion-input>\n        <ion-label *ngIf=\"Enabled === false\">{{Value}}</ion-label>\n      </td>\n      <td *ngIf=\"Einheit !== null\" style=\"width: 20px; text-align: center;\">{{Einheit}}</td>\n    </tr>\n    <tr *ngIf=\"Lines !== 1\">\n      <td class=\"lowercellclass\" colspan=\"2\">\n        <ion-textarea  *ngIf=\"Enabled === true\" [label]=\"Titel\" labelPlacement=\"stacked\"  [debounce]=\"Debouncetime\" [value]=\"Value\" [rows]=\"Lines\" (ionChange)=\"TextChangedHandler($event)\"></ion-textarea>\n        <div *ngIf=\"Enabled === false\" [style.height.px]=\"Lines * 18\" [innerHTML]=\"Tools.FormatLinebreaks(Value)\"></div>\n      </td>\n      <td *ngIf=\"Einheit !== null\"></td>\n    </tr>\n  </table>\n</div>\n";

/***/ }),

/***/ 27888:
/*!********************************************************************!*\
  !*** ./src/app/components/page-footer/page-footer.html?ngResource ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div #PageFooterFrameDiv class=\"keeperclass\">\n    <ng-content></ng-content>\n</div>\n\n";

/***/ }),

/***/ 8728:
/*!**********************************************************************************!*\
  !*** ./src/app/components/page-header-center/page-header-center.html?ngResource ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div #PageHeaderDiv class=\"keeperdivclass\">\n  <ng-content></ng-content>\n</div>\n";

/***/ }),

/***/ 2828:
/*!****************************************************************************************!*\
  !*** ./src/app/components/page-header-menu/page-header-menu.component.html?ngResource ***!
  \****************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<ng-container *ngIf=\"AuthService.ActiveUser !== null\">\n  <table style=\"width: 100%\">\n\n    <!-- Erste Mnüzeile -->\n    <tr>\n      <td style=\"width: auto\">\n\n        <!-- Erste Menuezeile --->\n\n        <table>\n          <tr>\n            <td style=\"width: 10px\"></td>\n            <ng-container *ngIf=\"Pool.Mitarbeiterdaten !== null && Pool.Mitarbeiterdaten.Planeradministrator\">\n              <td>\n                <div class=\"menubuttonclass\"\n                     (mouseenter)=\"HomeMouseOver = true\"\n                     (mouseleave)=\"HomeMouseOver = false\"\n                     (click)=\"MainMenueButtonClicked(Menuservice.MainMenuebereiche.Home)\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td>\n                        <ion-icon style=\"font-size: 16px\" name=\"home-outline\"\n                                  [color]=\"HomeMouseOver ? Basics.Ionicfarben.Schwarz : Basics.Ionicfarben.Weiss\">\n                        </ion-icon>\n                      </td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n\n              <td align=\"center\" class=\"trennertdclass\">\n                <div [class]=\"Menuservice.MainMenuebereich === Menuservice.MainMenuebereiche.Projekte ? 'trennerbigdivclass' : 'trennerdivclass'\"></div>\n              </td>\n\n            </ng-container>\n\n            <td *ngIf=\"Menuservice.MainMenuebereich === Menuservice.MainMenuebereiche.Urlaubsplanung\">\n\n              <table>\n                <tr>\n\n                  <td>\n                    <div class=\"menubuttonclass\" [style.cursor]=\"LogoutMouseOver ? 'pointer': 'default'\"\n                         (mouseenter)=\"LogoutMouseOver = true\"\n                         (mouseleave)=\"LogoutMouseOver = false\"\n                         (click)=\"LogoutButtonClicked()\">\n                      <table class=\"paddingsmalltable\">\n                        <tr>\n                          <td>\n                            <ion-icon style=\"font-size: 18px\" name=\"log-out-outline\"\n                                      [color]=\"LogoutMouseOver ? Basics.Ionicfarben.Schwarz : Basics.Ionicfarben.Weiss\">\n                            </ion-icon>\n                          </td>\n                          <td [style.color]=\"LogoutMouseOver ? '#000000' : 'white'\">Abmelden</td>\n                        </tr>\n                      </table>\n                    </div>\n                  </td>\n                  <td style=\"width: 10px\"></td>\n                  <td align=\"center\" class=\"trennertdclass\"><div class=\"trennerdivclass\"></div></td>\n                  <td>\n                    <div class=\"menubuttonclass\" [style.cursor]=\"JahrMouseOver ? 'pointer': 'default'\"\n                         (mouseenter)=\"JahrMouseOver = true\"\n                         (mouseleave)=\"JahrMouseOver = false\"\n                         (click)=\"JahrButtonClicked.emit()\">\n                      <table class=\"paddingsmalltable\">\n                        <tr>\n                          <td>\n                            <ion-icon style=\"font-size: 18px\" name=\"sunny-outline\"\n                                      [color]=\"JahrMouseOver ? Basics.Ionicfarben.Schwarz : Basics.Ionicfarben.Weiss\">\n                            </ion-icon>\n                          </td>\n                          <td [style.color]=\"JahrMouseOver ? '#000000' : 'white'\">Jahr {{DBUrlaub.CurrentJahr}}</td>\n                        </tr>\n                      </table>\n                    </div>\n                  </td>\n                  <td style=\"width: 10px\"></td>\n                  <td align=\"center\" class=\"trennertdclass\"><div class=\"trennerdivclass\"></div></td>\n                  <td>\n                    <div  class=\"menubuttonclass\" (click)=\"UrlaubMenueButtonClicked(Menuservice.UrlaubMenuebereiche.Planung)\">\n                      <table class=\"paddingsmalltable\">\n                        <tr>\n                          <td><ion-icon style=\"font-size: 16px\" name=\"create-outline\" [color]=\"GetUrlaubMenueIconcolor(Menuservice.UrlaubMenuebereiche.Planung)\"></ion-icon></td>\n                          <td style=\"white-space: nowrap;\" [style.color]=\"GetUrlaubMenueFontcolor(Menuservice.UrlaubMenuebereiche.Planung)\">Planung</td>\n                        </tr>\n                      </table>\n                    </div>\n                  </td>\n                  <td style=\"width: 20px\"></td>\n                  <td>\n                    <div class=\"menubuttonclass\" (click)=\"UrlaubMenueButtonClicked(Menuservice.UrlaubMenuebereiche.Uebersicht)\">\n                      <table class=\"paddingsmalltable\">\n                        <tr>\n                          <td><ion-icon style=\"font-size: 16px\" name=\"calendar-outline\" [color]=\"GetUrlaubMenueIconcolor(Menuservice.UrlaubMenuebereiche.Uebersicht)\"></ion-icon></td>\n                          <td [style.color]=\"GetUrlaubMenueFontcolor(Menuservice.UrlaubMenuebereiche.Uebersicht)\">Übersicht</td>\n                        </tr>\n                      </table>\n                    </div>\n                  </td>\n                  <ng-container *ngIf=\"Pool.Mitarbeiterdaten.Urlaubsfreigaben === true || Pool.Mitarbeiterdaten.Homeofficefreigaben === true || Pool.Mitarbeiterdaten.Planeradministrator\">\n                    <td style=\"width: 20px\"></td>\n                    <td>\n                      <div class=\"menubuttonclass\" (click)=\"UrlaubMenueButtonClicked(Menuservice.UrlaubMenuebereiche.Gesamtplanung)\">\n                        <table class=\"paddingsmalltable\">\n                          <tr>\n                            <td><ion-icon style=\"font-size: 16px\" name=\"apps-outline\" [color]=\"GetUrlaubMenueIconcolor(Menuservice.UrlaubMenuebereiche.Gesamtplanung)\"></ion-icon></td>\n                            <td [style.color]=\"GetUrlaubMenueFontcolor(Menuservice.UrlaubMenuebereiche.Gesamtplanung)\">Gesamtplanung</td>\n                          </tr>\n                        </table>\n                      </div>\n                    </td>\n                  </ng-container>\n\n                  <td style=\"width: 20px\"></td>\n                  <td>\n                    <div class=\"menubuttonclass\" (click)=\"UrlaubMenueButtonClicked(Menuservice.UrlaubMenuebereiche.Freigaben)\">\n                      <table class=\"paddingsmalltable\">\n                        <tr>\n                          <td><ion-icon style=\"font-size: 16px\" name=\"thumbs-up-outline\" [color]=\"GetUrlaubMenueIconcolor(Menuservice.UrlaubMenuebereiche.Freigaben)\"></ion-icon></td>\n                          <td [style.color]=\"GetUrlaubMenueFontcolor(Menuservice.UrlaubMenuebereiche.Freigaben)\">Anfragen</td>\n                          <td *ngIf=\"DBUrlaub.Urlaubsanfragenanzahl > 0 || DBUrlaub.Homeofficeanfragenanzahl > 0\">\n                            <ion-badge color=\"rot\">{{(DBUrlaub.Urlaubsanfragenanzahl + DBUrlaub.Homeofficeanfragenanzahl).toString()}}</ion-badge>\n                          </td>\n                        </tr>\n                      </table>\n                    </div>\n                  </td>\n\n                  <td style=\"width: 20px\"></td>\n                  <td>\n                    <div class=\"menubuttonclass\" (click)=\"UrlaubMenueButtonClicked(Menuservice.UrlaubMenuebereiche.Einstellungen)\">\n                      <table class=\"paddingsmalltable\">\n                        <tr>\n                          <td><ion-icon style=\"font-size: 16px\" name=\"settings-outline\" [color]=\"GetUrlaubMenueIconcolor(Menuservice.UrlaubMenuebereiche.Einstellungen)\"></ion-icon></td>\n                          <td [style.color]=\"GetUrlaubMenueFontcolor(Menuservice.UrlaubMenuebereiche.Einstellungen)\">Einstellungen</td>\n                        </tr>\n                      </table>\n                    </div>\n                  </td>\n                  <td *ngIf=\"DBUrlaub.CorrectSetup === false\"><img src=\"assets/svgs/alert.svg\" style=\"width: 24px\"></td>\n                  <td style=\"width: 60px;\"></td>\n                  <td *ngIf=\"Pool.Mitarbeiterdaten !== null && Pool.Mitarbeiterdaten.Planeradministrator === true\" style=\"font-size: 90%; color: white;\">\n                    <table>\n                      <tr>\n                        <td>\n                          <ion-button size=\"small\" color=\"grau\" (click)=\"UrlaubMitarbeiterClicked.emit()\">{{DBUrlaub.CurrentMitarbeiter !== null ? DBUrlaub.CurrentMitarbeiter.Vorname + ' ' + DBUrlaub.CurrentMitarbeiter.Name : 'unbekannt'}}</ion-button>\n                        </td>\n                        <td *ngIf=\"this.DBUrlaub.CurrentMitarbeiter !== null && this.DBUrlaub.CurrentMitarbeiter._id !== Pool.Mitarbeiterdaten._id\">\n                            <ion-button size=\"small\" color=\"grau\" slot=\"icon-only\" (click)=\"UrlaubMitarbeiterMeClicked.emit()\">\n                              <ion-icon name=\"person-circle-outline\"></ion-icon>\n                            </ion-button>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                  <td style=\"width: 120px;\"></td>\n                </tr>\n              </table>\n            </td>\n            <td *ngIf=\"Menuservice.MainMenuebereich === Menuservice.MainMenuebereiche.Email\">\n\n              <div class=\"menubuttonclass\" [style.cursor]=\"BackMouseOver ? 'pointer': 'default'\"\n                   (mouseenter)=\"BackMouseOver = true\"\n                   (mouseleave)=\"BackMouseOver = false\"\n                   (click)=\"BackButtonClicked()\">\n                <table class=\"paddingsmalltable\">\n                  <tr>\n                    <td>\n                      <ion-icon style=\"font-size: 16px\" name=\"arrow-back-circle-outline\"\n                                [color]=\"BackMouseOver ? Basics.Ionicfarben.BAEBlau : Basics.Ionicfarben.Weiss\">\n                      </ion-icon>\n                    </td>\n                    <td [style.color]=\"BackMouseOver ? '#000000' : 'white'\">Zurück</td>\n                  </tr>\n                </table>\n              </div>\n\n            </td>\n\n\n            <ng-container *ngIf=\"ShowSuchleiste\">\n              <td style=\"width: 20px\"></td>\n              <td>\n                <ion-searchbar  #Suchleiste placeholder=\"Suche\"></ion-searchbar>\n              </td>\n            </ng-container>\n            <ng-container *ngIf=\"ShowSandortfilter\">\n              <td style=\"width: 20px\"></td>\n              <td>\n                <div class=\"menufilterbuttonclass\" (click)=\"StandortButtonClicked()\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon style=\"font-size: 16px\" name=\"funnel-outline\" color=\"weiss\"></ion-icon></td>\n                      <td style=\"color: white;\">{{DBStandort.GetStandortfiller()}}</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n\n            </ng-container>\n          </tr>\n        </table>\n\n\n      </td>\n      <td style=\"width: 50px;\">\n\n        <ng-container *ngIf=\"AuthService.ShowLogin === false\">\n          <table *ngIf=\"GraphService.UserimageSRC !== null\">\n            <tr>\n              <td>\n                <img class=\"userimagesmall\" [src]=\"GraphService.UserimageSRC\">\n              </td>\n              <td style=\"width: 10px\"></td>\n            </tr>\n          </table>\n          <div *ngIf=\"GraphService.UserimageSRC === null\" class=\"userkuerzelsmall\">\n            {{Pool.Mitarbeiterdaten !== null ? Pool.Mitarbeiterdaten.Kuerzel : '---'}}\n          </div>\n        </ng-container>\n\n      </td>\n    </tr>\n\n    <ng-container *ngIf=\"Menuservice.MainMenuebereich     === Menuservice.MainMenuebereiche.Projekte &&\n                         Menuservice.ProjekteMenuebereich === Menuservice.ProjekteMenuebereiche.Aufgabenliste &&\n                         Menuservice.Aufgabenlisteansicht === Menuservice.Aufgabenlisteansichten.Meine_Woche\">\n\n      <tr>\n        <td colspan=\"2\" style=\"padding-left: 8px; padding-right: 8px\">\n          <div style=\"width: 100%; height: 1px; background: white\"></div>\n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\">\n          <table>\n            <tr>\n              <td [style.width.px]=\"Tagbreite\">\n                <div class=\"wocheheaderdivclass\" [style.height.px]=\"Wochentaghoehe\">Montag {{Timelineindex}} {{GetDatumtext('Montag')}} {{DBMitarbeiter.GetMeinewocheStunden('Montag')}}</div>\n              </td>\n              <td *ngIf=\"Timelineindex === 0\" [style.width.px]=\"Timelinebreite\" style=\"background:  #354547;\"></td>\n              <td style=\"width: 1px; background: white\"></td>\n              <td [style.width.px]=\"Tagbreite\">\n                <div class=\"wocheheaderdivclass\" [style.height.px]=\"Wochentaghoehe\">Dienstag {{GetDatumtext('Dienstag')}} {{DBMitarbeiter.GetMeinewocheStunden('Dienstag')}}</div>\n              </td>\n              <td *ngIf=\"Timelineindex === 1\" [style.width.px]=\"Timelinebreite\" style=\"background:  #354547;\"></td>\n              <td style=\"width: 1px; background: white\"></td>\n              <td [style.width.px]=\"Tagbreite\">\n                <div class=\"wocheheaderdivclass\" [style.height.px]=\"Wochentaghoehe\">Mittwoch {{GetDatumtext('Mittwoch')}} {{DBMitarbeiter.GetMeinewocheStunden('Mittwoch')}}</div>\n              </td>\n              <td *ngIf=\"Timelineindex === 2\" [style.width.px]=\"Timelinebreite\" style=\"background:  #354547;\"></td>\n              <td style=\"width: 1px; background: white\"></td>\n              <td [style.width.px]=\"Tagbreite\">\n                <div class=\"wocheheaderdivclass\" [style.height.px]=\"Wochentaghoehe\">Donnerstag {{GetDatumtext('Donnerstag')}} {{DBMitarbeiter.GetMeinewocheStunden('Donnerstag')}}</div>\n              </td>\n              <td *ngIf=\"Timelineindex === 3\" [style.width.px]=\"Timelinebreite\" style=\"background:  #354547;\"></td>\n              <td style=\"width: 1px; background: white\"></td>\n              <td [style.width.px]=\"Tagbreite\">\n                <div class=\"wocheheaderdivclass\" [style.height.px]=\"Wochentaghoehe\">Freitag {{GetDatumtext('Freitag')}} {{DBMitarbeiter.GetMeinewocheStunden('Freitag')}}</div>\n              </td>\n            </tr>\n          </table>\n        </td>\n      </tr>\n\n\n    </ng-container>\n\n\n\n  </table>\n\n</ng-container>\n\n\n\n\n\n\n\n\n\n";

/***/ }),

/***/ 8756:
/*!********************************************************************!*\
  !*** ./src/app/components/page-header/page-header.html?ngResource ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div #PageHeaderDiv class=\"keeperdivclass\">\n  <ng-content></ng-content>\n  <div *ngIf=\"Pool.ShowProgress\" class=\"loadingdivclass\">\n\n    <table width=\"100%\">\n      <tr>\n        <td>\n          <div class=\"headerdivclass\">\n            {{ProgressMessage}}\n          </div>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <div class=\"contentdivclass\">\n\n            <table class=\"paddingtable\" width=\"100%\">\n              <tr>\n                <td style=\"text-align: center; color: black\">\n                  {{Pool.ProgressMessage}}\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <ion-progress-bar [value]=\"Pool.CurrentProgressValue / Pool.MaxProgressValue\"></ion-progress-bar>\n                </td>\n              </tr>\n            </table>\n\n          </div>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <div style=\"background: #354547; width: 100%; height: 20px\">\n\n          </div>\n        </td>\n      </tr>\n    </table>\n\n\n  </div>\n</div>\n";

/***/ }),

/***/ 1724:
/*!******************************************************************************************!*\
  !*** ./src/app/components/page-modal-keeper/page-modal-keeper.component.html?ngResource ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div  class=\"keeperdivclass\" (click)=\"ContentClicked($event)\">\n  <div class=\"contentdivclass\"\n       [style.width.px]=\"Dialogbreite\"\n       [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n    <ion-header>\n      <page-header>\n        <table class=\"paddingsmalltable\">\n          <tr>\n            <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n            <td [style.color]=\"'white'\">{{Titel}}</td>\n          </tr>\n        </table>\n\n        <ng-container *ngIf=\"ShowSandortfilter\">\n          <td style=\"width: 20px\"></td>\n          <td>\n            <div class=\"menufilterbuttonclass\" (click)=\"StandortfilterButtonClicked()\">\n              <table class=\"paddingsmalltable\">\n                <tr>\n                  <td><ion-icon name=\"funnel-outline\"></ion-icon></td>\n                  <td [innerHTML]=\"DBStandort.GetStandortfiller()\"></td>\n                </tr>\n              </table>\n            </div>\n          </td>\n\n        </ng-container>\n      </page-header>\n    </ion-header>\n\n    <ion-content>\n        <ng-content>\n\n        </ng-content>\n    </ion-content>\n\n    <ion-footer>\n      <page-header>\n        <table class=\"paddingsmalltable\" width=\"100%\">\n          <tr>\n            <td>\n              <ion-button size=\"small\" color=\"rot\" (click)=\"CancelButtonClicked()\">\n                <ion-icon name=\"close-outline\"></ion-icon>\n              </ion-button>\n            <td style=\"width: 100%\"></td>\n            <td>\n              <ion-button [disabled]=\"OkButtonEneabled === false\" size=\"small\" color=\"gruen\" (click)=\"OkButtonClicked()\">\n                <ion-icon name=\"checkmark-outline\"></ion-icon>\n              </ion-button>\n            </td>\n          </tr>\n        </table>\n      </page-header>\n    </ion-footer>\n\n  </div>\n</div>\n\n\n\n\n";

/***/ }),

/***/ 55260:
/*!**********************************************************************************************!*\
  !*** ./src/app/components/pj-urlaubsplanung-kalender/urlausplanung-kalender.html?ngResource ***!
  \**********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n  <div *ngIf=\"Pool.Mitarbeitersettings !== null\" class=\"frameclass\">\n\n\n    <table class=\"paddingsmalltable\" width=\"100%\">\n      <tr>\n        <td colspan=\"8\" style=\"font-size: 120%; font-weight: bold; color: black; text-align: center;\">\n          {{GetMonatname()}}\n        </td>\n      </tr>\n      <tr>\n        <td style=\"width: 12%\"><div class=\"tagrahmenclass\"><div class=\"taginfodivclass\">KW</div></div></td>\n        <td style=\"width: 12%\"><div class=\"tagrahmenclass\"><div class=\"taginfodivclass\">Mo</div></div></td>\n        <td style=\"width: 12%\"><div class=\"tagrahmenclass\"><div class=\"taginfodivclass\">Di</div></div></td>\n        <td style=\"width: 12%\"><div class=\"tagrahmenclass\"><div class=\"taginfodivclass\">Mi</div></div></td>\n        <td style=\"width: 12%\"><div class=\"tagrahmenclass\"><div class=\"taginfodivclass\">Do</div></div></td>\n        <td style=\"width: 12%\"><div class=\"tagrahmenclass\"><div class=\"taginfodivclass\">Fr</div></div></td>\n        <td style=\"width: 12%\"><div class=\"tagrahmenclass\"><div class=\"taginfodivclass\">Sa</div></div></td>\n        <td style=\"width: 12%\"><div class=\"tagrahmenclass\"><div class=\"taginfodivclass\">So</div></div></td>\n      </tr>\n      <tr *ngFor=\"let Tageliste of Kalendertageliste; let Wocheindex = index\">\n        <td valign=\"top\">\n          <div class=\"tagrahmenclass\">\n            <div class=\"kwinfodivclass\">{{Tageliste[Wocheindex].Kalenderwoche}}</div>\n            <div *ngIf=\"DB.ShowFerientage_DE\" class=\"taginfospacedivclass\"></div>\n            <div *ngIf=\"DB.ShowFerientage_BG\" class=\"taginfospacedivclass\"></div>\n            <div *ngIf=\"DB.ShowFeiertage_DE\"  class=\"taginfospacedivclass\"></div>\n            <div *ngIf=\"DB.ShowFeiertage_BG\"  class=\"taginfospacedivclass\"></div>\n\n            <ng-container *ngFor=\"let item of [].constructor(GetMaxExternUrlaubseintraege(Tageliste[Wocheindex].Kalenderwoche)); let i = index\">\n              <div class=\"taginfospacedivclass\"></div>\n            </ng-container>\n\n          </div>\n        </td>\n        <td *ngFor=\"let Tag of Tageliste; let Tagindex = index\" [style.color]=\"Tag.Hauptmonat === true ? 'black' : 'darkgray'\" align=\"center\" valign=\"top\">\n          <ng-container *ngIf=\"Tagindex >= 5\">\n            <div class=\"tagrahmenclass\">\n              <div class=\"wochenendedivclass\">{{Tag.Tagnummer}}</div>\n              <div  *ngIf=\"DB.ShowFerientage_DE\" class=\"wochenendespacedivclass\"></div>\n              <div  *ngIf=\"DB.ShowFerientage_BG\" class=\"wochenendespacedivclass\"></div>\n              <div  *ngIf=\"DB.ShowFeiertage_DE\"  class=\"wochenendespacedivclass\"></div>\n              <div  *ngIf=\"DB.ShowFeiertage_BG\"  class=\"wochenendespacedivclass\"></div>\n\n              <ng-container *ngFor=\"let item of [].constructor(GetMaxExternUrlaubseintraege(Tageliste[Wocheindex].Kalenderwoche)); let i = index\">\n                <div class=\"wochenendespacedivclass\"></div>\n              </ng-container>\n\n            </div>\n          </ng-container>\n          <ng-container *ngIf=\"Tagindex < 5\">\n            <ng-container *ngIf=\"Tag.Hauptmonat === true && Pool.Mitarbeitersettings !== null\">\n              <div\n                (click)=\"TagClicked($event, Tag, Wocheindex, Tagindex)\" class=\"tagrahmenclass\">\n                <div class=\"tagdivclass\"\n                     [style.background]=\"GetTagBackground(Tag)\"\n                     [style.color]=\"Pool.Mitarbeitersettings.UrlaubShowMeinenUrlaub ? Tag.Color : 'black' || Pool.Mitarbeitersettings.ShowHomeoffice ? Tag.Color : 'black'\">\n                  <table>\n                    <tr>\n                      <td style=\"text-align: center\">{{Tag.Tagnummer}}</td>\n                    </tr>\n                    <tr *ngIf=\"Tag.IsHalberUrlaubstag\">\n                      <td style=\"text-align: center\">H</td>\n                    </tr>\n                    <tr *ngIf=\"Tag.IsHomeoffice && Pool.Mitarbeitersettings.ShowHomeoffice\">\n                      <td style=\"text-align: center\">HO</td>\n                    </tr>\n                  </table>\n                </div>\n\n                <div *ngIf=\"DB.ShowFerientage_DE\"\n                     (mouseenter)=\"FerientagMouseOverEvent(Tag, 'DE')\"\n                     (mouseleave)=\"FerientagCrossedEvent.emit({Name: '', Laendercode: ''})\"\n                     class=\"feriendivclass\" [style.background]=\"Tag.IsFerientag_DE ? DB.Ferienfarbe_DE : Tag.Background\">\n                  <ion-icon *ngIf=\"Tag.IsFerientag_DE\" name=\"school-outline\" color=\"weiss\" style=\"font-size: 18px\"></ion-icon>\n                </div>\n                <div *ngIf=\"DB.ShowFerientage_BG\"\n                     (mouseenter)=\"FerientagMouseOverEvent(Tag, 'BG')\"\n                     (mouseleave)=\"FerientagCrossedEvent.emit({Name: '', Laendercode: ''})\"\n                     class=\"feriendivclass\" [style.background]=\"Tag.IsFerientag_BG ? DB.Ferienfarbe_BG : Tag.Background\">\n                  <ion-icon *ngIf=\"Tag.IsFerientag_BG\" name=\"school-outline\" color=\"gelb\" style=\"font-size: 18px\"></ion-icon>\n                </div>\n                <div *ngIf=\"DB.ShowFeiertage_DE\"\n                     (mouseenter)=\"FeietragMouseOverEvent(Tag, 'DE')\"\n                     (mouseleave)=\"FeiertagCrossedEvent.emit({Name: '', Laendercode: ''})\"\n                     class=\"feiertagdivclass\" [style.background]=\"Tag.IsFeiertag_DE ? DB.Feiertagefarbe_DE : Tag.Background\">\n                  <ion-icon *ngIf=\"Tag.IsFeiertag_DE\" name=\"flag-outline\" color=\"weiss\" style=\"font-size: 18px\"></ion-icon>\n                </div>\n                <div *ngIf=\"DB.ShowFeiertage_BG\"\n                     (mouseenter)=\"FeietragMouseOverEvent(Tag, 'BG')\"\n                     (mouseleave)=\"FeiertagCrossedEvent.emit({Name: '', Laendercode: ''})\"\n                     class=\"feiertagdivclass\" [style.background]=\"Tag.IsFeiertag_BG ? DB.Feiertagefarbe_BG : Tag.Background\">\n                  <ion-icon *ngIf=\"Tag.IsFeiertag_BG\" name=\"flag-outline\" color=\"gelb\" style=\"font-size: 18px\"></ion-icon>\n                </div>\n\n                <ng-container *ngFor=\"let ExternKalender of KalendertageExternliste;\">\n\n                  <ng-container *ngIf=\"!lodash.isUndefined(ExternKalender[Wocheindex]) && !lodash.isUndefined(ExternKalender[Wocheindex][Tagindex])\">\n\n                    <div *ngIf=\"ExternKalender[Wocheindex][Tagindex].IsUrlaub\" class=\"tagexterndivclass\"\n                         [style.background]=\"ExternKalender[Wocheindex][Tagindex].Background\"\n                         (click)=\"ExternUrlaubstagClicked($event, ExternKalender[Wocheindex][Tagindex].MitarbeiterID)\">\n                      {{ExternKalender[Wocheindex][Tagindex].Kuerzel}}\n                    </div>\n\n                    <div *ngIf=\"ExternKalender[Wocheindex][Tagindex].IsHomeoffice && Pool.Mitarbeitersettings.ShowHomeoffice\" class=\"tagexterndivclass\"\n                         [style.background]=\"ExternKalender[Wocheindex][Tagindex].Background\">\n                      {{ExternKalender[Wocheindex][Tagindex].Kuerzel}} | HO\n                    </div>\n\n                  </ng-container>\n\n\n                </ng-container>\n\n              </div>\n            </ng-container>\n            <ng-container *ngIf=\"Tag.Hauptmonat === false\">\n              {{Tag.Tagnummer}}\n            </ng-container>\n          </ng-container>\n        </td>\n      </tr>\n    </table>\n  </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";

/***/ }),

/***/ 9540:
/*!**************************************************************************************!*\
  !*** ./src/app/pages/common-einstellungen/common-einstellungen.page.html?ngResource ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header class=\"ion-no-border\">\n  <page-header #PageHeader>\n    <page-header-menu></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content *ngIf=\"Pool.Appeinstellungen !== null\">\n\n  <table style=\"width: 100%\">\n    <tr>\n      <td style=\"width: 400px;\" valign=\"top\">\n\n        <table class=\"paddingtable\">\n          <tr>\n            <td colspan=\"2\">\n              <ion-text color=\"baeblau\"><b>Einstellungen Allgemein</b></ion-text>\n            </td>\n          </tr>\n          <tr>\n            <td style=\"width: auto;\" valign=\"top\">\n              <checkbox-clon [Checked]=\"Pool.Appeinstellungen.DebugNoExternalEmail\" (CheckChanged)=\"DebugNoExternalEmaillCheckedChanged($event)\"></checkbox-clon>\n            </td>\n            <td>nur Testemails senden / keine BAE Emailadressen verwenden</td>\n          </tr>\n          <tr>\n            <td style=\"width: auto;\" valign=\"top\">\n              <checkbox-clon [Checked]=\"Pool.Appeinstellungen.ShowHomeScreenInfos\" (CheckChanged)=\"ShowHomescreeninfosChanged($event)\"></checkbox-clon>\n            </td>\n            <td>Zeige Homescreen Infos</td>\n          </tr>\n        </table>\n        <br>\n        <table class=\"paddingtable\">\n          <tr>\n            <td colspan=\"2\">\n              <ion-text color=\"baeblau\"><b>Startseite bei Administratoren</b></ion-text>\n            </td>\n          </tr>\n          <ion-radio-group [value]=\"Pool.Appeinstellungen.AdminStartseite\" (ionChange)=\"StartseiteChangedHandler($event)\">\n            <tr>\n              <td><ion-radio [value]=\"Const.Pages.HomePage\"></ion-radio></td><td>Home</td>\n            </tr>\n            <tr>\n              <td><ion-radio [value]=\"Const.Pages.FiStandortelistePage\"></ion-radio></td><td>Standorte</td>\n            </tr>\n            <tr>\n              <td><ion-radio [value]=\"Const.Pages.FiMitarbeiterlistePage\"></ion-radio></td><td>Mitarbeiter</td>\n            </tr>\n            <tr>\n              <td><ion-radio [value]=\"Const.Pages.EinstellungenPage\"></ion-radio></td><td>Einstellungen</td>\n            </tr>\n            <tr>\n              <td><ion-radio [value]=\"Const.Pages.UrlaubPlanungPage\"></ion-radio></td><td>Urlaub Planung</td>\n            </tr>\n            <tr>\n              <td><ion-radio [value]=\"Const.Pages.UrlaubUebersichtPage\"></ion-radio></td><td>Urlaub Übersicht</td>\n            </tr>\n            <tr>\n              <td><ion-radio [value]=\"Const.Pages.UrlaubsgesamtuebersichtPage\"></ion-radio></td><td>Urlaub Gesamtübersicht</td>\n            </tr>\n            <tr>\n              <td><ion-radio [value]=\"Const.Pages.UrlaubFreigabenPage\"></ion-radio></td><td>Urlaub Freigaben</td>\n            </tr>\n            <tr>\n              <td><ion-radio [value]=\"Const.Pages.UrlaubEinstellungenPage\"></ion-radio></td><td>Urlaub Einstellungen</td>\n            </tr>\n          </ion-radio-group>\n        </table>\n        <br>\n        <table class=\"paddingtable\">\n          <tr>\n            <td colspan=\"2\">\n              <ion-text color=\"baeblau\"><b>Wartungsmodus</b></ion-text>\n            </td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Appeinstellungen.Wartungsmodus\" (CheckChanged)=\"WartungsmodusCheckChanged($event)\"></checkbox-clon></td><td>Watungsmodus für Standardnutzer aktivieren</td>\n          </tr>\n        </table>\n\n      </td>\n      <td style=\"width: auto\" valign=\"top\">\n\n        <table class=\"paddingsmalltable\">\n          <tr>\n            <td colspan=\"10\">\n              <ion-text color=\"baeblau\"><b>Urlaubsplanung</b></ion-text>\n            </td>\n          </tr>\n          <tr>\n            <td  colspan=\"10\" style=\"font-weight: bold\">Vertreteranfragen an:</td>\n          </tr>\n          <ng-container *ngIf=\"Vertreterliste.length === 0\">\n            <tr>\n              <td colspan=\"10\">keine</td>\n            </tr>\n          </ng-container>\n          <ng-container *ngIf=\"Vertreterliste.length !== 0\">\n            <tr *ngFor=\"let Vertreter of Vertreterliste; let i = index\">\n              <td  style=\"width: 160px;\">{{Vertreter.Vorname}} {{Vertreter.Name}}</td>\n              <td>{{Vertreter.Vertretungenanfragenanzahl}}</td>\n              <td><checkbox-clon [Index]=\"i\" [Checked]=\"Vertreter.Selected\" (CheckChanged)=\"VertreterCheckedChanged($event)\"></checkbox-clon></td>\n              <td><div class=\"sendmailcircle\" [style.background]=\"Vertreter.UrlaubanfrageReminderSended ? '#006400' : 'silver'\"></div></td>\n            </tr>\n          </ng-container>\n          <tr>\n            <td style=\"height: 30px;\" colspan=\"10\"></td>\n          </tr>\n          <tr>\n            <td colspan=\"10\" style=\"font-weight: bold\">Freigabeanfragen an:</td>\n          </tr>\n          <ng-container *ngIf=\"Freigeberliste.length === 0\">\n            <tr>\n              <td colspan=\"10\">keine</td>\n            </tr>\n          </ng-container>\n          <ng-container *ngIf=\"Freigeberliste.length !== 0\">\n            <tr *ngFor=\"let Freigeber of Freigeberliste; let i = index\">\n              <td style=\"width: 160px;\">{{Freigeber.Vorname}} {{Freigeber.Name}}</td>\n              <td>{{Freigeber.Freigabenanfragenanzahl}}</td>\n              <td><checkbox-clon [Index]=\"i\" [Checked]=\"Freigeber.Selected\" (CheckChanged)=\"FreigberCheckedChanged($event)\"></checkbox-clon></td>\n              <td><div class=\"sendmailcircle\" [style.background]=\"Freigeber.UrlaubanfrageReminderSended ? '#006400' : 'silver'\"></div></td>\n            </tr>\n          </ng-container>\n          <ng-container *ngIf=\"Vertreterliste.length > 0 || Freigeberliste.length > 0\">\n            <tr>\n              <td style=\"height: 30px;\" colspan=\"10\"></td>\n            </tr>\n            <tr>\n              <td>\n                <ion-button (click)=\"SendUrlaubReminderMail()\" size=\"small\" color=\"burnicklbraun\">Erinnerung versenden</ion-button>\n              </td>\n            </tr>\n          </ng-container>\n\n        </table>\n\n      </td>\n    </tr>\n  </table>\n\n\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n  </page-footer>\n</ion-footer>\n\n\n\n";

/***/ }),

/***/ 82748:
/*!********************************************************************!*\
  !*** ./src/app/pages/common-home/common-home.page.html?ngResource ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header class=\"ion-no-border\">\n  <page-header #PageHeader>\n\n    <ng-container *ngIf=\"AuthService.ShowLogin === false\">\n      <table style=\"width: 100%;\">\n        <tr>\n          <td style=\"width: 50%\">\n            <table>\n              <tr>\n                <td style=\"width: 10px\"></td>\n                <td>\n                  <div class=\"menubuttonclass\" [style.cursor]=\"LogoutMouseOver ? 'pointer': 'default'\"\n                       (mouseenter)=\"LogoutMouseOver = true\"\n                       (mouseleave)=\"LogoutMouseOver = false\"\n                       (click)=\"LogoutButtonClicked()\">\n                    <table class=\"paddingsmalltable\">\n                      <tr>\n                        <td>\n                          <ion-icon name=\"log-out-outline\"\n                                    [color]=\"LogoutMouseOver ? Basics.Ionicfarben.Schwarz : Basics.Ionicfarben.Weiss\">\n                          </ion-icon>\n                        </td>\n                        <td [style.color]=\"LogoutMouseOver ? '#000000' : 'white'\">Abmelden</td>\n                      </tr>\n                    </table>\n                  </div>\n                </td>\n                <td style=\"width: 10px\"></td>\n\n                <td>\n                  <div class=\"menubuttonclass\" [style.cursor]=\"EinstellungenMouseOver ? 'pointer': 'default'\"\n                       (mouseenter)=\"EinstellungenMouseOver = true\"\n                       (mouseleave)=\"EinstellungenMouseOver = false\"\n                       (click)=\"EinstellungenButtonClicked()\">\n                    <table class=\"paddingsmalltable\">\n                      <tr>\n                        <td>\n                          <ion-icon name=\"settings-outline\"\n                                    [color]=\"EinstellungenMouseOver ? Basics.Ionicfarben.Schwarz : Basics.Ionicfarben.Weiss\">\n                          </ion-icon>\n                        </td>\n                        <td [style.color]=\"EinstellungenMouseOver ? '#000000' : 'white'\">Einstellungen</td>\n                      </tr>\n                    </table>\n                  </div>\n                </td>\n\n            </tr>\n          </table>\n\n          </td>\n          <td align=\"right\" valign=\"middle\" style=\"width: 50%\">\n            <ng-container *ngIf=\"AuthService.ShowLogin === false\">\n              <table *ngIf=\"GraphService.UserimageSRC !== null\">\n                <tr>\n                  <td>\n                    <img class=\"userimagesmall\" [src]=\"GraphService.UserimageSRC\">\n                  </td>\n                  <td style=\"width: 10px\"></td>\n                </tr>\n              </table>\n              <div *ngIf=\"GraphService.UserimageSRC === null\" [style.background]=\"Basics.Farben.Grau\" class=\"userkuerzelsmall\">\n                {{Pool.Mitarbeiterdaten !==  null ? Pool.Mitarbeiterdaten.Kuerzel : '---'}}\n              </div>\n            </ng-container>\n          </td>\n        </tr>\n      </table>\n\n    </ng-container>\n\n</page-header>\n</ion-header>\n<ion-content>\n\n\n  <ng-container *ngIf=\"AuthService.ShowLogin === false && Pool.Appeinstellungen !== null\">\n\n    <div *ngIf=\"Pool.Appeinstellungen.ShowHomeScreenInfos\" class=\"changelogdiv\">\n\n      <table class=\"paddingtable\" style=\"font-size: 80%\">\n        <tr>\n          <td colspan=\"3\" style=\"font-size: 140%; font-weight: bold;\" [style.color]=\"Basics.Farben.BAEBlau\">Change Log</td>\n        </tr>\n        <tr style=\"font-weight: bold; color: #454545\">\n          <td>Datum</td>\n          <td>Version</td>\n          <td>Beschreibung</td>\n        </tr>\n        <tr *ngFor=\"let Changelog of Pool.Changlogliste\">\n          <td><div style=\"width: 100%; cursor: pointer\" (click)=\"ChangelogClicked(Changelog)\">{{GetDatum(Changelog.Zeitstempel)}}</div></td>\n          <td><div style=\"width: 100%; cursor: pointer\" (click)=\"ChangelogClicked(Changelog)\">{{Changelog.Version}}</div> </td>\n          <td><div style=\"width: 100%; cursor: pointer\" (click)=\"ChangelogClicked(Changelog)\">{{Changelog.Beschreibung}}</div></td>\n        </tr>\n      </table>\n\n      <ion-button size=\"small\" [color]=\"'grau'\"\n                  (click)=\"AddChangelogClicked()\">\n        <ion-icon style=\"font-size: 90%\" name=\"add-circle-outline\" color=\"weiss\" slot=\"start\"></ion-icon>\n        <ion-text color=\"weiss\" style=\"font-size: 80%\">Neuer Eintrag</ion-text>\n      </ion-button>\n      <table class=\"paddingtable\" style=\"font-size: 80%\">\n        <tr>\n          <td><b>Build:</b></td>\n          <td>{{Basics.AppBuild}}</td>\n        </tr>\n      </table>\n    </div>\n\n    <!--\n    #354547\n    -->\n\n    <div style=\"width: 100%; height: 100%; background: #F2F4F4\">\n\n      <div style=\"position: absolute; width: 100%; height: 100%; z-index: 2\">\n        <ion-grid>\n          <ion-row>\n            <ion-col size=\"12\">\n              <div style=\"height: 20px\"></div>\n            </ion-col>\n          </ion-row>\n          <ion-row>\n            <ion-col>\n              <table style=\"width: 100%\">\n                <tr>\n                  <td align=\"center\">\n                    <img src=\"assets/images/group_logo.png\" style=\"height: 100px\"/>\n                  </td>\n                </tr>\n              </table>\n            </ion-col>\n          </ion-row>\n          <ion-row>\n            <ion-col size=\"12\">\n              <div style=\"height: 40px\"></div>\n            </ion-col>\n          </ion-row>\n        <ion-row>\n          <ion-col>\n            <div style=\"height: 140px; width: 100%; background: none;\">\n              <table *ngIf=\"Pool.ShowProgress === false\"  style=\"width: 100%;\">\n                <tr>\n                  <td align=\"center\">\n\n                    <table *ngIf=\"Pool.Mitarbeiterdaten !== null && Pool.Mitarbeiterdaten.Planeradministrator === true\">\n                      <tr>\n                        <td>\n\n                          <div (click)=\"StandorteButtonClicked()\"\n                               (mouseenter)=\"StandortMouseOver = true\"\n                               (mouseleave)=\"StandortMouseOver = false\" class=\"buttonclass\">\n                              <table>\n                                <tr>\n                                  <td align=\"center\">\n                                    <ion-icon name=\"location-outline\" [color]=\"StandortMouseOver ? Basics.Ionicfarben.BAEBlau : Basics.Ionicfarben.BurnicklGrau\" style=\"font-size: 80px\"></ion-icon>\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td style=\"text-align: center;\">\n                                    <table>\n                                      <tr>\n                                        <td style=\"font-size: 22px; font-weight: bold;\" [style.color]=\"Basics.Farben.BAEBlau\">\n                                          {{Pool.Standorteliste.length}}\n                                        </td>\n                                        <td style=\"width: 4px\"></td>\n                                        <td>\n                                          <ion-text [color]=\"Basics.Ionicfarben.Grau\" style=\"font-size: 22px\">Standorte</ion-text>\n                                        </td>\n                                      </tr>\n                                    </table>\n                                  </td>\n                                </tr>\n                              </table>\n                          </div>\n\n                        </td>\n                        <td>\n                          <div class=\"trennerdiv\" [style.background]=\"Basics.Farben.Grau\"></div>\n                        </td>\n                        <td>\n\n                          <div class=\"buttonclass\"\n                               (click)=\"MitarbeiterButtonClicked()\"\n                               (mouseenter)=\"MitarbeiterMouseOver = true\"\n                               (mouseleave)=\"MitarbeiterMouseOver = false\">\n\n                            <table>\n                              <tr>\n                                <td align=\"center\">\n\n                                  <div style=\"height: 90px; width: 100px; background: none; position: relative\">\n                                    <div class=\"projektbuttoniconclass\">\n                                      <ion-icon name=\"people-outline\" [color]=\"MitarbeiterMouseOver ? Basics.Ionicfarben.BAEBlau : Basics.Ionicfarben.BurnicklGrau\" style=\"font-size: 80px\"></ion-icon>\n                                    </div>\n                                    <!--\n                                    *ngIf=\"Pool.Mitarbeiterdaten.Kuerzel === '' || Pool.Mitarbeiterdaten.StandortID === ''\"\n                                    -->\n                                    <ng-container *ngIf=\"Pool.Mitarbeiterdaten !== null && CheckAllMitarbeiterdaten() === false\">\n                                      <div class=\"projektbuttoniconerrorclass\">\n                                        <img src=\"/assets/svgs/alert.svg\" style=\"height: 44px\"/>\n                                      </div>\n                                    </ng-container>\n                                  </div>\n\n                                </td>\n                              </tr>\n                              <tr>\n                                <td style=\"text-align: center;\">\n                                  <table>\n                                    <tr>\n                                      <td style=\"font-size: 22px; font-weight: bold;\" [style.color]=\"Basics.Farben.BAEBlau\">\n\n                                        {{CountMitarbeiter()}}\n                                      </td>\n                                      <td style=\"width: 4px\"></td>\n                                      <td style=\"text-align: center;\">\n                                        <ion-text [color]=\"Basics.Ionicfarben.Grau\" style=\"font-size: 22px\">Mitarbeiter</ion-text>\n                                      </td>\n                                    </tr>\n                                  </table>\n                                </td>\n                              </tr>\n                            </table>\n\n                          </div>\n\n                        </td>\n\n                      </tr>\n                    </table>\n\n\n                  </td>\n                </tr>\n              </table>\n\n\n            </div>\n          </ion-col>\n        </ion-row>\n          <ion-row>\n            <ion-col size=\"12\">\n              <div style=\"height: 20px\"></div>\n            </ion-col>\n          </ion-row>\n          <ion-row>\n            <ion-col size=\"12\">\n              <div style=\"height: 20px\"></div>\n            </ion-col>\n          </ion-row>\n          <ion-row>\n            <ion-col>\n              <table style=\"width: 100%;\">\n                <tr>\n                  <td align=\"center\">\n\n                    <table>\n                      <tr>\n                        <td>\n\n                          <div class=\"buttonbigclass\" (click)=\"PlanerButtonClicked()\">\n                               <!--\n                               (click)=\"PlayButtonClicked()\"\n                               (mouseenter)=\"PlayMouseOver = true\"\n                               (mouseleave)=\"PlayMouseOver = false\">\n                               -->\n\n                            <table style=\"width: 100%;\">\n                              <tr>\n                                <td align=\"center\">\n                                  <ion-icon name=\"sunny-outline\" [color]=\"Basics.Ionicfarben.BAEBlau\" style=\"font-size: 120px\"></ion-icon>\n                                </td>\n                              </tr>\n                              <tr>\n                                <td style=\"text-align: center;\">\n                                  <ion-text [color]=\"Basics.Ionicfarben.Grau\" style=\"font-size: 26px\">Urlaub - Homeoffice - Planer</ion-text>\n                                </td>\n                              </tr>\n                              <tr>\n                                <td style=\"text-align: center; font-size: 90%; color: gray\">\n                                  Version: {{Basics.AppVersionName}} / {{Basics.AppVersionDatum}}\n                                </td>\n                              </tr>\n                            </table>\n\n                          </div>\n\n\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n      </div>\n    </div>\n\n\n  </ng-container>\n\n  <ng-container *ngIf=\"AuthService.ShowLogin === true\">\n    <div style=\"width: 100%; height: 100%; background: #F2F4F4; z-index: 10\">\n      <ion-grid>\n        <ion-row>\n          <ion-col size=\"12\">\n            <div style=\"height: 30px\"></div>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col>\n            <table style=\"width: 100%;\">\n              <tr>\n                <td align=\"center\">\n                  <img src=\"assets/images/group_logo.png\" style=\"height: 100px\"/>\n                </td>\n              </tr>\n            </table>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col>\n            <div style=\"height: 40px\"></div>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col size=\"12\">\n            <table style=\"width: 100%\">\n              <tr>\n                <td align=\"center\">\n                  <div class=\"buttonbigclass\" style=\"z-index: 100\">\n\n                    <table style=\"width: 100%;\">\n                      <tr>\n                        <td align=\"center\">\n                          <ion-icon name=\"sunny-outline\" [color]=\"Basics.Ionicfarben.BAEBlau\" style=\"font-size: 120px\"></ion-icon>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"text-align: center;\">\n                          <ion-text [color]=\"Basics.Ionicfarben.Grau\" style=\"font-size: 26px\">Urlaub - Homeoffice - Planer</ion-text>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"text-align: center; font-size: 90%; color: gray\">\n                          Version: {{Basics.AppVersionName}} / {{Basics.AppVersionDatum}}\n                        </td>\n                      </tr>\n                    </table>\n\n                  </div>\n\n                </td>\n              </tr>\n            </table>\n          </ion-col>\n\n        </ion-row>\n        <ion-row>\n          <ion-col>\n            <table style=\"width: 100%;\">\n                <tr>\n                  <td style=\"text-align: center; vertical-align: center; height: 100px\">\n                    <ion-button [color]=\"Basics.Ionicfarben.BAEBlau\" (click)=\"LoginButtonClicked()\">Login</ion-button>\n                  </td>\n                </tr>\n              </table>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </div>\n  </ng-container>\n\n</ion-content>\n<ion-footer>\n<page-footer #PageFooter>\n\n\n\n\n</page-footer>\n</ion-footer>\n\n\n<fi-changelog-editor *ngIf=\"ShowChangelogEditor\"\n                     (OkClickedEvent)=\"ShowChangelogEditor = false\"\n                     (CancelClickedEvent)=\"ShowChangelogEditor = false\"\n                     (DeleteClickedEvent)=\"ShowChangelogEditor = false\">\n</fi-changelog-editor>\n";

/***/ }),

/***/ 76980:
/*!****************************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-einstellungen/common-urlaub-einstellungen.page.html?ngResource ***!
  \****************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header class=\"ion-no-border\">\n  <page-header #PageHeader>\n    <page-header-menu (UrlaubMitarbeiterClicked)=\"MitarbeiterWechselnClicked()\"\n                      (UrlaubMitarbeiterMeClicked)=\"UrlaubMitarbeiterMeClickedHandler()\"\n                      (JahrButtonClicked)=\"JahrButtonClickedHandler()\">\n    </page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n\n  <ion-grid *ngIf=\"DB.CurrentUrlaub !== null\">\n    <ion-row>\n      <ion-col size=\"12\">\n        <ion-text color=\"baeblau\" style=\"font-size: 120%\"><b>Projekt beteiligte Mitarbeiter/innen</b></ion-text>\n      </ion-col>\n    </ion-row>\n    <ion-row>\n      <ion-col size=\"12\">\n        <table class=\"paddingtable\">\n          <ng-container *ngIf=\"Projektbeteiligteliste.length > 0\">\n            <tr *ngFor=\"let Mitarbeiter of Projektbeteiligteliste\">\n              <td colspan=\"2\">{{Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name}}</td>\n            </tr>\n          </ng-container>\n          <ng-container *ngIf=\"Projektbeteiligteliste.length === 0\">\n            <tr>\n              <td><img src=\"assets/svgs/alert.svg\" style=\"width: 24px\"></td>\n              <td>\n                Bitte wähle hier alle Personen aus mit denen du regelmäßig zusammenarbeitest,<br>\n                oder Personen die eventuell deine Urlaubsvertretung übernehmen können.<br>\n                Durch diese Auswahl kannst du die Urlaubsplanung der ausgewählen Kolleginen und Kollegen einsehen.\n              </td>\n            </tr>\n          </ng-container>\n          <tr>\n            <td colspan=\"2\"><ion-button size=\"small\" color=\"grau\" (click)=\"MitarbeiterAuswahlClicked()\">Mitarbeiter/innen auswählen</ion-button></td>\n          </tr>\n        </table>\n      </ion-col>\n    </ion-row>\n    <ion-row>\n      <ion-col>\n        <ion-text color=\"baeblau\" style=\"font-size: 120%\"><b>Urlaubsfreigaben</b></ion-text>\n      </ion-col>\n    </ion-row>\n    <ion-row>\n      <ion-col size=\"6\">\n        <table class=\"paddingtable\">\n          <tr *ngIf=\"Urlaubsfreigeberliste.length === 0\">\n            <td><img src=\"assets/svgs/alert.svg\" style=\"width: 24px\"></td>\n            <td>\n              Für dich sind keine Personen für deine Urlaubsfreigaben eingetragen. Bitte wende dich an das Office.\n            </td>\n          </tr>\n          <tr *ngFor=\"let Mitarbeiter of Urlaubsfreigeberliste\">\n            <td>{{Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name}}</td>\n          </tr>\n        </table>\n      </ion-col>\n    </ion-row>\n    <ion-row>\n      <ion-col>\n        <ion-text color=\"baeblau\" style=\"font-size: 120%\"><b>Homeofficefreigaben</b></ion-text>\n      </ion-col>\n    </ion-row>\n    <ion-row>\n      <ion-col size=\"6\">\n        <table class=\"paddingtable\">\n          <tr *ngIf=\"Homeofficefreigeberliste.length === 0\">\n            <td><img src=\"assets/svgs/alert.svg\" style=\"width: 24px\"></td>\n            <td>\n              Für dich sind keine Personen für deine Homeofficefreigaben eingetragen. Bitte wende dich an das Office.\n            </td>\n          </tr>\n          <tr *ngFor=\"let Mitarbeiter of Homeofficefreigeberliste\">\n            <td>{{Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name}}</td>\n          </tr>\n        </table>\n      </ion-col>\n    </ion-row>\n    <ion-row>\n      <ion-col size=\"3\">\n        <ion-text color=\"baeblau\" style=\"font-size: 120%\"><b>Schulferien</b></ion-text>\n      </ion-col>\n      <ion-col size=\"3\">\n        <ion-text color=\"baeblau\" style=\"font-size: 120%\"><b>Feiertage</b></ion-text>\n      </ion-col>\n    </ion-row>\n    <ion-row>\n      <ion-col size=\"3\">\n\n        <table class=\"paddingtable\">\n          <tr style=\"font-weight: bold;\">\n            <td></td>\n            <td>Von</td>\n            <td>Bis</td>\n            <td>Name</td>\n          </tr>\n          <tr *ngFor=\"let Ferien of Ferienliste\">\n            <td><checkbox-clon [Checked]=\"CheckFerienBlocker(Ferien.Anfangstempel)\" (CheckChanged)=\"FerienBlockedChanged($event, Ferien.Anfangstempel)\"></checkbox-clon></td>\n            <td>{{GetDatum(Ferien.Anfangstempel)}}</td>\n            <td>{{GetDatum(Ferien.Endestempel)}}</td>\n            <td>{{Ferien.Name}}</td>\n          </tr>\n        </table>\n\n      </ion-col>\n      <ion-col size=\"3\">\n\n        <table class=\"paddingtable\">\n          <tr style=\"font-weight: bold;\">\n            <td></td>\n            <td>Von</td>\n            <td>Bis</td>\n            <td>Name</td>\n          </tr>\n          <tr *ngFor=\"let Feiertag of Feiertageliste\">\n            <td><checkbox-clon [Checked]=\"CheckFeiertagBlocker(Feiertag.Anfangstempel)\" (CheckChanged)=\"FeiertagBlockedChanged($event, Feiertag.Anfangstempel)\"></checkbox-clon></td>\n            <td>{{GetDatum(Feiertag.Anfangstempel)}}</td>\n            <td>{{GetDatum(Feiertag.Endestempel)}}</td>\n            <td>{{Feiertag.Name}}</td>\n          </tr>\n        </table>\n\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n\n\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n  </page-footer>\n</ion-footer>\n\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\" [ZIndex]=\"5000\"\n                [Dialogbreite]=\"400\"  [PositionY]=\"100\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"''\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\">\n</auswahl-dialog>\n\n<fi-mitarbeiter-auswahl *ngIf=\"ShowMitarbeiterauswahl\"\n                        [Titel]=\"MitarbeiterauswahlTitel\"\n                        [Dialogbreite]=\"600\" [ZIndex]=\"4000\"\n                        [Multiselect]=\"MitarbeiterMultiselect\"\n                        Iconname=\"people-outline\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        [OnlyProjektmitarbeiter]=\"false\"\n                        (CancelClickedEvent)=\"ShowMitarbeiterauswahl = false\"\n                        (OkClickedEvent)=\"MitarbeiterauswahlOkButtonClicked($event)\"\n                        (StandortfilterClickedEvent)=\"MitarebiterStandortfilterClickedHandler()\"></fi-mitarbeiter-auswahl>\n\n<fi-mitarbeiter-auswahl *ngIf=\"ShowMitarbeiterauswahl\"\n                        [Titel]=\"MitarbeiterauswahlTitel\"\n                        [BlockCurrentMitarbeiter]=\"BlockCurrentMitarbeiter\"\n                        [Dialogbreite]=\"600\" [ZIndex]=\"4000\"\n                        [Multiselect]=\"MitarbeiterMultiselect\"\n                        [OnlyProjektmitarbeiter]=\"false\"\n                        Iconname=\"people-outline\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        (CancelClickedEvent)=\"ShowMitarbeiterauswahl = false\"\n                        (OkClickedEvent)=\"MitarbeiterauswahlOkButtonClicked($event)\"\n                        (StandortfilterClickedEvent)=\"MitarebiterStandortfilterClickedHandler()\"></fi-mitarbeiter-auswahl>\n";

/***/ }),

/***/ 95912:
/*!********************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-freigaben/common-urlaub-freigaben.page.html?ngResource ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header class=\"ion-no-border\" xmlns=\"http://www.w3.org/1999/html\">\n  <page-header #PageHeader>\n    <page-header-menu (UrlaubMitarbeiterClicked)=\"MitarbeiterWechselnClicked()\"\n                      (UrlaubMitarbeiterMeClicked)=\"UrlaubMitarbeiterMeClickedHandler()\"\n                      (JahrButtonClicked)=\"JahrButtonClickedHandler()\">\n    </page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n\n  <div class=\"contentkeeperdivclass\">\n\n    <div class=\"contentdivclass\">\n\n      <div *ngIf=\"environment.production === false\"  style=\"position: absolute; padding: 4px; background: white; bottom: 0px;\">\n\n        <table class=\"docinnertable\">\n          <tr>\n            <td>Vertretungsanfragen</td><td>{{DB.Vertretungsanfragenanzahl}}</td>\n          </tr>\n          <tr>\n            <td>Vertretungsantwortenanzahl</td><td>{{DB.Vertretungsantwortenanzahl}}</td>\n          </tr>\n          <tr>\n            <td>Urlaubsfreigabenanfragenanzahl</td><td>{{DB.Freigabenanfragenanzahl}}</td>\n          </tr>\n          <tr>\n            <td>Freigabenantwortenanzahl</td><td>{{DB.Freigabenantwortenanzahl}}</td>\n          </tr>\n          <tr>\n            <td>Homeofficeanfragenanzahl</td><td>{{DB.Homeofficeanfragenanzahl}}</td>\n          </tr>\n        </table>\n\n      </div>\n\n\n      <table style=\"width: 100%\">\n        <tr>\n          <td style=\"height: 20px;\" colspan=\"2\"></td>\n        </tr>\n        <tr>\n          <td align=\"center\">\n\n            <table class=\"paddingsmalltable\">\n              <tr>\n                <td>\n                  <div  (click)=\"MonatBackButtonClicked()\"  class=\"monatedivclass\">\n                    <ion-icon name=\"caret-back-outline\" style=\"font-size: 20px\"></ion-icon>\n                  </div>\n                </td>\n                <td *ngFor=\"let Monat of DB.Monateliste; let Monatindex = index\">\n                  <div [style.color]=\"GetMonatButtonColor(Monatindex)\" (click)=\"MonatButtonClicked(Monatindex)\"  class=\"monatedivclass\">{{Monat}}</div>\n                </td>\n                <td>\n                  <div  (click)=\"MonatForwardButtonClicked()\"  class=\"monatedivclass\">\n                    <ion-icon name=\"caret-forward-outline\" style=\"font-size: 20px\"></ion-icon>\n                  </div>\n                </td>\n              </tr>\n            </table>\n\n          </td>\n        </tr>\n        <tr>\n          <td align=\"center\" valign=\"top\">\n\n            <table class=\"paddingtable\">\n              <tr>\n\n                <td style=\"width: 500px\" valign=\"top\">\n                  <urlaubsplanung-kalender\n                    [Jahr]=\"DB.CurrentJahr\"\n                    [Monatindex]=\"DB.FirstMonatIndex\"\n                    [AddUrlaubRunning]=\"false\"\n                    (ExternUrlaubstagClickedEvent)=\"ExternUrlaubstagClickedEventHandler($event)\"\n                    (FeiertagCrossedEvent)=\"FeiertagCrossedEventHandler($event)\"\n                    (FerientagCrossedEvent)=\"FerientagCrossedEventHandler($event)\">\n                  </urlaubsplanung-kalender>\n                </td>\n\n                <td style=\"width: 500px\" valign=\"top\">\n                  <urlaubsplanung-kalender\n                    [Jahr]=\"DB.CurrentJahr\"\n                    [ShowYear]=\"true\"\n                    [Monatindex]=\"DB.CurrentMonatindex\"\n                    [AddUrlaubRunning]=\"false\"\n                    (ExternUrlaubstagClickedEvent)=\"ExternUrlaubstagClickedEventHandler($event)\"\n                    (FeiertagCrossedEvent)=\"FeiertagCrossedEventHandler($event)\"\n                    (FerientagCrossedEvent)=\"FerientagCrossedEventHandler($event)\">\n                  </urlaubsplanung-kalender>\n                </td>\n\n                <td style=\"width: 500px\" valign=\"top\">\n                  <urlaubsplanung-kalender\n                    [Jahr]=\"DB.CurrentJahr\"\n                    [Monatindex]=\"DB.LastMonatIndex\"\n                    [AddUrlaubRunning]=\"false\"\n                    (ExternUrlaubstagClickedEvent)=\"ExternUrlaubstagClickedEventHandler($event)\"\n                    (FeiertagCrossedEvent)=\"FeiertagCrossedEventHandler($event)\"\n                    (FerientagCrossedEvent)=\"FerientagCrossedEventHandler($event)\">\n                  </urlaubsplanung-kalender>\n                </td>\n\n              </tr>\n            </table>\n\n          </td>\n\n        </tr>\n      </table>\n\n      <ion-grid>\n          <ion-row>\n            <ion-col>\n              <table width=\"100%\">\n                <tr>\n                  <td align=\"center\">\n                    <ion-text color=\"baeblau\" style=\"font-size: 120%; font-weight: bold;\">Vertretungsanfragen</ion-text>\n                  </td>\n                </tr>\n              </table>\n            </ion-col>\n          </ion-row>\n          <ng-container *ngFor=\"let Mitarbeiter of DB.Vertretrungliste\">\n            <ion-row>\n              <ion-col>\n                <table width=\"100%\">\n                  <tr>\n                    <td align=\"center\">\n                      {{Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name}}\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n            <ion-row *ngIf=\"DB.Vertretungsanfragenanzahl !== 0 || DB.Vertretungsantwortenanzahl !== 0\">\n              <ion-col>\n\n                <table width=\"100%\">\n                  <tr>\n                    <td align=\"center\">\n\n                      <table class=\"docinnertable\">\n\n                        <tr>\n                          <td style=\"font-weight: bold;\">Von</td>\n                          <td style=\"font-weight: bold;\">Bis</td>\n                          <td style=\"font-weight: bold; text-align: center\">Tage</td>\n                          <td style=\"font-weight: bold; text-align: center\">BU</td>\n                          <td style=\"font-weight: bold;\">Status</td>\n                          <td style=\"font-weight: bold; min-width: 600px\">Statusmeldung</td>\n                          <td></td>\n                          <td style=\"font-weight: bold; width: 300px;\">Anfrage beantworten</td>\n                        </tr>\n                        <ng-container *ngFor=\"let Urlaub of Mitarbeiter.Urlaubsliste\">\n                          <ng-container *ngIf=\"Urlaub.Jahr === DB.CurrentJahr\">\n                            <ng-container *ngFor=\"let Zeitspanne of Urlaub.Urlaubzeitspannen\">\n\n                              <ng-container *ngIf=\"DB.GetVertretungkonversation(DB.CurrentMitarbeiter, Zeitspanne) !== null\">\n\n                                <tr *ngIf=\"DB.CheckVertretungsanwortAge(Zeitspanne) === true &&\n                                 DB.CheckMitarbeiterIsVertretung(DB.CurrentMitarbeiter, Zeitspanne) &&\n                                (Zeitspanne.Status === DB.Urlaubstatusvarianten.Vertreteranfrage ||\n                                 Zeitspanne.Status === DB.Urlaubstatusvarianten.Vertreterfreigabe ||\n                                 Zeitspanne.Status === DB.Urlaubstatusvarianten.Vertreterablehnung)\">\n\n                                  <!--\n                                  Zeitspanne.UrlaubsvertreterID === DB.CurrentMitarbeiter._id\n                                  -->\n\n                                  <td>{{GetDatumlangtext(Zeitspanne.Startstempel)}}</td>\n                                  <td>{{GetDatumlangtext(Zeitspanne.Endestempel)}}</td>\n                                  <td style=\"text-align: center\">{{Zeitspanne.Tageanzahl}}</td>\n                                  <td><div *ngIf=\"Zeitspanne.Betriebsurlaub === true\" style=\"width: 20px; height: 20px; background: #307ac1; border-radius: 100%\"></div></td>\n                                  <td align=\"center\">\n                                    <div class=\"legendenewdivclass\" [style.background]=\"DB.GetUrlaubStatuscolorByKonversation(Zeitspanne)\"></div>\n                                  </td>\n                                  <td [innerHTML]=\"GetPlanungmeldung(Zeitspanne, Mitarbeiter)\"></td>\n                                  <td>\n                                    <ion-button size=\"small\" color=\"grau\" (click)=\"UrlaubSuchen(Zeitspanne, Mitarbeiter)\"><ion-icon name=\"search\" slot=\"icon-only\" style=\"font-size: 16px\"></ion-icon></ion-button>\n                                  </td>\n\n                                  <td>\n                                    <ng-container *ngIf=\"DB.GetVertretungkonversation(DB.CurrentMitarbeiter, Zeitspanne).VertreterantwortSended === false\">\n                                      <ion-radio-group [value]=\"DB.GetVertretungkonversation(DB.CurrentMitarbeiter, Zeitspanne).Status\" (ionChange)=\"VerteretungStatusChangedHandler($event, Zeitspanne, Mitarbeiter._id)\">\n                                        <table class=\"nobordertable\">\n                                          <tr>\n                                            <td><ion-radio [value]=\"DB.Urlaubstatusvarianten.Vertreterfreigabe\"></ion-radio></td><td style=\"color: green\">Vertretung annehmen</td>\n                                            <td><ion-radio [value]=\"DB.Urlaubstatusvarianten.Vertreterablehnung\"></ion-radio></td><td style=\"color: red\">Vertretung ablehnen</td>\n                                          </tr>\n                                        </table>\n                                      </ion-radio-group>\n                                    </ng-container>\n                                    <ng-container *ngIf=\"DB.GetVertretungkonversation(DB.CurrentMitarbeiter, Zeitspanne).VertreterantwortSended === true\">\n                                      <table class=\"nobordertable\">\n                                        <tr>\n                                          <td *ngIf=\"DB.GetVertretungkonversation(DB.CurrentMitarbeiter, Zeitspanne).Status === DB.Urlaubstatusvarianten.Vertreterfreigabe\"  style=\"color: green\">\n                                            Vertretung angenommen<br>\n                                            vor {{DB.GetVertretungsanwortAge(Zeitspanne).toFixed(0)}} {{DB.GetVertretungsanwortAge(Zeitspanne) === 1 ? 'Minute' : 'Minuten'}}\n                                          </td>\n                                          <td *ngIf=\"DB.GetVertretungkonversation(DB.CurrentMitarbeiter, Zeitspanne).Status === DB.Urlaubstatusvarianten.Vertreterablehnung\" style=\"color: red\">\n                                            Vertretung abgelehnt<br>\n                                            vor {{DB.GetVertretungsanwortAge(Zeitspanne).toFixed(0)}} {{DB.GetVertretungsanwortAge(Zeitspanne) === 1 ? 'Minute' : 'Minuten'}}\n                                          </td>\n                                        </tr>\n                                      </table>\n                                    </ng-container>\n                                  </td>\n                                </tr>\n\n                              </ng-container>\n                              <!--\n                              <ng-container *ngIf=\"DB.GetVertretungkonversation(DB.CurrentMitarbeiter, Zeitspanne) === null\">\n                                <tr>\n                                  <td colspan=\"100\">Vertretung Konversationsfehler</td>\n                                </tr>\n                              </ng-container>\n                              -->\n                            </ng-container>\n                            <!--\n                             *ngIf=\"CheckVertretungUpdateButtonVisible(Mitarbeiter, Urlaub)\"\n                             -->\n                            <tr>\n                              <td colspan=\"8\" align=\"center\">\n                                <ion-button [disabled]=\"CheckVertretungUpdateButtonEnabled(Mitarbeiter, Urlaub) === false\" size=\"small\" (click)=\"SendVertretungUpdate(Mitarbeiter, Urlaub)\">Aktualisierung senden</ion-button>\n                              </td>\n                            </tr>\n                            <!--\n                            <tr>\n                              <td colspan=\"7\" align=\"center\">\n                                <ion-button  (click)=\"DB.ResetRequest(Mitarbeiter, Urlaub)\">Reset</ion-button>\n                              </td>\n                            </tr>\n                            -->\n                            <tr *ngIf=\"this.DB.CountUrlaubsvertretungen(Mitarbeiter) === 0\">\n                              <td colspan=\"6\" style=\"color: red;\">\n                                Bitte Person für Urlaubsfreigaben festlegen\n                              </td>\n                            </tr>\n                          </ng-container>\n                        </ng-container>\n\n                      </table>\n\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n\n                    </td>\n                  </tr>\n                </table>\n\n\n              </ion-col>\n            </ion-row>\n\n          </ng-container>\n          <ng-container *ngIf=\"DB.Vertretungsanfragenanzahl === 0 && DB.Vertretungsantwortenanzahl === 0\">\n            <ion-row>\n              <ion-col>\n                <table style=\"width: 100%\">\n                  <tr>\n                    <td style=\"text-align: center; height: 30px\">\n                      Keine Vertretungsanfragen vorhanden\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n          </ng-container>\n        <ng-container *ngIf=\"DB.Vertretungsanfragenanzahl !== 0 || DB.Vertretungsantwortenanzahl !== 0\">\n          <ion-row>\n            <ion-col>\n              <div style=\"height: 20px;\"></div>\n            </ion-col>\n          </ion-row>\n        </ng-container>\n          <ion-row>\n            <ion-col>\n              <table width=\"100%\">\n                <tr>\n                  <td align=\"center\">\n                    <ion-text color=\"baeblau\" style=\"font-size: 120%; font-weight: bold;\">Urlaubsfreigaben</ion-text>\n                  </td>\n                </tr>\n              </table>\n            </ion-col>\n          </ion-row>\n          <ng-container *ngFor=\"let Mitarbeiter of DB.Urlaubfreigabenliste\">\n            <ion-row>\n              <ion-col>\n                <table width=\"100%\">\n                  <tr>\n                    <td align=\"center\">\n                      {{Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name}}\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n            <ion-row *ngIf=\"DB.Freigabenanfragenanzahl > 0 || DB.Freigabenantwortenanzahl > 0\">\n              <ion-col>\n\n                <table width=\"100%\">\n                  <tr>\n                    <td align=\"center\">\n                      <table class=\"docinnertable\">\n                        <tr>\n                          <td style=\"font-weight: bold;\">Von</td>\n                          <td style=\"font-weight: bold;\">Bis</td>\n                          <td style=\"font-weight: bold; text-align: center\">Tage</td>\n                          <td style=\"font-weight: bold; text-align: center\">BU</td>\n                          <td style=\"font-weight: bold;\">Vertretungen</td>\n                          <td style=\"font-weight: bold;\">Status</td>\n                          <td style=\"font-weight: bold; min-width: 500px\">Statusmeldung</td>\n                          <td></td>\n                          <td style=\"font-weight: bold; width: 300px;\">Anfrage beantworten</td>\n                        </tr>\n                        <ng-container *ngFor=\"let Urlaub of Mitarbeiter.Urlaubsliste\">\n                          <ng-container *ngIf=\"Urlaub.Jahr === DB.CurrentJahr && this.DB.CheckUrlaubsfreigeberAvailable(Mitarbeiter) === true\">\n                            <ng-container *ngFor=\"let Zeitspanne of Urlaub.Urlaubzeitspannen\">\n\n                                  <tr *ngIf=\"DB.CheckUrlaubFreigabeanwortAge(Zeitspanne) === true &&\n                                            (Zeitspanne.Status === DB.Urlaubstatusvarianten.Vertreterfreigabe ||\n                                             Zeitspanne.Status === DB.Urlaubstatusvarianten.Genehmigt ||\n                                             Zeitspanne.Status === DB.Urlaubstatusvarianten.Abgelehnt)\">\n\n                                    <td>{{GetDatumlangtext(Zeitspanne.Startstempel)}}</td>\n                                    <td>{{GetDatumlangtext(Zeitspanne.Endestempel)}}</td>\n                                    <td style=\"text-align: center\">{{Zeitspanne.Tageanzahl}}</td>\n                                    <td><div *ngIf=\"Zeitspanne.Betriebsurlaub === true\" style=\"width: 20px; height: 20px; background: #307ac1; border-radius: 100%\"></div></td>\n\n                                    <td>\n\n                                      <table *ngIf=\"Zeitspanne.UrlaubsvertreterIDListe.length !== 0\" class=\"nobordersmalltable\">\n                                        <tr *ngFor=\"let MitarbeiterID of Zeitspanne.UrlaubsvertreterIDListe\">\n                                          <td>{{GetStellvertretername(MitarbeiterID)}}</td>\n                                        </tr>\n                                      </table>\n\n                                    </td>\n                                    <td align=\"center\">\n                                      <div class=\"legendedivclass\" [style.background]=\"DB.GetUrlaubStatuscolor(Zeitspanne)\"></div>\n                                    </td>\n                                    <td style=\"overflow-wrap: break-word; width: 500px;\" [innerHTML]=\"Zeitspanne.Status === DB.Urlaubstatusvarianten.Vertreterfreigabe ? Zeitspanne.Planungmeldung : Zeitspanne.Freigabemeldung\"></td>\n                                    <td>\n                                      <ion-button [disabled]=\"Zeitspanne.Status === DB.Urlaubstatusvarianten.Abgelehnt\" size=\"small\" color=\"grau\" (click)=\"UrlaubSuchen(Zeitspanne, Mitarbeiter)\"><ion-icon name=\"search\" slot=\"icon-only\" style=\"font-size: 16px\"></ion-icon></ion-button>\n                                    </td>\n                                    <td>\n                                      <ng-container *ngIf=\"Zeitspanne.FreigabeantwortSended === false\">\n                                        <ion-radio-group [value]=\"Zeitspanne.Status\" (ionChange)=\"FreigabeStatusChangedHandler($event, Zeitspanne, Mitarbeiter._id)\">\n                                          <table class=\"nobordertable\" width=\"100%\">\n                                            <tr>\n                                              <td style=\"width: 30px;\"><ion-radio [value]=\"DB.Urlaubstatusvarianten.Genehmigt\"></ion-radio></td><td style=\"color: green\">Urlaub<br>genehmigen</td>\n                                              <td style=\"width: 30px;\"><ion-radio [value]=\"DB.Urlaubstatusvarianten.Abgelehnt\"></ion-radio></td><td style=\"color: red\">Urlaub<br>ablehnen</td>\n                                            </tr>\n                                          </table>\n                                        </ion-radio-group>\n                                      </ng-container>\n                                      <ng-container *ngIf=\"Zeitspanne.FreigabeantwortSended === true\">\n                                        <table class=\"nobordertable\" width=\"100%\">\n                                          <tr>\n                                            <td *ngIf=\"Zeitspanne.Status === DB.Urlaubstatusvarianten.Genehmigt\" style=\"color: green\">Urlaub genehmigt</td>\n                                            <td *ngIf=\"Zeitspanne.Status === DB.Urlaubstatusvarianten.Abgelehnt\" style=\"color: red\">Urlaub abgelehnt</td>\n                                          </tr>\n                                        </table>\n                                      </ng-container>\n                                    </td>\n                                  </tr>\n\n\n                            </ng-container>\n                            <tr>\n                              <td colspan=\"9\" align=\"center\">\n                                <table style=\"width: 100%\" class=\"nobordertable\">\n                                  <tr>\n                                    <td style=\"width: 33%; font-size: 80%\">BU = Betriebsurlaub</td>\n                                    <td style=\"width: 33%\" align=\"center\">\n                                      <ion-button [disabled]=\"CheckFreigabeUpdateButtonEnabled(Mitarbeiter, Urlaub) === false\" size=\"small\" (click)=\"SendFreigabeUpdate(Mitarbeiter, Urlaub)\">Aktualisierung senden</ion-button>\n                                    </td>\n                                    <td style=\"width: 33%\"></td>\n                                  </tr>\n                                </table>\n                              </td>\n                            </tr>\n                          </ng-container>\n                        </ng-container>\n                      </table>\n\n                    </td>\n                  </tr>\n                </table>\n\n              </ion-col>\n            </ion-row>\n          </ng-container>\n        <ng-container *ngIf=\"DB.Freigabenanfragenanzahl === 0 && DB.Freigabenantwortenanzahl === 0\">\n          <ion-row>\n            <ion-col>\n              <table style=\"width: 100%\">\n                <tr>\n                  <td style=\"text-align: center; height: 30px\">\n                    Keine Freigabeanfragen vorhanden\n                  </td>\n                </tr>\n              </table>\n            </ion-col>\n          </ion-row>\n\n        </ng-container>\n\n          <ion-row>\n            <ion-col>\n              <table width=\"100%\">\n                <tr>\n                  <td align=\"center\">\n                    <ion-text color=\"baeblau\" style=\"font-size: 120%; font-weight: bold;\">Homeofficefreigaben</ion-text>\n                  </td>\n                </tr>\n              </table>\n            </ion-col>\n          </ion-row>\n          <ng-container *ngFor=\"let Mitarbeiter of DB.Homeofficefreigabenliste\">\n            <ion-row>\n              <ion-col>\n                <table width=\"100%\">\n                  <tr>\n                    <td align=\"center\">\n                      {{Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name}}\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n            <ion-row *ngIf=\"DB.Homeofficeanfragenanzahl > 0 || DB.Homeofficantwortenanzahl > 0\">\n              <ion-col>\n\n                <table width=\"100%\">\n                  <tr>\n                    <td align=\"center\">\n                      <table class=\"docinnertable\">\n                        <tr>\n                          <td style=\"font-weight: bold;\">Datum</td>\n                          <td style=\"font-weight: bold;\">Status</td>\n                          <td></td>\n                          <td style=\"font-weight: bold;\">Genehmigt</td>\n                          <td style=\"font-weight: bold;\">Abgelehnt</td>\n                        </tr>\n                        <ng-container *ngFor=\"let Urlaub of Mitarbeiter.Urlaubsliste\">\n                          <ng-container *ngIf=\"Urlaub.Jahr === DB.CurrentJahr && DB.CheckHomeofficefreigeberAvailable(Mitarbeiter) === true\">\n                            <tr *ngIf=\"CheckHasAnfragen(Urlaub)\">\n                              <td colspan=\"3\"></td>\n                              <!--\n                              <td></td>\n                              <td></td>\n                              -->\n                              <td align=\"center\">\n                                <ion-button (click)=\"HomeofficeGenehmigeAll(Urlaub)\" color=\"gruen\" size=\"small\">\n                                  <ion-icon name=\"checkmark-outline\"></ion-icon>\n                                </ion-button>\n                              </td>\n                              <td align=\"center\">\n                                <ion-button (click)=\"HomeofficeAblehnenAll(Urlaub)\" color=\"rot\" size=\"small\">\n                                  <ion-icon name=\"close-outline\"></ion-icon>\n                                </ion-button>\n                              </td>\n                            </tr>\n                            <ng-container *ngFor=\"let Zeitspanne of Urlaub.Homeofficezeitspannen\">\n                              <ng-container *ngIf=\"DB.CheckHomeofficeFreigabeanwortAge(Zeitspanne) === true && (\n                                  Zeitspanne.Status === DB.Homeofficestatusvarianten.Freigabeanfrage ||\n                                  Zeitspanne.Status === DB.Homeofficestatusvarianten.Genehmigt ||\n                                  Zeitspanne.Status === DB.Homeofficestatusvarianten.Abgelehnt)\">\n\n                                  <tr>\n                                    <td>{{Zeitspanne.Startstring}}</td>\n                                    <td align=\"center\">\n                                      <div class=\"legendebreitdivclass\" [style.background]=\"DB.GetHomeofficeStatuscolor(Zeitspanne.Status)\">\n                                        {{Mitarbeiter.Kuerzel}} | HO\n                                      </div>\n                                    </td>\n                                    <td>\n                                      <ion-button size=\"small\" color=\"grau\" (click)=\"HomeofficeSuchen(Zeitspanne)\"><ion-icon name=\"search\" slot=\"icon-only\" style=\"font-size: 16px\"></ion-icon></ion-button>\n                                    </td>\n                                    <td colspan=\"2\">\n                                      <ion-radio-group [value]=\"Zeitspanne.Status\" (ionChange)=\"HomeofficeStatusChanged($event, Zeitspanne, Urlaub)\">\n                                        <table style=\"width: 100%\" class=\"nobordertable\">\n                                          <tr style=\"height: 32px;\">\n                                            <td align=\"center\" style=\"width: 50%\">\n                                              <ion-radio *ngIf=\"Zeitspanne.FreigabeantwortSended === false\" [value]=\"DB.Homeofficestatusvarianten.Genehmigt\"></ion-radio>\n                                              <span *ngIf=\"Zeitspanne.FreigabeantwortSended === true && Zeitspanne.Status === DB.Homeofficestatusvarianten.Genehmigt\">\n                                                <div style=\"border-radius: 50%; width: 12px; height: 12px; background: green;\"></div>\n                                              </span>\n                                            </td>\n                                            <td align=\"center\" style=\"width: 50%\">\n                                              <ion-radio *ngIf=\"Zeitspanne.FreigabeantwortSended === false\" [value]=\"DB.Homeofficestatusvarianten.Abgelehnt\"></ion-radio>\n                                              <span *ngIf=\"Zeitspanne.FreigabeantwortSended === true && Zeitspanne.Status === DB.Homeofficestatusvarianten.Abgelehnt\">\n                                                <div style=\"border-radius: 50%; width: 12px; height: 12px; background: red;\"></div>\n                                              </span>\n                                            </td>\n                                          </tr>\n                                        </table>\n                                      </ion-radio-group>\n                                    </td>\n                                  </tr>\n                              </ng-container>\n                            </ng-container>\n                            <tr *ngIf=\"CheckHasAnfragen(Urlaub) === true\">\n                              <td colspan=\"5\" align=\"center\">\n                                <ion-button [disabled]=\"CheckHomeofficeUpdateButtonEnabled(Urlaub) === false\" size=\"small\" (click)=\"SendHomeofficeUpdate(Urlaub, Mitarbeiter)\">Aktualisierung senden</ion-button>\n                            </tr>\n                          </ng-container>\n                        </ng-container>\n                      </table>\n                    </td>\n                  </tr>\n                </table>\n\n              </ion-col>\n            </ion-row>\n          </ng-container>\n          <ng-container *ngIf=\"DB.Homeofficeanfragenanzahl === 0 && DB.Homeofficantwortenanzahl === 0\">\n            <ion-row>\n              <ion-col>\n                <table style=\"width: 100%\">\n                  <tr>\n                    <td style=\"text-align: center; height: 30px\">\n                      Keine Homeofficeanfragen vorhanden\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n          </ng-container>\n\n\n\n\n\n\n\n      </ion-grid>\n    </div>\n\n\n    <div class=\"legendekeeperdivclass\" [style.height.px]=\"Legendehoehe\" [style.width.px]=\"Legendebreite\" [style.right.px]=\"LegendeVisible ? 0 : -(Legendebreite - 14)\">\n\n      <table>\n        <tr>\n          <td>\n            <div (click)=\"LegendeVisible = !LegendeVisible\" class=\"legendebuttonclass\" [style.height.px]=\"Legendehoehe\">\n              <ion-icon color=\"weiss\" [name]=\"LegendeVisible ? 'caret-forward-outline' : 'caret-back-outline'\"></ion-icon>\n            </div>\n          </td>\n          <td valign=\"top\">\n\n            <table *ngIf=\"Pool.Mitarbeitersettings !== null\" class=\"paddingtable\">\n              <ng-container *ngIf=\"DB.Laendercode === 'DE'\">\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFeiertage_DE\" (CheckChanged)=\"AnsichtFeiertageCheckChanged($event, 'DE')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Feiertage_DE\">\n                    <ion-icon name=\"flag-outline\" color=\"weiss\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Feiertage Deutschland</td>\n                </tr>\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFerientage_DE\" (CheckChanged)=\"AnsichtFerientageCheckChanged($event, 'DE')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Ferien_DE\">\n                    <ion-icon name=\"school-outline\" color=\"weiss\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Schulferien Deutschland</td>\n                </tr>\n              </ng-container>\n              <ng-container>\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFeiertage_BG\" (CheckChanged)=\"AnsichtFeiertageCheckChanged($event,  'BG')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Feiertage_BG\">\n                    <ion-icon name=\"flag-outline\" color=\"gelb\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Feiertage Bulgarien</td>\n                </tr>\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFerientage_BG\" (CheckChanged)=\"AnsichtFerientageCheckChanged($event, 'BG')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Ferien_BG\">\n                    <ion-icon name=\"school-outline\" color=\"gelb\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Schulferien Bulgarien</td>\n                </tr>\n              </ng-container>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Geplant\"></div></td><td>geplanter Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreteranfrage\"></div></td><td>Vertretung angefragt</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreterfreigabe\"></div></td><td>Genehmigungsanfrage Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreterablehnung\"></div></td><td>Vertretung wurde abgelehnt</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Genehmigt\"></div></td><td>Genehmigter Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td>\n                <td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Abgelehnt\"></div></td><td>Abgelehnter Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Geplant\">HO</div></td><td>geplantes Homeoffice</td>\n              </tr>\n              <tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Freigabeanfrage\">HO</div></td><td>Homeoffice angefragt</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Genehmigt\">HO</div></td><td>Homeoffice genehmigt</td>\n              </tr>\n              <tr>\n                <td>\n                </td>\n                <td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Abgelehnt\">HO</div></td><td>Homeoffice abgelehnt</td>\n              </tr>\n\n\n              <tr *ngFor=\"let Urlaub of DB.UrlaublisteExtern; let i = index\">\n                <td>\n                  <checkbox-clon [Checked]=\"DB.CheckDisplayExternenUrlaub(Urlaub.MitarbeiterIDExtern)\" (CheckChanged)=\"DisplayExternCheckChanged($event, Urlaub, i)\" [Enabled]=\"Urlaub.Urlaubzeitspannen.length > 0\"></checkbox-clon>\n                </td>\n                <td><div class=\"legendeexterndivclass\">{{Urlaub.NameKuerzel}}</div></td><td>{{Urlaub.NameExtern}} {{Urlaub.Text}}</td>\n              </tr>\n\n              <tr>\n                <td colspan=\"3\" style=\"height: 20px\"></td>\n              </tr>\n              <tr>\n                <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.ShowHomeoffice\" (CheckChanged)=\"ShowHomeofficeChanged($event)\"></checkbox-clon></td>\n                <td colspan=\"2\">Homeoffice Einträge anzeigen</td>\n              </tr>\n\n\n            </table>\n\n          </td>\n        </tr>\n      </table>\n\n    </div>\n\n  </div>\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n    <table style=\"width: 100%;\" *ngIf=\"Pool.Appeinstellungen !== null\">\n      <tr>\n        <td align=\"left\" style=\"width: 50%\">\n          <table class=\"paddingtable\">\n            <tr>\n              <td *ngIf=\"Flagsource !== ''\"><img [src]=\"Flagsource\"></td>\n              <td *ngIf=\"Message    !== ''\" style=\"height: 40px; font-size: 110%; font-weight: bold; color: white; text-align: left\">{{Message}}</td>\n            </tr>\n          </table>\n        </td>\n        <td style=\"width: 50%\">\n          <div *ngIf=\"Pool.Appeinstellungen.DebugNoExternalEmail\" style=\"padding: 6px; text-align: center; border-radius: 4px; background: red; color: white; font-weight: bold; width: 400px;\">Keine externen Email senden</div>\n        </td>\n      </tr>\n    </table>\n  </page-footer>\n</ion-footer>\n\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\" [ZIndex]=\"5000\"\n                [Dialogbreite]=\"400\"  [PositionY]=\"100\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"''\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\">\n</auswahl-dialog>\n\n<fi-mitarbeiter-auswahl *ngIf=\"ShowMitarbeiterauswahl\"\n                        [Titel]=\"MitarbeiterauswahlTitel\"\n                        [Dialogbreite]=\"600\" [ZIndex]=\"4000\"\n                        [Multiselect]=\"false\"\n                        [OnlyProjektmitarbeiter]=\"false\"\n                        Iconname=\"people-outline\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        (CancelClickedEvent)=\"ShowMitarbeiterauswahl = false\"\n                        (OkClickedEvent)=\"MitarbeiterauswahlOkButtonClicked($event)\"\n                        (StandortfilterClickedEvent)=\"MitarebiterStandortfilterClickedHandler()\"></fi-mitarbeiter-auswahl>\n\n\n";

/***/ }),

/***/ 60800:
/*!**********************************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-gesamtuebersicht/common-urlaub-gesamtuebersicht.page.html?ngResource ***!
  \**********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header class=\"ion-no-border\">\n  <page-header #PageHeader>\n    <page-header-menu (UrlaubMitarbeiterClicked)=\"MitarbeiterWechselnClicked()\"\n                      (UrlaubMitarbeiterMeClicked)=\"UrlaubMitarbeiterMeClickedHandler()\"\n                      (JahrButtonClicked)=\"JahrButtonClickedHandler()\">\n    </page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n\n  <div class=\"contentdivclass\">\n\n    <div style=\"height: 100%; position: absolute; overflow: scroll\" [style.width.px]=\"Basics.Contentbreite\">\n\n      <div class=\"headerdivclass\" [style.height.px]=\"Headerhoehe\">\n\n        <table style=\"width: 100%\">\n          <tr>\n            <td align=\"center\">\n\n              <table class=\"paddingsmalltable\">\n                <tr>\n                  <td>\n                    <div  (click)=\"MonatBackButtonClicked()\" class=\"monatedivclass\">\n                      <ion-icon name=\"caret-back-outline\" style=\"font-size: 20px\"></ion-icon>\n                    </div>\n                  </td>\n                  <td *ngFor=\"let Monat of DB.Monateliste; let Monatindex = index\">\n                    <div [style.color]=\"GetMonatButtonColor(Monatindex)\" (click)=\"MonatButtonClicked(Monatindex)\" class=\"monatedivclass\">{{Monat}}</div>\n                  </td>\n                  <td>\n                    <div  (click)=\"MonatForwardButtonClicked()\" class=\"monatedivclass\">\n                      <ion-icon name=\"caret-forward-outline\" style=\"font-size: 20px\"></ion-icon>\n                    </div>\n                  </td>\n                </tr>\n              </table>\n\n            </td>\n          </tr>\n          <tr>\n            <td style=\"height: 10px;\"></td>\n          </tr>\n          <tr>\n            <td align=\"center\">\n\n              <table class=\"docinnertable\">\n                <tr>\n                  <td [colSpan]=\"Tagesumme + 1\" align=\"center\" style=\"height: 40px; font-size: 120%;\"><b>{{Monatname}} {{DB.CurrentJahr}}</b></td>\n                </tr>\n                <tr>\n                  <td rowspan=\"3\" style=\"width: 200px;\"></td>\n                  <ng-container *ngFor=\"let Kalenderwoche of Kalenderwochenliste\">\n                    <td [colSpan]=\"Kalenderwoche.Tageanzahl\" style=\"text-align: center\"><b>KW {{Kalenderwoche.Nummer}}</b></td>\n                  </ng-container>\n                </tr>\n                <tr>\n                  <td *ngFor=\"let Datum of Kalendertageliste\" style=\"width: 48px;\" align=\"center\"><ion-text color=\"baeblau\"><b>{{Datum.Tag}}</b></ion-text></td>\n                </tr>\n                <tr>\n                  <td *ngFor=\"let Datum of Kalendertageliste\" style=\"width: 40px;\" align=\"center\">\n                    <ion-text [color]=\"Datum.Hauptmonat ? Basics.Ionicfarben.Schwarz : Basics.Ionicfarben.Silber\"><b>{{Datum.Tagnummer}}</b></ion-text>\n                  </td>\n                </tr>\n              </table>\n\n            </td>\n          </tr>\n        </table>\n\n      </div>\n\n      <div class=\"innercontentdivclass\" [style.top.px]=\"Headerhoehe\" [style.height.px]=\"Contenthoehe\">\n        <table style=\"width: 100%\">\n          <tr>\n            <td align=\"center\">\n\n              <table class=\"docinnertable\">\n                <ng-container *ngFor=\"let Standort of Standortliste\">\n                  <tr>\n                    <td style=\"width: 200px;\"><b>{{Standort.Standort}}</b></td>\n                    <td [colSpan]=\"Tagesumme\"></td>\n                  </tr>\n                  <tr *ngFor=\"let Mitarbeiter of Mitrbeiterliste[Standort._id]\">\n                    <td>{{Mitarbeiter.Vorname}} {{Mitarbeiter.Name}}</td>\n                    <td *ngFor=\"let Datum of Kalendertageliste\" style=\"width: 48px; height: 30px;\" align=\"center\">\n                      <ng-container *ngIf=\"DB.CheckIsUrlaubstag(Mitarbeiter, Datum) !== null\">\n                        <div class=\"urlaubclass\" [style.background]=\"DB.GetUrlaubStatuscolor(DB.CheckIsUrlaubstag(Mitarbeiter, Datum))\">\n                          {{Mitarbeiter.Kuerzel}}\n                        </div>\n                      </ng-container>\n                      <ng-container *ngIf=\"DB.CheckIsHomeofficetag(Mitarbeiter, Datum) !== null\">\n                        <div class=\"homeofficeclass\" [style.background]=\"DB.GetHomeofficeStatuscolor(DB.CheckIsHomeofficetag(Mitarbeiter, Datum).Status)\">\n                          {{Mitarbeiter.Kuerzel}}<br>HO\n                        </div>\n                      </ng-container>\n\n                    </td>\n                  </tr>\n                </ng-container>\n              </table>\n\n            </td>\n          </tr>\n        </table>\n\n        <br>\n        <br>\n        <br>\n        <br>\n        <br>\n\n      </div>\n\n\n    </div>\n\n    <div class=\"legendekeeperdivclass\" [style.height.px]=\"Legendehoehe\" [style.width.px]=\"Legendebreite\" [style.right.px]=\"LegendeVisible ? 0 : -(Legendebreite - 14)\">\n\n      <div (click)=\"LegendeVisible = !LegendeVisible\" class=\"legendebuttonclass\" [style.height.px]=\"Legendehoehe\">\n        <ion-icon color=\"weiss\" [name]=\"LegendeVisible ? 'caret-forward-outline' : 'caret-back-outline'\"></ion-icon>\n      </div>\n      <div style=\"width: 100%; overflow: auto\" [style.height.px]=\"Legendehoehe\">\n        <table class=\"paddingtable\">\n          <tr>\n            <td colspan=\"4\"><ion-text color=\"schwarz\"><b>Allgemein</b></ion-text>\n          </tr>\n          <tr>\n            <td style=\"width: 32px;\"></td>\n            <td><checkbox-clon (CheckChanged)=\"SettingsCheckedChanged($event)\" [Value]=\"DB.Urlaubstatusvarianten.Geplant\" [Checked]=\"DB.GesamtuebersichtSetting.ShowGeplant\"></checkbox-clon></td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Geplant\"></div></td><td>geplanter Urlaub</td>\n          </tr>\n          <tr>\n            <td></td><td><checkbox-clon (CheckChanged)=\"SettingsCheckedChanged($event)\" [Value]=\"DB.Urlaubstatusvarianten.Vertreteranfrage\" [Checked]=\"DB.GesamtuebersichtSetting.ShowVertreteranfragen\"></checkbox-clon></td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreteranfrage\"></div></td><td>Vertretung angefragt</td>\n          </tr>\n          <tr>\n            <td></td><td><checkbox-clon (CheckChanged)=\"SettingsCheckedChanged($event)\" [Value]=\"DB.Urlaubstatusvarianten.Vertreterfreigabe\" [Checked]=\"DB.GesamtuebersichtSetting.ShowVertreterfreigaben\"></checkbox-clon></td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreterfreigabe\"></div></td><td>Urlaub mit Vertreterfreigabe</td>\n          </tr>\n          <tr>\n            <td></td><td><checkbox-clon (CheckChanged)=\"SettingsCheckedChanged($event)\" [Value]=\"DB.Urlaubstatusvarianten.Vertreterablehnung\" [Checked]=\"DB.GesamtuebersichtSetting.ShowVertreterablehnungen\"></checkbox-clon></td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreterablehnung\"></div></td><td>Vertretung wurde abgelehnt</td>\n          </tr>\n          <tr>\n            <td></td><td><checkbox-clon (CheckChanged)=\"SettingsCheckedChanged($event)\" [Value]=\"DB.Urlaubstatusvarianten.Genehmigt\" [Checked]=\"DB.GesamtuebersichtSetting.ShowUrlaubsgenehmigungen\"></checkbox-clon></td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Genehmigt\"></div></td><td>Genehmigter Urlaub</td>\n          </tr>\n          <tr>\n            <td></td><td><checkbox-clon (CheckChanged)=\"SettingsCheckedChanged($event)\" [Value]=\"DB.Urlaubstatusvarianten.Abgelehnt\" [Checked]=\"DB.GesamtuebersichtSetting.ShowUrlaubsablehnungen\"></checkbox-clon></td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Abgelehnt\"></div></td><td>Abgelehnter Urlaub</td>\n          </tr>\n          <tr>\n            <td></td><td><checkbox-clon (CheckChanged)=\"SettingsHomeofficeCheckedChanged($event)\" [Value]=\"DB.Homeofficestatusvarianten.Geplant\" [Checked]=\"DB.GesamtuebersichtSetting.ShowHomeofficeGeplant\"></checkbox-clon></td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Geplant\">HO</div></td><td>Homeoffice geplant</td>\n          </tr>\n          <tr>\n            <td></td><td><checkbox-clon (CheckChanged)=\"SettingsHomeofficeCheckedChanged($event)\" [Value]=\"DB.Homeofficestatusvarianten.Freigabeanfrage\" [Checked]=\"DB.GesamtuebersichtSetting.ShowHomeofficeAnfrage\"></checkbox-clon></td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Freigabeanfrage\">HO</div></td><td>Homeoffice Anfrage</td>\n          </tr>\n          <tr>\n            <td></td><td><checkbox-clon (CheckChanged)=\"SettingsHomeofficeCheckedChanged($event)\" [Value]=\"DB.Homeofficestatusvarianten.Genehmigt\" [Checked]=\"DB.GesamtuebersichtSetting.ShowHomeofficeGenehmigt\"></checkbox-clon></td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Genehmigt\">HO</div></td><td>Homeoffice genehmigt</td>\n          </tr>\n        </table>\n        <table class=\"paddingtable\">\n          <ng-container *ngFor=\"let Standort of Pool.Standorteliste\">\n            <tr>\n              <td><checkbox-clon [Value]=\"Standort._id\" [Checked]=\"Standort.ShowInGesamtuebersicht\" (CheckChanged)=\"StandortCheckChanged($event)\"></checkbox-clon></td><td><ion-text color=\"schwarz\"><b>{{Standort.Standort}}</b></ion-text></td>\n            </tr>\n            <tr>\n              <td></td>\n              <td>\n                <table class=\"paddingtable\">\n                  <ng-container *ngFor=\"let Mitarbeiter of Pool.Mitarbeiterliste\">\n                    <tr *ngIf=\"Mitarbeiter.StandortID === Standort._id && Mitarbeiter.Archiviert === false\">\n                      <checkbox-clon [Value]=\"Mitarbeiter._id\" [Checked]=\"Mitarbeiter.ShowInGesamtuebersicht\" (CheckChanged)=\"MitarbeiterCheckChanged($event)\"></checkbox-clon><td>{{Mitarbeiter.Vorname}} {{Mitarbeiter.Name}}</td>\n                    </tr>\n                  </ng-container>\n                </table>\n\n              </td>\n            </tr>\n          </ng-container>\n        </table>\n        <br>\n        <br>\n        <br>\n        <br>\n        <br>\n        <br>\n      </div>\n    </div>\n  </div>\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n  </page-footer>\n</ion-footer>\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\" [ZIndex]=\"5000\"\n                [Dialogbreite]=\"400\"  [PositionY]=\"100\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"''\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\">\n</auswahl-dialog>\n\n<fi-mitarbeiter-auswahl *ngIf=\"ShowMitarbeiterauswahl\"\n                        [Titel]=\"MitarbeiterauswahlTitel\"\n                        [Dialogbreite]=\"600\" [ZIndex]=\"4000\"\n                        [Multiselect]=\"false\"\n                        [OnlyProjektmitarbeiter]=\"false\"\n                        Iconname=\"people-outline\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        (CancelClickedEvent)=\"ShowMitarbeiterauswahl = false\"\n                        (OkClickedEvent)=\"MitarbeiterauswahlOkButtonClicked($event)\"\n                        (StandortfilterClickedEvent)=\"MitarebiterStandortfilterClickedHandler()\"></fi-mitarbeiter-auswahl>\n\n\n\n\n\n";

/***/ }),

/***/ 82852:
/*!****************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-planung/common-urlaub-planung.page.html?ngResource ***!
  \****************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header class=\"ion-no-border\">\n  <page-header #PageHeader>\n    <page-header-menu (UrlaubMitarbeiterClicked)=\"MitarbeiterWechselnClicked()\"\n                      (UrlaubMitarbeiterMeClicked)=\"MitarbeiterMeWechselnClickedHandler()\" (JahrButtonClicked)=\"JahrButtonClickedHandler()\"></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n\n  <div class=\"contentkeeperdivclass\" *ngIf=\"Pool.Mitarbeiterdaten !== null\">\n\n\n\n    <div class=\"contentdivclass\">\n\n      <table style=\"width: 100%\">\n        <tr>\n          <td style=\"height: 20px;\"></td>\n        </tr>\n        <tr>\n          <td align=\"center\">\n\n            <table class=\"paddingsmalltable\">\n              <tr>\n                <td>\n                  <div  (click)=\"MonatBackButtonClicked()\"  class=\"monatedivclass\">\n                    <ion-icon name=\"caret-back-outline\" style=\"font-size: 20px\"></ion-icon>\n                  </div>\n                </td>\n                <td *ngFor=\"let Monat of DB.Monateliste; let Monatindex = index\">\n                  <div [style.color]=\"GetMonatButtonColor(Monatindex)\" (click)=\"MonatButtonClicked(Monatindex)\"  class=\"monatedivclass\">{{Monat}}</div>\n                </td>\n                <td>\n                  <div  (click)=\"MonatForwardButtonClicked()\"  class=\"monatedivclass\">\n                    <ion-icon name=\"caret-forward-outline\" style=\"font-size: 20px\"></ion-icon>\n                  </div>\n                </td>\n              </tr>\n            </table>\n\n          </td>\n        </tr>\n        <tr>\n          <td align=\"center\" valign=\"top\">\n\n            <table class=\"paddingtable\">\n              <tr>\n\n                <td style=\"width: 500px\" valign=\"top\">\n                  <urlaubsplanung-kalender\n                    [Jahr]=\"DB.CurrentJahr\"\n                    [Monatindex]=\"DB.FirstMonatIndex\"\n                    [AddUrlaubRunning]=\"AddUrlaubRunning\"\n                    [AddHomeofficerunning]=\"AddHomeofficeRunning\"\n                    [AddHalberUrlaubstagRunning]=\"AddHalberUrlaubstagRunning\"\n                    (ExternUrlaubstagClickedEvent)=\"ExternUrlaubstagClickedEventHandler($event)\"\n                    (AddUrlaubFinishedEvent)=\"AddUrlaubFinishedHandler()\"\n                    (AddHomeofficeFinishedEvent)=\"AddHomeofficeFinishedHandler()\"\n                    (FeiertagCrossedEvent)=\"FeiertagCrossedEventHandler($event)\"\n                    (FerientagCrossedEvent)=\"FerientagCrossedEventHandler($event)\">\n                  </urlaubsplanung-kalender>\n                </td>\n\n                <td style=\"width: 500px\" valign=\"top\">\n                  <urlaubsplanung-kalender\n                    [Jahr]=\"DB.CurrentJahr\"\n                    [ShowYear]=\"true\"\n                    [Monatindex]=\"DB.CurrentMonatindex\"\n                    [AddUrlaubRunning]=\"AddUrlaubRunning\"\n                    [AddHomeofficerunning]=\"AddHomeofficeRunning\"\n                    [AddHalberUrlaubstagRunning]=\"AddHalberUrlaubstagRunning\"\n                    (ExternUrlaubstagClickedEvent)=\"ExternUrlaubstagClickedEventHandler($event)\"\n                    (AddUrlaubFinishedEvent)=\"AddUrlaubFinishedHandler()\"\n                    (AddHomeofficeFinishedEvent)=\"AddHomeofficeFinishedHandler()\"\n                    (FeiertagCrossedEvent)=\"FeiertagCrossedEventHandler($event)\"\n                    (FerientagCrossedEvent)=\"FerientagCrossedEventHandler($event)\">\n                  </urlaubsplanung-kalender>\n                </td>\n\n                <td style=\"width: 500px\" valign=\"top\">\n                  <urlaubsplanung-kalender\n                    [Jahr]=\"DB.CurrentJahr\"\n                    [Monatindex]=\"DB.LastMonatIndex\"\n                    [AddUrlaubRunning]=\"AddUrlaubRunning\"\n                    [AddHomeofficerunning]=\"AddHomeofficeRunning\"\n                    [AddHalberUrlaubstagRunning]=\"AddHalberUrlaubstagRunning\"\n                    (ExternUrlaubstagClickedEvent)=\"ExternUrlaubstagClickedEventHandler($event)\"\n                    (AddUrlaubFinishedEvent)=\"AddUrlaubFinishedHandler()\"\n                    (AddHomeofficeFinishedEvent)=\"AddHomeofficeFinishedHandler()\"\n                    (FeiertagCrossedEvent)=\"FeiertagCrossedEventHandler($event)\"\n                    (FerientagCrossedEvent)=\"FerientagCrossedEventHandler($event)\">\n                  </urlaubsplanung-kalender>\n                </td>\n\n              </tr>\n            </table>\n\n          </td>\n\n        </tr>\n        <tr *ngIf=\"DB.CurrentUrlaub !== null\">\n          <td valign=\"top\">\n\n            <table style=\"width: 100%\">\n              <tr>\n                <td valign=\"top\" align=\"center\" style=\"width: 50%; padding: 4px;\">\n\n                  <table>\n                    <tr *ngIf=\"AddUrlaubRunning === false && AddHalberUrlaubstagRunning === false && AddHomeofficeRunning === false\">\n                      <td align=\"center\">\n                        <table class=\"paddingsmalltable\">\n                          <tr>\n                            <td align=\"center\">\n                              <ion-button [disabled]=\"DB.CountResturlaub() <= 0\" size=\"small\" (click)=\"AddUrlaub()\">Urlaubszeitspanne eintragen</ion-button>\n                            </td>\n                            <td align=\"center\">\n                              <ion-button [disabled]=\"DB.CountResturlaub() <= 0\" size=\"small\" (click)=\"AddHalbenUrlaubstag()\">Halben Urlaubstag eintragen</ion-button>\n                            </td>\n\n                          </tr>\n                        </table>\n                      </td>\n                    </tr>\n                    <tr *ngIf=\"AddHalberUrlaubstagRunning === true\">\n                      <td align=\"center\">\n                        <table class=\"paddingsmalltable\">\n                          <tr>\n                            <td>\n                              <div class=\"datumdivclass\">\n                                Bitte Datum für den halben Urlaubstag auswählen\n                              </div>\n                            </td>\n                            <td>\n                              <div class=\"datumcanceldivclass\" (click)=\"CancelDatumClicked()\">\n                                <ion-icon name=\"close-outline\" style=\"font-size: 36px\" color=\"weiss\"></ion-icon>\n                              </div>\n                            </td>\n                          </tr>\n                        </table>\n                      </td>\n                    </tr>\n                    <tr *ngIf=\"AddUrlaubRunning === true\">\n                      <td align=\"center\">\n                        <table class=\"paddingsmalltable\">\n                          <tr>\n                            <td>\n                              <!--Startdatum</td><td> -->\n                              <div class=\"datumdivclass\">\n                                {{this.DB.CurrentUrlaubzeitspanne !== null && DB.CurrentUrlaubzeitspanne.Startstempel !== null ? this.DB.CurrentUrlaubzeitspanne.Startstring : 'Bitte Startdatum im Kalender oben anklicken'}}\n                              </div>\n                            </td>\n                            <ng-container *ngIf=\"this.DB.CurrentUrlaubzeitspanne !== null && DB.CurrentUrlaubzeitspanne.Startstempel !== null\">\n                              <td style=\"width: 100px; text-align: center;\">bis zum</td>\n                              <td>\n                                <div class=\"datumdivclass\">\n                                  {{this.DB.CurrentUrlaubzeitspanne !== null && DB.CurrentUrlaubzeitspanne.Endestempel !== null ? this.DB.CurrentUrlaubzeitspanne.Endestempel : 'Bitte Endedatum im Kalender oben anklicken'}}\n                                </div>\n                              </td>\n                            </ng-container>\n\n                            <td>\n                              <div class=\"datumcanceldivclass\" (click)=\"CancelDatumClicked()\">\n                                <ion-icon name=\"close-outline\" style=\"font-size: 36px\" color=\"weiss\"></ion-icon>\n                              </div>\n                            </td>\n                          </tr>\n                          <tr>\n                          </tr>\n                        </table>\n\n                      </td>\n                    </tr>\n                    <tr *ngIf=\"AddHomeofficeRunning === false && AddUrlaubRunning === false && DB.CurrentUrlaub.Urlaubzeitspannen.length === 0\">\n                      <td align=\"center\">\n\n                        <table style=\"width: 520px;\" class=\"docinnertable\">\n                          <tr>\n                            <td style=\"text-align: center\">Momentan ist noch kein Urlaub eingetragen. Du hast {{DB.CountResturlaub()}} Urlaubstage.</td>\n                          </tr>\n                        </table>\n\n                      </td>\n                    </tr>\n                    <tr  *ngIf=\"AddUrlaubRunning === false && AddHomeofficeRunning === false && DB.CurrentUrlaub.Urlaubzeitspannen.length > 0\">\n                      <td align=\"center\">\n\n                        <table class=\"docinnertablesmall\">\n                          <tr>\n                            <td style=\"font-weight: bold;\">Von</td>\n                            <td style=\"font-weight: bold;\">Bis</td>\n                            <td style=\"font-weight: bold; text-align: center\">Tage</td>\n                            <td style=\"font-weight: bold; text-align: center;\">BU</td>\n                            <td style=\"font-weight: bold; width: 200px;\">Stellvertretung</td>\n                            <td style=\"font-weight: bold;\">Status</td>\n                            <td style=\"font-weight: bold;\" colspan=\"3\">Statusmeldung</td>\n                            <!--\n                            <td style=\"width: 30px\"></td>\n                            <td style=\"width: 30px\"></td>\n                            -->\n                          </tr>\n                          <ng-container *ngIf=\"DB.CurrentUrlaub.Urlaubzeitspannen.length > 0\">\n                            <tr *ngFor=\"let Zeitspanne of DB.CurrentUrlaub.Urlaubzeitspannen\">\n                              <td>{{GetDatum(Zeitspanne.Startstempel)}}</td>\n                              <td>{{GetDatum(Zeitspanne.Endestempel)}}</td>\n                              <td style=\"text-align: center\">{{Zeitspanne.Tageanzahl}}</td>\n                              <td>\n                                <checkbox-clon *ngIf=\"Zeitspanne.Status === DB.Urlaubstatusvarianten.Geplant\" [Checked]=\"Zeitspanne.Betriebsurlaub\" (CheckChanged)=\"BetriebsurlaubCheckedChanged($event, Zeitspanne)\"></checkbox-clon>\n                                <div *ngIf=\"Zeitspanne.Betriebsurlaub === true && Zeitspanne.Status === DB.Urlaubstatusvarianten.Vertreterfreigabe\" style=\"width: 20px; height: 20px; background: #307ac1; border-radius: 100%\"></div>\n                              </td>\n                              <td>\n                                <ng-container *ngIf=\"(Zeitspanne.Status === DB.Urlaubstatusvarianten.Geplant || DB.CheckVertretungIsAbgelehnt(Zeitspanne) === true)\n                                && Zeitspanne.Betriebsurlaub === false\">\n                                  <div (click)=\"StellvertreterFestlegenClicked(Zeitspanne)\" class=\"festlegenbuttondiv\" style=\"font-size: 12px; font-weight: bold;\">\n                                    <span *ngIf=\"Zeitspanne.UrlaubsvertreterIDListe.length === 0\">\n                                      FESTLEGEN\n                                    </span>\n                                    <table *ngIf=\"Zeitspanne.UrlaubsvertreterIDListe.length !== 0\" class=\"nobordersmalltable\">\n                                      <tr *ngFor=\"let MitarbeiterID of Zeitspanne.UrlaubsvertreterIDListe\">\n                                        <td>{{GetStellvertretername(MitarbeiterID)}}</td>\n                                      </tr>\n                                    </table>\n                                  </div>\n                                  <!--\n                                  <ion-button  size=\"small\" color=\"grau\" (click)=\"StellvertreterFestlegenClicked(Zeitspanne)\">Festlegen</ion-button>\n                                  -->\n                                </ng-container>\n                                <ng-container  *ngIf=\"Zeitspanne.Status !== DB.Urlaubstatusvarianten.Geplant && DB.CheckVertretungIsAbgelehnt(Zeitspanne) === false\">\n\n                                  <table *ngIf=\"Zeitspanne.UrlaubsvertreterIDListe.length !== 0\" class=\"nobordersmalltable\">\n                                    <tr *ngFor=\"let MitarbeiterID of Zeitspanne.UrlaubsvertreterIDListe\">\n                                      <td>{{GetStellvertretername(MitarbeiterID)}}</td>\n                                    </tr>\n                                  </table>\n\n                                </ng-container>\n                              </td>\n                              <td align=\"center\">\n                                <div (click)=\"StatusClickedHandler(Zeitspanne)\" class=\"legendenewdivclass\"\n                                     [style.cursor]=\"(Pool.Mitarbeiterdaten.Planeradministrator === true || Pool.Mitarbeiterdaten.Urlaubsfreigaben === true) ? 'pointer' : 'default'\"\n                                     [style.background]=\"DB.GetUrlaubStatuscolor(Zeitspanne)\">\n                                  <!--\n                                  <div class=\"legendeinnerdivclass\" [style.background]=\"DB.GetUrlaubStatuscolor(Zeitspanne)\"></div>\n                                  <div class=\"legendeinnerdivclass\" [style.background]=\"DB.GetUrlaubStatuscolorSplit(Zeitspanne, true)\"></div>\n                                  -->\n                                </div>\n                              </td>\n                              <td style=\"width: 450px;\" [innerHTML]=\"GetPlanungmeldung(Zeitspanne)\"></td>\n                              <td>\n                                <ion-button size=\"small\" color=\"grau\" (click)=\"UrlaubSuchen(Zeitspanne)\"><ion-icon name=\"search\" slot=\"icon-only\" style=\"font-size: 16px\"></ion-icon></ion-button>\n                              </td>\n                              <td><ion-button size=\"small\" color=\"rot\" (click)=\"UrlaubLoeschen(Zeitspanne)\" [disabled]=\"CheckUrlaubLoschenEnabled(Zeitspanne) === false\"><ion-icon name=\"trash\" slot=\"icon-only\" style=\"font-size: 16px\"></ion-icon></ion-button></td>\n                            </tr>\n                          </ng-container>\n                          <ng-container *ngIf=\"DB.CurrentUrlaub.Urlaubzeitspannen.length === 0\">\n                            <tr>\n                              <td colspan=\"8\"></td>\n                            </tr>\n                          </ng-container>\n                          <tr>\n                            <td colspan=\"2\" style=\"text-align: right; font-weight: bold\">Resturlaub</td>\n                            <td style=\"text-align: center\">{{DB.CountResturlaub()}}</td>\n                            <td colspan=\"6\"></td>\n                          </tr>\n                          <tr>\n                            <td align=\"center\" colspan=\"9\">\n                              <table style=\"width: 100%\" class=\"nobordertable\">\n                                <tr>\n                                  <td style=\"width: 33%; font-size: 80%\">BU = Betriebsurlaub</td>\n                                  <td style=\"width: 33%\" align=\"center\">\n                                    <ion-button [disabled]=\"CheckUrlaubUpdatesAvailable() === false\"  size=\"small\" (click)=\"DB.UpdateVertreteranfragen()\">Aktualisierung senden</ion-button>\n                                  </td>\n                                  <td style=\"width: 33%\"></td>\n                                </tr>\n                              </table>\n                            </td>\n                          </tr>\n                        </table>\n\n                      </td>\n                    </tr>\n\n                  </table>\n\n\n\n\n                </td>\n                <td valign=\"top\" align=\"center\" style=\"width: 50%; padding: 4px;\">\n\n                  <table>\n                    <tr *ngIf=\"AddUrlaubRunning === false && AddHomeofficeRunning === false\">\n                      <td align=\"center\">\n\n                        <table class=\"paddingsmalltable\">\n                          <tr>\n                            <td align=\"center\">\n                              <ion-button [disabled]=\"DB.CountHomeoffice() <= 0\" size=\"small\" (click)=\"AddHomeofficeStart()\">Homeoffice eintragen</ion-button>\n                            </td>\n                          </tr>\n                        </table>\n\n                      </td>\n                    </tr>\n                    <tr *ngIf=\"AddHomeofficeRunning === true\">\n                      <td>\n\n                        <table class=\"paddingsmalltable\">\n                          <tr>\n                            <td>\n                              <div class=\"datumdivclass\">\n                                <ng-container *ngIf=\"DB.CurrentHomeofficecounter === 0\">\n                                  Bitte Tage einzeln klicken um Homeoffice einzutragen.\n                                </ng-container>\n                                <ng-container *ngIf=\"DB.CurrentHomeofficecounter !== 0\">\n                                  {{DB.CurrentHomeofficecounter}} Homeoffice {{DB.CurrentHomeofficecounter === 1 ? 'Tag' : 'Tage'}}\n                                </ng-container>\n                              </div>\n                            </td>\n                            <td align=\"center\">\n                              <div class=\"datumokdivclass\" (click)=\"SaveHomeofficeEventHandler()\">\n                                <table>\n                                  <tr>\n                                    <td style=\"color: white; font-size: 120%\"><b>Fertig</b></td>\n                                    <td><ion-icon name=\"checkmark-outline\" style=\"font-size: 36px\" color=\"weiss\"></ion-icon></td>\n                                  </tr>\n                                </table>\n\n                              </div>\n                            </td>\n                          </tr>\n                        </table>\n\n                      </td>\n                    </tr>\n                    <tr *ngIf=\"AddHomeofficeRunning === false && AddUrlaubRunning === false && DB.CurrentUrlaub.Homeofficezeitspannen.length === 0\">\n                      <td align=\"center\">\n\n                        <table style=\"width: 520px;\" class=\"docinnertable\">\n                          <tr>\n                            <td style=\"text-align: center\">Momentan ist noch kein Homeoffice eingetragen.</td>\n                            <!-- Du hast {{DB.CountHomeoffice()}} Homeofficetage. -->\n                          </tr>\n                        </table>\n\n                      </td>\n                    </tr>\n                    <tr  *ngIf=\"AddUrlaubRunning === false && AddHomeofficeRunning === false && DB.CurrentUrlaub.Homeofficezeitspannen.length > 0\">\n                      <td align=\"center\">\n\n                        <table class=\"docinnertable\">\n                          <tr>\n                            <td style=\"font-weight: bold; text-align: left; width: 660px;\">Tage</td>\n                            <td style=\"font-weight: bold; text-align: center;\">Status</td>\n                            <td style=\"font-weight: bold; text-align: center; width: 50px;\"></td>\n                          </tr>\n                          <ng-container *ngIf=\"DB.CountHomeGenehmigt() > 0\">\n                          <tr>\n                            <td>\n                              <table class=\"nobordertable\" style=\"width: 100%;\">\n                                <ng-container *ngFor=\"let Zeitspannemonatsliste of DB.GetHomeofficezeitspannenByStataus(DB.Homeofficestatusvarianten.Genehmigt); let Monatindex = index\">\n                                  <ng-container *ngIf=\"Zeitspannemonatsliste.length > 0\">\n                                    <tr>\n                                      <td style=\"width: 70px; font-weight: bold;\" valign=\"top\">\n                                        <div class=\"monatlableclass\">\n                                          {{DB.Monateliste[Monatindex]}}\n                                        </div>\n                                      </td>\n                                      <td style=\"width: auto\">\n                                        <div style=\"display: flex; flex-direction: row; flex-wrap: wrap; width: 100%; min-height: 30px;\">\n                                          <div *ngFor=\"let Zeitspanne of Zeitspannemonatsliste; let Zeitspanneindex = index\" style=\"width: 114px;\">\n                                            <table class=\"nobordertable\">\n                                              <tr>\n                                                <td>{{Zeitspanne.Startstring}}</td>\n                                                <td *ngIf=\"Pool.Mitarbeiterdaten.Homeofficefreigaben === true\"><checkbox-clon [Checked]=\"Zeitspanne.Checked\" (CheckChanged)=\"ZeitspanneCheckChanged($event, Zeitspanne)\"></checkbox-clon></td>\n                                                <td *ngIf=\"Zeitspanneindex < Zeitspannemonatsliste.length - 1\">|</td>\n                                              </tr>\n                                            </table>\n                                          </div>\n                                        </div>\n                                      </td>\n                                    </tr>\n\n                                  </ng-container>\n                                </ng-container>\n                              </table>\n\n                            </td>\n                            <td align=\"center\">\n                              <div class=\"legendedivclass\" [style.background]=\"DB.GetHomeofficeStatuscolor(DB.Homeofficestatusvarianten.Genehmigt)\">HO</div>\n                            </td>\n                            <td>\n                              <ion-button *ngIf=\"Pool.Mitarbeiterdaten.Homeofficefreigaben === true\" size=\"small\" color=\"rot\" (click)=\"DB.HomeofficeLoeschen(DB.Homeofficestatusvarianten.Genehmigt)\" [disabled]=\"CheckHomeofficeLoschenEnabled(DB.Homeofficestatusvarianten.Genehmigt) === false\"><ion-icon name=\"trash\" slot=\"icon-only\" style=\"font-size: 16px\"></ion-icon></ion-button>\n                            </td>\n                          </tr>\n                          </ng-container>\n                          <ng-container *ngIf=\"DB.CountHomeAbgelehnt() > 0\">\n                          <tr>\n                            <td>\n                              <table class=\"nobordertable\" style=\"width: 100%;\">\n                                <ng-container *ngFor=\"let Zeitspannemonatsliste of DB.GetHomeofficezeitspannenByStataus(DB.Homeofficestatusvarianten.Abgelehnt); let Monatindex = index\">\n                                  <ng-container *ngIf=\"Zeitspannemonatsliste.length > 0\">\n                                    <tr>\n                                      <td style=\"width: 70px; font-weight: bold;\" valign=\"top\">\n                                        <div class=\"monatlableclass\">\n                                          {{DB.Monateliste[Monatindex]}}\n                                        </div>\n                                      </td>\n                                      <td style=\"width: auto\">\n                                        <div style=\"display: flex; flex-direction: row; flex-wrap: wrap; width: 100%; min-height: 30px;\">\n                                          <div *ngFor=\"let Zeitspanne of Zeitspannemonatsliste; let Zeitspanneindex = index\" style=\"width: 114px;\">\n                                            <table class=\"nobordertable\">\n                                              <tr>\n                                                <td>{{Zeitspanne.Startstring}}</td>\n                                                <td><checkbox-clon [Checked]=\"Zeitspanne.Checked\" (CheckChanged)=\"ZeitspanneCheckChanged($event, Zeitspanne)\"></checkbox-clon></td>\n                                                <td *ngIf=\"Zeitspanneindex < Zeitspannemonatsliste.length - 1\">|</td>\n                                              </tr>\n                                            </table>\n                                          </div>\n                                        </div>\n                                      </td>\n                                    </tr>\n\n                                  </ng-container>\n                                </ng-container>\n                              </table>\n                            </td>\n                            <td align=\"center\">\n                              <div class=\"legendedivclass\" [style.background]=\"DB.GetHomeofficeStatuscolor(DB.Homeofficestatusvarianten.Abgelehnt)\">HO</div>\n                            </td>\n                            <td>\n                              <ion-button size=\"small\" color=\"rot\" (click)=\"DB.HomeofficeLoeschen(DB.Homeofficestatusvarianten.Abgelehnt)\"  [disabled]=\"CheckHomeofficeLoschenEnabled(DB.Homeofficestatusvarianten.Abgelehnt) === false\"><ion-icon name=\"trash\" slot=\"icon-only\" style=\"font-size: 16px\"></ion-icon></ion-button>\n                            </td>\n                          </tr>\n                          </ng-container>\n                          <ng-container *ngIf=\"DB.CountHomeFreigbeanfragen() > 0\">\n                            <tr>\n                              <td>\n\n                                <table class=\"nobordertable\" style=\"width: 100%;\">\n                                  <ng-container *ngFor=\"let Zeitspannemonatsliste of DB.GetHomeofficezeitspannenByStataus(DB.Homeofficestatusvarianten.Freigabeanfrage); let Monatindex = index\">\n                                      <ng-container *ngIf=\"Zeitspannemonatsliste.length > 0\">\n                                        <tr>\n                                          <td style=\"width: 70px; font-weight: bold;\" valign=\"top\">\n                                            <div class=\"monatlableclass\">\n                                              {{DB.Monateliste[Monatindex]}}\n                                            </div>\n                                          </td>\n                                          <td style=\"width: auto\">\n                                            <div style=\"display: flex; flex-direction: row; flex-wrap: wrap; width: 100%; min-height: 30px;\">\n                                              <div *ngFor=\"let Zeitspanne of Zeitspannemonatsliste; let Zeitspanneindex = index\" style=\"width: 114px;\">\n                                                <table class=\"nobordertable\">\n                                                  <tr>\n                                                    <td>{{Zeitspanne.Startstring}}</td>\n                                                    <td *ngIf=\"Pool.Mitarbeiterdaten.Homeofficefreigaben === true\"><checkbox-clon [Checked]=\"Zeitspanne.Checked\" (CheckChanged)=\"ZeitspanneCheckChanged($event, Zeitspanne)\"></checkbox-clon></td>\n                                                    <td *ngIf=\"Zeitspanneindex < Zeitspannemonatsliste.length - 1\">|</td>\n                                                  </tr>\n                                                </table>\n                                              </div>\n                                            </div>\n                                          </td>\n                                        </tr>\n\n                                      </ng-container>\n                                    </ng-container>\n                                  </table>\n\n                              </td>\n                              <td align=\"center\">\n                                <div class=\"legendedivclass\" [style.background]=\"DB.GetHomeofficeStatuscolor(DB.Homeofficestatusvarianten.Freigabeanfrage)\">HO</div>\n                              </td>\n                              <td><ion-button *ngIf=\"Pool.Mitarbeiterdaten.Homeofficefreigaben === true\" size=\"small\" color=\"rot\" (click)=\"DB.HomeofficeLoeschen(DB.Homeofficestatusvarianten.Freigabeanfrage)\" [disabled]=\"CheckHomeofficeLoschenEnabled(DB.Homeofficestatusvarianten.Freigabeanfrage) === false\"><ion-icon name=\"trash\" slot=\"icon-only\" style=\"font-size: 16px\"></ion-icon></ion-button></td>\n                            </tr>\n                          </ng-container>\n                          <ng-container *ngIf=\"DB.CountHomeGeplant() > 0\">\n                            <tr>\n                              <td>\n                                <table class=\"nobordertable\" style=\"width: 100%;\">\n                                  <ng-container *ngFor=\"let Zeitspannemonatsliste of DB.GetHomeofficezeitspannenByStataus(DB.Homeofficestatusvarianten.Geplant); let Monatindex = index\">\n                                    <ng-container *ngIf=\"Zeitspannemonatsliste.length > 0\">\n                                      <tr>\n                                        <td style=\"width: 70px; font-weight: bold;\" valign=\"top\">\n                                          <div class=\"monatlableclass\">\n                                            {{DB.Monateliste[Monatindex]}}\n                                          </div>\n                                        </td>\n                                        <td style=\"width: auto\">\n                                          <div style=\"display: flex; flex-direction: row; flex-wrap: wrap; width: 100%; min-height: 30px;\">\n                                            <div *ngFor=\"let Zeitspanne of Zeitspannemonatsliste; let Zeitspanneindex = index\" style=\"width: 114px;\">\n                                              <table class=\"nobordertable\">\n                                                <tr>\n                                                  <td>{{Zeitspanne.Startstring}}</td>\n                                                  <td><checkbox-clon [Checked]=\"Zeitspanne.Checked\" (CheckChanged)=\"ZeitspanneCheckChanged($event, Zeitspanne)\"></checkbox-clon></td>\n                                                  <td *ngIf=\"Zeitspanneindex < Zeitspannemonatsliste.length - 1\">|</td>\n                                                </tr>\n                                              </table>\n                                            </div>\n                                          </div>\n                                        </td>\n                                      </tr>\n\n                                    </ng-container>\n                                  </ng-container>\n                                </table>\n\n                              </td>\n                              <td align=\"center\">\n                                <div class=\"legendedivclass\" [style.background]=\"DB.GetHomeofficeStatuscolor(DB.Homeofficestatusvarianten.Geplant)\">HO</div>\n                              </td>\n                              <td>\n                                <ion-button size=\"small\" color=\"rot\" (click)=\"DB.HomeofficeLoeschen(DB.Homeofficestatusvarianten.Geplant)\" [disabled]=\"CheckHomeofficeLoschenEnabled(DB.Homeofficestatusvarianten.Geplant) === false\"><ion-icon name=\"trash\" slot=\"icon-only\" style=\"font-size: 16px\"></ion-icon></ion-button>\n                              </td>\n                            </tr>\n                          </ng-container>\n\n                          <!--\n                          <tr>\n                            <td colspan=\"3\" style=\"text-align: left;\">\n                              <span style=\"font-weight: bold;\">Resthomeoffice</span> {{DB.CountHomeoffice()}} Tage</td>\n                          </tr>\n                          -->\n                          <tr>\n                            <td align=\"center\" colspan=\"8\">\n                              <ion-button [disabled]=\"CheckHomeofficeUpdatesAvailable() === false\"  size=\"small\" (click)=\"DB.UpdateHomeofficefreigabeanfragen()\">Aktualisierung senden</ion-button>\n                            </td>\n                          </tr>\n\n\n                        </table>\n\n                      </td>\n                    </tr>\n                  </table>\n\n                </td>\n              </tr>\n            </table>\n\n\n          </td>\n        </tr>\n\n      </table>\n\n    </div>\n\n    <div class=\"legendekeeperdivclass\" [style.height.px]=\"Legendehoehe\" [style.width.px]=\"Legendebreite\" [style.right.px]=\"LegendeVisible ? 0 : -(Legendebreite - 14)\">\n\n      <table>\n        <tr>\n          <td>\n            <div (click)=\"LegendeVisible = !LegendeVisible\" class=\"legendebuttonclass\" [style.height.px]=\"Legendehoehe\">\n              <ion-icon color=\"weiss\" [name]=\"LegendeVisible ? 'caret-forward-outline' : 'caret-back-outline'\"></ion-icon>\n            </div>\n          </td>\n          <td valign=\"top\">\n\n            <table *ngIf=\"Pool.Mitarbeitersettings !== null\" class=\"paddingtable\">\n              <ng-container *ngIf=\"DB.Laendercode === 'DE'\">\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFeiertage_DE\" (CheckChanged)=\"AnsichtFeiertageCheckChanged($event, 'DE')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Feiertage_DE\">\n                    <ion-icon name=\"flag-outline\" color=\"weiss\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Feiertage Deutschland</td>\n                </tr>\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFerientage_DE\" (CheckChanged)=\"AnsichtFerientageCheckChanged($event, 'DE')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Ferien_DE\">\n                    <ion-icon name=\"school-outline\" color=\"weiss\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Schulferien Deutschland</td>\n                </tr>\n              </ng-container>\n              <ng-container>\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFeiertage_BG\" (CheckChanged)=\"AnsichtFeiertageCheckChanged($event,  'BG')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Feiertage_BG\">\n                    <ion-icon name=\"flag-outline\" color=\"gelb\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Feiertage Bulgarien</td>\n                </tr>\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFerientage_BG\" (CheckChanged)=\"AnsichtFerientageCheckChanged($event, 'BG')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Ferien_BG\">\n                    <ion-icon name=\"school-outline\" color=\"gelb\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Schulferien Bulgarien</td>\n                </tr>\n              </ng-container>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Geplant\"></div></td><td>geplanter Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreteranfrage\"></div></td><td>Vertretung angefragt</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreterfreigabe\"></div></td><td>Genehmigungsanfrage Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreterablehnung\"></div></td><td>Vertretung wurde abgelehnt</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Genehmigt\"></div></td><td>Genehmigter Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td>\n                <td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Abgelehnt\"></div></td><td>Abgelehnter Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Geplant\">HO</div></td><td>geplantes Homeoffice</td>\n              </tr>\n              <tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Freigabeanfrage\">HO</div></td><td>Homeoffice angefragt</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Genehmigt\">HO</div></td><td>Homeoffice genehmigt</td>\n              </tr>\n              <tr>\n                <td>\n                </td>\n                <td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Abgelehnt\">HO</div></td><td>Homeoffice abgelehnt</td>\n              </tr>\n\n\n              <tr *ngFor=\"let Urlaub of DB.UrlaublisteExtern; let i = index\">\n                <td>\n                  <checkbox-clon [Checked]=\"DB.CheckDisplayExternenUrlaub(Urlaub.MitarbeiterIDExtern)\" (CheckChanged)=\"DisplayExternCheckChanged($event, Urlaub, i)\" [Enabled]=\"Urlaub.Urlaubzeitspannen.length > 0\"></checkbox-clon>\n                </td>\n                <td><div class=\"legendeexterndivclass\">{{Urlaub.NameKuerzel}}</div></td><td>{{Urlaub.NameExtern}} {{Urlaub.Text}}</td>\n              </tr>\n              <tr>\n                <td colspan=\"3\" style=\"height: 20px\"></td>\n              </tr>\n              <tr>\n                <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.ShowHomeoffice\" (CheckChanged)=\"ShowHomeofficeChanged($event)\"></checkbox-clon></td>\n                <td colspan=\"2\">Homeoffice Einträge anzeigen</td>\n              </tr>\n            </table>\n\n          </td>\n        </tr>\n      </table>\n\n    </div>\n\n  </div>\n\n\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n    <table style=\"width: 100%;\" *ngIf=\"Pool.Appeinstellungen !== null\">\n      <tr>\n        <td align=\"left\" style=\"width: 50%\">\n          <table class=\"paddingtable\">\n            <tr>\n              <td *ngIf=\"Flagsource !== ''\"><img [src]=\"Flagsource\"></td>\n              <td *ngIf=\"Message    !== ''\" style=\"height: 40px; font-size: 110%; font-weight: bold; color: white; text-align: left\">{{Message}}</td>\n            </tr>\n          </table>\n        </td>\n        <td style=\"width: 50%\">\n          <div *ngIf=\"Pool.Appeinstellungen.DebugNoExternalEmail\" style=\"padding: 6px; text-align: center; border-radius: 4px; background: red; color: white; font-weight: bold; width: 400px;\">Keine externen Email senden</div>\n        </td>\n      </tr>\n    </table>\n  </page-footer>\n</ion-footer>\n\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\" [ZIndex]=\"5000\"\n                [Dialogbreite]=\"400\"  [PositionY]=\"100\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"''\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\">\n</auswahl-dialog>\n\n<fi-mitarbeiter-auswahl *ngIf=\"ShowMitarbeiterauswahl\"\n                        [Titel]=\"MitarbeiterauswahlTitel\"\n                        [Dialogbreite]=\"600\" [ZIndex]=\"4000\"\n                        [Multiselect]=\"MitarbeiterMultiselect\"\n                        [OnlyProjektmitarbeiter]=\"false\"\n                        Iconname=\"people-outline\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        (CancelClickedEvent)=\"ShowMitarbeiterauswahl = false\"\n                        (OkClickedEvent)=\"MitarbeiterauswahlOkButtonClicked($event)\"\n                        (StandortfilterClickedEvent)=\"MitarebiterStandortfilterClickedHandler()\"></fi-mitarbeiter-auswahl>\n\n";

/***/ }),

/***/ 2232:
/*!**********************************************************************************************!*\
  !*** ./src/app/pages/common-urlaub-uebersicht/common-urlaub-uebersicht.page.html?ngResource ***!
  \**********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header class=\"ion-no-border\">\n  <page-header #PageHeader>\n    <page-header-menu (UrlaubMitarbeiterClicked)=\"MitarbeiterWechselnClicked()\"\n                      (UrlaubMitarbeiterMeClicked)=\"UrlaubMitarbeiterMeClickedHandler()\"\n                      (JahrButtonClicked)=\"JahrButtonClickedHandler()\"></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n\n  <div class=\"contentdivclass\">\n\n    <table style=\"width: 100%\">\n      <tr>\n        <td style=\"height: 20px;\"></td>\n      </tr>\n      <tr>\n        <td align=\"center\">\n\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td>\n                <div [style.color]=\"Ansichtvariante === Ansichtenvarinaten.Gesamtjahr ? 'orange' : 'black'\" (click)=\"JahrButtonClicked()\"  class=\"monatedivclass\">Gesamtjahr {{DB.CurrentJahr}}</div>\n              </td>\n              <td>\n                <div [style.color]=\"Ansichtvariante === Ansichtenvarinaten.HalbjahrEins ? 'orange' : 'black'\" (click)=\"HalbjahrEinsButtonClicked()\"  class=\"monatedivclass\">1. Halbjahr {{DB.CurrentJahr}}</div>\n              </td>\n              <td>\n                <div [style.color]=\"Ansichtvariante === Ansichtenvarinaten.HalbjahrZwei ? 'orange' : 'black'\" (click)=\"HalbjahrZweiButtonClicked()\"  class=\"monatedivclass\">2. Halbjahr {{DB.CurrentJahr}}</div>\n              </td>\n            </tr>\n          </table>\n\n        </td>\n      </tr>\n    </table>\n\n    <ng-container *ngIf=\"Ansichtvariante === Ansichtenvarinaten.Gesamtjahr\">\n\n      <table style=\"width: 100%\" class=\"paddingsmalltable\">\n        <tr *ngFor=\"let Zeile of Monateliste_Gesamtjahr; let zeileindex = index\">\n          <td style=\"width: 20px\"></td>\n          <td style=\"width: 16%; height: inherit\" valign=\"top\" *ngFor=\"let Monat of Zeile; let spalteindex = index\">\n\n            <urlaubsplanung-kalender\n              [Jahr]=\"DB.CurrentJahr\"\n              [Monatindex]=\"6 * zeileindex + spalteindex\"\n              (FeiertagCrossedEvent)=\"FeiertagCrossedEventHandler($event)\" (FerientagCrossedEvent)=\"FerientagCrossedEventHandler($event)\">\n            </urlaubsplanung-kalender>\n\n          </td>\n          <td style=\"width: 20px\"></td>\n        </tr>\n      </table>\n\n    </ng-container>\n\n    <ng-container *ngIf=\"Ansichtvariante === Ansichtenvarinaten.HalbjahrEins\">\n\n      <table style=\"width: 100%\" class=\"paddingsmalltable\">\n        <tr>\n          <td style=\"width: 20px\"></td>\n          <td style=\"width: 16%; height: inherit\" valign=\"top\" *ngFor=\"let Monat of Monateliste_HalbjahrEins; let monatindex = index\">\n\n            <urlaubsplanung-kalender\n              [Jahr]=\"DB.CurrentJahr\"\n              [Monatindex]=\"monatindex\"\n              (FeiertagCrossedEvent)=\"FeiertagCrossedEventHandler($event)\" (FerientagCrossedEvent)=\"FerientagCrossedEventHandler($event)\">\n            </urlaubsplanung-kalender>\n\n          </td>\n          <td style=\"width: 20px\"></td>\n        </tr>\n      </table>\n\n    </ng-container>\n\n    <ng-container *ngIf=\"Ansichtvariante === Ansichtenvarinaten.HalbjahrZwei\">\n\n      <table style=\"width: 100%\" class=\"paddingsmalltable\">\n        <tr>\n          <td style=\"width: 20px\"></td>\n          <td style=\"width: 16%; height: inherit\" valign=\"top\" *ngFor=\"let Monat of Monateliste_HalbjahrZwei; let monatindex = index\">\n\n            <urlaubsplanung-kalender\n              [Jahr]=\"DB.CurrentJahr\"\n              [Monatindex]=\"monatindex + 6\"\n              (FeiertagCrossedEvent)=\"FeiertagCrossedEventHandler($event)\" (FerientagCrossedEvent)=\"FerientagCrossedEventHandler($event)\">\n            </urlaubsplanung-kalender>\n\n          </td>\n          <td style=\"width: 20px\"></td>\n        </tr>\n      </table>\n\n    </ng-container>\n\n\n    <div class=\"legendekeeperdivclass\" [style.height.px]=\"Legendehoehe\" [style.width.px]=\"Legendebreite\" [style.right.px]=\"LegendeVisible ? 0 : -(Legendebreite - 14)\">\n\n      <table>\n        <tr>\n          <td>\n            <div (click)=\"LegendeVisible = !LegendeVisible\" class=\"legendebuttonclass\" [style.height.px]=\"Legendehoehe\">\n              <ion-icon color=\"weiss\" [name]=\"LegendeVisible ? 'caret-forward-outline' : 'caret-back-outline'\"></ion-icon>\n            </div>\n          </td>\n          <td valign=\"top\">\n\n            <table *ngIf=\"Pool.Mitarbeitersettings !== null\" class=\"paddingtable\">\n              <ng-container *ngIf=\"DB.Laendercode === 'DE'\">\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFeiertage_DE\" (CheckChanged)=\"AnsichtFeiertageCheckChanged($event, 'DE')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Feiertage_DE\">\n                    <ion-icon name=\"flag-outline\" color=\"weiss\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Feiertage Deutschland</td>\n                </tr>\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFerientage_DE\" (CheckChanged)=\"AnsichtFerientageCheckChanged($event, 'DE')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Ferien_DE\">\n                    <ion-icon name=\"school-outline\" color=\"weiss\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Schulferien Deutschland</td>\n                </tr>\n              </ng-container>\n              <ng-container>\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFeiertage_BG\" (CheckChanged)=\"AnsichtFeiertageCheckChanged($event,  'BG')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Feiertage_BG\">\n                    <ion-icon name=\"flag-outline\" color=\"gelb\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Feiertage Bulgarien</td>\n                </tr>\n                <tr>\n                  <td><checkbox-clon [Checked]=\"DB.ShowFerientage_BG\" (CheckChanged)=\"AnsichtFerientageCheckChanged($event, 'BG')\"></checkbox-clon></td><td>\n                  <div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Ferien_BG\">\n                    <ion-icon name=\"school-outline\" color=\"gelb\" style=\"font-size: 18px\"></ion-icon>\n                  </div>\n                </td><td>Schulferien Bulgarien</td>\n                </tr>\n              </ng-container>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Geplant\"></div></td><td>geplanter Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreteranfrage\"></div></td><td>Vertretung angefragt</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreterfreigabe\"></div></td><td>Urlaub mit Vertreterfreigabe</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Vertreterablehnung\"></div></td><td>Vertretung wurde abgelehnt</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Genehmigt\"></div></td><td>Genehmigter Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td>\n                <td><div class=\"legendedivclass\" [style.background]=\"DB.Urlaubsfaben.Abgelehnt\"></div></td><td>Abgelehnter Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Geplant\">H</div></td><td>geplantes Homeoffice</td>\n              </tr>\n              <tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Freigabeanfrage\">H</div></td><td>Homeoffice Freigabe angefragt</td>\n              </tr>\n              <tr>\n                <td>\n                </td><td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Genehmigt\">H</div></td><td>Genehmigter Urlaub</td>\n              </tr>\n              <tr>\n                <td>\n                </td>\n                <td><div class=\"legendedivclass\" [style.background]=\"DB.Homeofficefarben.Abgelehnt\">H</div></td><td>Abgelehnter Urlaub</td>\n              </tr>\n              <tr *ngFor=\"let Urlaub of DB.UrlaublisteExtern; let i = index\">\n                <td>\n                  <checkbox-clon [Checked]=\"DB.CheckDisplayExternenUrlaub(Urlaub.MitarbeiterIDExtern)\" (CheckChanged)=\"DisplayExternCheckChanged($event, Urlaub, i)\" [Enabled]=\"Urlaub.Urlaubzeitspannen.length > 0\"></checkbox-clon>\n                </td>\n                <td><div class=\"legendeexterndivclass\">{{Urlaub.NameKuerzel}}</div></td><td>{{Urlaub.NameExtern}} {{Urlaub.Text}}</td>\n              </tr>\n            </table>\n\n          </td>\n        </tr>\n      </table>\n\n    </div>\n  </div>\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n    <table style=\"width: 100%;\">\n      <tr>\n        <td align=\"left\">\n          <table class=\"paddingtable\">\n            <tr>\n              <td *ngIf=\"Flagsource !== ''\"><img [src]=\"Flagsource\"></td>\n              <td *ngIf=\"Message    !== ''\" style=\"height: 40px; font-size: 110%; font-weight: bold; color: white; text-align: left\">{{Message}}</td>\n            </tr>\n          </table>\n        </td>\n      </tr>\n    </table>\n  </page-footer>\n</ion-footer>\n\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\" [ZIndex]=\"5000\"\n                [Dialogbreite]=\"400\"  [PositionY]=\"100\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"''\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\">\n</auswahl-dialog>\n\n<fi-mitarbeiter-auswahl *ngIf=\"ShowMitarbeiterauswahl\"\n                        [Titel]=\"MitarbeiterauswahlTitel\"\n                        [Dialogbreite]=\"600\" [ZIndex]=\"4000\"\n                        [Multiselect]=\"false\"\n                        [OnlyProjektmitarbeiter]=\"false\"\n                        Iconname=\"people-outline\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        (CancelClickedEvent)=\"ShowMitarbeiterauswahl = false\"\n                        (OkClickedEvent)=\"MitarbeiterauswahlOkButtonClicked($event)\"\n                        (StandortfilterClickedEvent)=\"MitarebiterStandortfilterClickedHandler()\"></fi-mitarbeiter-auswahl>\n\n\n\n";

/***/ }),

/***/ 21168:
/*!**************************************************************************!*\
  !*** ./src/app/pages/common-wartung/common-wartung.page.html?ngResource ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header class=\"ion-no-border\">\n  <page-header #PageHeader>\n\n  </page-header>\n</ion-header>\n<ion-content>\n\n\n  <table style=\"width: 100%\">\n    <tr>\n      <td style=\"height: 120px; font-size: 200%; text-align: center; font-weight: bold; color: #307ac1;\"></td>\n    </tr>\n    <tr>\n      <td align=\"center\">\n        <div class=\"buttonbigclass\">\n\n          <table style=\"width: 100%;\">\n            <tr>\n              <td align=\"center\">\n                <ion-icon name=\"sunny-outline\" [color]=\"Basics.Ionicfarben.BAEBlau\" style=\"font-size: 120px\"></ion-icon>\n              </td>\n            </tr>\n            <tr>\n              <td style=\"text-align: center;\">\n                <ion-text [color]=\"Basics.Ionicfarben.Grau\" style=\"font-size: 26px\">Urlaub - Homeoffice - Planer</ion-text>\n              </td>\n            </tr>\n            <tr>\n              <td style=\"text-align: center; font-size: 90%; color: gray\">\n                Version: {{Basics.AppVersionName}} / {{Basics.AppVersionDatum}}\n              </td>\n            </tr>\n          </table>\n\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"height: 120px; font-size: 200%; text-align: center; font-weight: bold; color: #307ac1;\">Die App steht ab Dienstag, den 21.05.24 zu eurer Verfügung.</td>\n    </tr>\n  </table>\n\n\n\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n  </page-footer>\n</ion-footer>\n\n";

/***/ }),

/***/ 84440:
/*!*******************************************************************************!*\
  !*** ./src/app/pages/fi-mitarbeiterliste/fi-mitarbeiterliste.html?ngResource ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header  class=\"ion-no-border\">\n  <page-header #PageHeader>\n    <page-header-menu [ShowSuchleiste]=\"true\" [ShowSandortfilter]=\"true\" [ShowMitarbeitertitle]=\"true\"\n                      (SucheChanged)=\"SucheChanged($event)\" (StandortfilterClicked)=\"StandortFilterClickedHandler()\"></page-header-menu>\n\n    <ion-radio-group [value]=\"Freigabefilter\" (ionChange)=\"FreigabefilterChanged($event)\">\n      <table class=\"paddingtable\">\n        <tr>\n          <td><checkbox-clon [Checked]=\"ShowMeOnly\" (CheckChanged)=\"ShowMeCheckedChanged($event)\"></checkbox-clon></td>\n          <td style=\"color: white\">Nur meinen Eintrag anzeigen</td>\n          <td style=\"width: 6px\"></td>\n          <td><checkbox-clon [Checked]=\"ShowAktuelle\" (CheckChanged)=\"ShowAktuelleChanged($event)\"></checkbox-clon></td>\n          <td style=\"color: white\">Aktuelle Einträge anzeigen</td>\n          <td style=\"width: 6px\"></td>\n          <td><checkbox-clon [Checked]=\"ShowArchivierte\" (CheckChanged)=\"ShowArchivierteChanged($event)\"></checkbox-clon></td>\n          <td style=\"color: white\">Archivierte Einträge anzeigen</td>\n          <td style=\"width: 200px\"></td>\n          <td>Freigabefilter:</td>\n          <td style=\"color: white\"><ion-radio [value]=\"Freigabefiltervarianten.Keiner\" style=\"--color: white; --color-checked: white;\"></ion-radio></td><td>keiner</td>\n          <td style=\"width: 6px\"></td>\n          <td style=\"color: white\"><ion-radio [value]=\"Freigabefiltervarianten.Administrator\" style=\"--color: white; --color-checked: white;\"></ion-radio></td><td>Administrator</td>\n          <td style=\"width: 6px\"></td>\n          <td style=\"color: white\"><ion-radio [value]=\"Freigabefiltervarianten.Urlaubsfreigaben\" style=\"--color: white; --color-checked: white;\"></ion-radio></td><td>Urlaubsfreigaben</td>\n          <td style=\"width: 6px\"></td>\n          <td style=\"color: white\"><ion-radio [value]=\"Freigabefiltervarianten.Homeofficefreigaben\" style=\"--color: white; --color-checked: white;\"></ion-radio></td><td>Homeofficefreigaben</td>\n        </tr>\n      </table>\n    </ion-radio-group>\n  </page-header>\n</ion-header>\n<ion-content no-shadow no-border>\n\n    <ion-list *ngIf=\"Mitarbeiterliste && Mitarbeiterliste.length > 0\">\n      <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Mitarbeiter of Mitarbeiterliste, let i = index\" (click)=\"MitrabeiterButtonClicked(Mitarbeiter)\">\n        <ion-grid class=\"maingridclass\">\n          <ion-row  *ngIf=\"Mitarbeiterbuchstabenliste[i] !== ''\">\n            <ion-col size=\"12\">\n              <ion-text color=\"orange\"><b>{{Mitarbeiterbuchstabenliste[i]}}</b></ion-text>\n            </ion-col>\n          </ion-row>\n          <ion-row>\n            <ion-col size=\"12\">\n              <div class=\"kontaktclass\">\n                <table style=\"width: 100%\">\n                  <tr>\n                    <td style=\"width: 70%\">\n                      <table class=\"paddingsmalltable\" width=\"100%\">\n                        <tr>\n                          <td>\n                            <table *ngIf=\"Mitarbeiter !== null && Pool.Mitarbeiterdaten !== null\" cellspacing=\"0\" cellpadding=\"0\">\n                              <tr *ngIf=\"!Mitarbeiter.Filtered\">\n                                <td><div [style.background]=\"Mitarbeiter.Archiviert ? 'red' : 'green'\" style=\"height: 20px; width: 20px;  border-radius: 4px\"></div></td>\n                                <td *ngIf=\"Mitarbeiter.Email === Pool.Mitarbeiterdaten.Email && Mitarbeiter.Kuerzel === '' || Mitarbeiter.StandortID === ''\">\n                                  <img  src=\"/assets/svgs/alert.svg\" style=\"height: 26px\"/>\n                                </td>\n                                <td>\n                                  {{Mitarbeiter.Name}} {{Mitarbeiter.Vorname}} / {{Mitarbeiter.Kuerzel}}\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"Mitarbeiter.Filtered\">\n                                <td><div [style.background]=\"Mitarbeiter.Archiviert ? 'red' : 'green'\" style=\"height: 20px; width: 20px; border-radius: 4px\"></div></td>\n                                <td *ngIf=\"Mitarbeiter.Email === Pool.Mitarbeiterdaten.Email && Mitarbeiter.Kuerzel === '' || Mitarbeiter.StandortID === ''\">\n                                  <img src=\"/assets/svgs/alert.svg\" style=\"height: 26px\"/>\n                                </td>\n                                <td>\n                                  <span>{{Mitarbeiter.Text_A}}</span><span style=\"color: green\">{{Mitarbeiter.Text_B}}</span><span>{{Mitarbeiter.Text_C}}</span> / {{Mitarbeiter.Kuerzel}}\n                                </td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>\n                            <table class=\"infotable\" style=\"white-space:nowrap;\">\n                              <tr>\n                                <td style=\"width: 24px\"></td>\n                                <td style=\"width: 80px\" class=\"ergonametextclass\">Standort:</td>     <td style=\"width: 140px\">{{DBStandort.GetStandort(Mitarbeiter.StandortID)}}</td><td style=\"width: 20px\"></td>\n                                <td style=\"width: 60px\"  class=\"ergonametextclass\">Email:</td>      <td style=\"width: 200px\">{{Mitarbeiter.Email}}</td><td style=\"width: 20px\"></td>\n                              </tr>\n                              <tr>\n                                <td style=\"width: 24px\"></td>\n                                <td style=\"width: 80px\"  class=\"ergonametextclass\">Position:</td><td style=\"width: 140px\">{{DB.GetPositionsbezeichnung(Mitarbeiter.PositionID)}}</td><td style=\"width: 20px\"></td>\n                                <td colspan=\"3\"></td>\n                              </tr>\n                            </table>\n                        </tr>\n                      </table>\n\n                    </td>\n                    <td style=\"width: auto\" align=\"right\">\n                      <table width=\"600px\">\n                        <tr>\n                          <td style=\"width: 30%\" valign=\"top\">\n                            <table  *ngIf=\"Mitarbeiter.Planeradministrator\" class=\"paddingsmalltable\">\n                              <tr>\n                                <td><ion-icon name=\"shield-half-outline\" color=\"rot\" style=\"font-size: 20px\"></ion-icon></td><td style=\"font-size: 90%; font-weight: bold;\">Administrator</td>\n                              </tr>\n                            </table>\n                          </td>\n                          <td style=\"width: 30%\" valign=\"top\">\n                            <table *ngIf=\"Mitarbeiter.Urlaubsfreigaben\" class=\"paddingsmalltable\">\n                              <tr>\n                                <td><ion-icon name=\"sunny\" color=\"orange\" style=\"font-size: 20px\"></ion-icon></td><td style=\"font-size: 90%;font-weight: bold;\">Urlaubsfreigaben</td>\n                              </tr>\n                              <tr>\n                                <td></td>\n                                <td style=\"font-size: 80%; color: #444444;\">{{GetStandortliste(Mitarbeiter.Urlaubsfreigabeorte)}}</td>\n                              </tr>\n                            </table>\n                          </td>\n                          <td style=\"width: 30%\" valign=\"top\">\n                            <table *ngIf=\"Mitarbeiter.Homeofficefreigaben\" class=\"paddingsmalltable\">\n                              <tr>\n                                  <td><ion-icon name=\"home\" color=\"blau\" style=\"font-size: 20px\"></ion-icon></td><td style=\"font-size: 90%;font-weight: bold;\">Homeofficefreigaben</td>\n                              </tr>\n                              <tr>\n                                <td></td>\n                                <td style=\"font-size: 80%; color: #444444\">{{GetStandortliste(Mitarbeiter.Homeofficefreigabestandorte)}}</td>\n                              </tr>\n                            </table>\n                          </td>\n                          <td style=\"width:10%\"></td>\n                        </tr>\n                      </table>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n      </ion-item>\n    </ion-list>\n\n    <table *ngIf=\"Mitarbeiterliste.length === 0\" class=\"paddingtable\" width=\"100%\">\n      <tr>\n        <td style=\"height: 80px; text-align: center; vertical-align: center\">\n          keine Mitarbeiter vorhanden\n        </td>\n      </tr>\n    </table>\n\n\n\n\n    <!--\n  <ng-container *ngIf=\"Menueindex === 2\">\n    <ion-list [style.width.px]=\"Listenbreite\">\n\n      <ion-item  *ngFor=\"let Lager of Pool.Lagerliste, let i = index\" class=\"ion-text-wrap\" class=\"ion-no-padding\"   (click)=\"LieferantButtonClicked(Lager)\">\n        <ion-grid class=\"maingridclass\">\n          <ion-row>\n            <ion-col>\n              <table cellspacing=\"0\" cellpadding=\"0\">\n                <tr>\n                  <td>\n                    {{Lager.Displayname}}\n                  </td>\n                  <td>\n                    <ion-icon  name=\"subway\" [color]=\"'blau'\" style=\"font-size: 32px\"></ion-icon>\n                  </td>\n                </tr>\n              </table>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n      </ion-item>\n    </ion-list>\n\n    <table *ngIf=\"Pool.Lagerliste.length === 0\"  class=\"paddingtable\" width=\"100%\">\n      <tr>\n        <td align=\"center\">\n          kein Lager / Einzelhändler vorhanden\n        </td>\n      </tr>\n    </table>\n  </ng-container>\n  [Buttoncolor]=\"Basics.Ionicfarben.GRUEN\"\n-->\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n    <table style=\"width: 100%\">\n      <tr>\n        <td style=\"width: 50%\">\n          {{Mitarbeiterliste.length}} Einträge\n        </td>\n      </tr>\n    </table>\n\n  </page-footer>\n</ion-footer>\n\n<fi-mitarbeiter-editor *ngIf=\"ShowEditor\" [Dialogbreite]=\"1280\" [Titel]=\"GetDialogTitel()\" Iconname=\"people-outline\"\n                       (StandortClickedEvent)=\"StandortClickedHandler()\"\n                       (CancelClickedEvent)=\"ShowEditor = false\"\n                       (OkClickedEvent)=\"ShowEditor = false\"\n                       (ResturlaubEvent)=\"ResturlaubClicked()\"\n                       (AnredeClickedEvent)=\"AnredeClickedEventHandler()\"\n                       (PositionClickedEvent)=\"PositionClickedEventHandler()\"\n                       (UrlaubClickedEvent)=\"UrlaubClickedEventHandler()\">\n</fi-mitarbeiter-editor>\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\"\n                [Dialogbreite]=\"300\" [PositionY]=\"100\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"GetDialogTitelicon()\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\"></auswahl-dialog>\n\n<alphabet #Alphabet (AlphabetClicked)=\"AlphabetClicked($event)\"\n          [PageHeader]=\"PageHeader\"\n          [PageFooter]=\"PageFooter\"\n          [Breite]=\"Alphapetbreite\"\n          [Buchstabenliste]=\"Mitarbeiteralphabet\"\n          [Auswahl]=\"Mitarbeiteralphabetauswahl\"></alphabet>\n\n<!--\n\nAus hochwertigem synthetischem Garn 8125 von BCY.\nDie 14 Strang sind eher für geringere Zuggewichte bis 35 Pfund ausgelegt.\nBeiter Nocken mit Nockbett #1 passen bei dieser Sehne.\n\n-->\n";

/***/ }),

/***/ 63844:
/*!***************************************************************************!*\
  !*** ./src/app/pages/fi-standorteliste/fi-standorteliste.html?ngResource ***!
  \***************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<ion-header class=\"ion-no-border\">\n  <page-header #PageHeader>\n    <page-header-menu [ShowSuchleiste]=\"true\" [ShowStandorttitle]=\"true\" (SucheChanged)=\"SucheChangedHandler($event)\"></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n  <ion-list *ngIf=\"Standorteliste && Standorteliste.length > 0\">\n    <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Standort of Standorteliste, let i = index\" (click)=\"StandortButtonClicked(Standort)\">\n      <ion-grid class=\"maingridclass\">\n        <ion-row  *ngIf=\"Standortebuchstabenliste[i] !== ''\">\n          <ion-col size=\"12\">\n            <ion-text color=\"orange\"><b>{{Standortebuchstabenliste[i]}}</b></ion-text>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col size=\"12\">\n            <table style=\"width: 100%;\">\n              <tr>\n                <td style=\"width: 60%;\" valign=\"top\">\n                  <div class=\"kontaktclass\">\n                    <table class=\"paddingsmalltable\" width=\"100%\">\n                      <tr>\n                        <td>\n                          <table cellspacing=\"0\" cellpadding=\"0\">\n                            <tr *ngIf=\"!Standort.Filtered\">\n                              <td>\n                                {{Standort.Ort}}\n                              </td>\n                            </tr>\n                            <tr *ngIf=\"Standort.Filtered\">\n                              <td>\n                                <span>{{Standort.Text_A}}</span><span style=\"color: green\">{{Standort.Text_B}}</span><span>{{Standort.Text_C}}</span>\n                              </td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <table class=\"infotable\" style=\"white-space:nowrap;\">\n                            <tr>\n                              <td class=\"ergonametextclass\">Kürzel:</td><td>{{Standort.Kuerzel}}</td><td style=\"width: 20px\"></td>\n                              <td class=\"ergonametextclass\">Email:</td><td>{{Standort.Email}}</td><td style=\"width: 20px\"></td>\n                            </tr>\n                          </table>\n                      </tr>\n                    </table>\n                  </div>\n                </td>\n                <td style=\"width: auto\">\n\n                  <table width=\"400px\">\n                    <tr>\n                      <td style=\"width: 30%\" valign=\"top\">\n                        <table  class=\"paddingsmalltable\">\n                          <tr>\n                            <td><ion-icon name=\"sunny\" color=\"orange\" style=\"font-size: 20px\"></ion-icon></td><td style=\"font-size: 90%;font-weight: bold;\">Urlaubsfreigaben</td>\n                          </tr>\n                          <ng-container *ngFor=\"let Mitarbeiter of DBMitarbeiter.GetUrlausbsfreigeberliste(Standort._id)\">\n                            <tr *ngIf=\"CheckMitarbeiterIsStandortUrlaubsfreigabe(Mitarbeiter._id, Standort)\">\n                              <td></td>\n                              <td style=\"font-size: 80%; color: #444444;\">{{Mitarbeiter.Vorname}} {{Mitarbeiter.Name}}</td>\n                            </tr>\n                          </ng-container>\n                        </table>\n                      </td>\n                      <td style=\"width: 30%\" valign=\"top\">\n                        <table  class=\"paddingsmalltable\">\n                          <tr>\n                            <td><ion-icon name=\"home\" color=\"blau\" style=\"font-size: 20px\"></ion-icon></td><td style=\"font-size: 90%;font-weight: bold;\">Homeofficefreigaben</td>\n                          </tr>\n                          <ng-container *ngFor=\"let Mitarbeiter of DBMitarbeiter.GetHomeofficefreigeberliste(Standort._id)\">\n                            <tr *ngIf=\"CheckMitarbeiterIsStandortHomeofficefreigabe(Mitarbeiter._id, Standort)\">\n                              <td></td>\n                              <td style=\"font-size: 80%; color: #444444;\">{{Mitarbeiter.Vorname}} {{Mitarbeiter.Name}}</td>\n                            </tr>\n                          </ng-container>\n                        </table>\n                      </td>\n                      <td style=\"width:10%\"></td>\n                    </tr>\n                  </table>\n                </td>\n              </tr>\n            </table>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </ion-item>\n  </ion-list>\n  <table *ngIf=\"Standorteliste.length === 0\" class=\"paddingtable\" width=\"100%\">\n    <tr>\n      <td style=\"height: 80px; text-align: center; vertical-align: center\">\n        kein Standorte vorhanden\n      </td>\n    </tr>\n  </table>\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n    <div class=\"rootbuttonclass\" (click)=\"AddStandorteButtonClicked()\">\n      <ion-icon style=\"font-size: 28px\" color=\"weiss\" name=\"add-circle-outline\"></ion-icon>\n    </div>\n\n  </page-footer>\n</ion-footer>\n\n<fi-standort-editor *ngIf=\"ShowEditor\" [Dialogbreite]=\"600\" [Dialoghoehe]=\"800\" [PositionY]=\"100\" [Titel]=\"GetDialogTitel()\" Iconname=\"location-outline\"\n                    (CancelClickedEvent)=\"ShowEditor = false\"\n                    (OkClickedEvent)=\"ShowEditor = false\" (DeleteClickedEvent)=\"ShowEditor = false\"\n                    (LandClickedEvent)=\"LandClickedEventHandler()\"\n                    (BundeslandClickedEvent)=\"BundeslandClickedEventHandler()\"\n                    (KonfessionClickedEvent)=\"KonfessionClickedEventHandler()\"></fi-standort-editor>\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\" [ZIndex]=\"5000\"\n                [Dialogbreite]=\"400\"  [PositionY]=\"100\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"''\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\">\n</auswahl-dialog>\n\n<alphabet #Alphabet (AlphabetClicked)=\"AlphabetClicked($event)\"\n          [PageHeader]=\"PageHeader\"\n          [PageFooter]=\"PageFooter\"\n          [Buchstabenliste]=\"Standortealphabet\"\n          [Breite]=\"Alphapetbreite\"\n          [Auswahl]=\"Standortealphabetauswahl\"></alphabet>\n\n\n";

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendor"], () => (__webpack_exec__(27460)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=main.js.map